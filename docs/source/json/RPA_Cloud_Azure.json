{
    "name": "RPA.Cloud.Azure",
    "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Azure</cite> is a library for operating with Microsoft Azure API endpoints.</p>\n<p>List of supported service names:</p>\n<ul class=\"simple\">\n<li>computervision (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/\">Azure Computer Vision API</a>)</li>\n<li>face (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/\">Azure Face API</a>)</li>\n<li>speech (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/\">Azure Speech Services API</a>)</li>\n<li>textanalytics (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/\">Azure Text Analytics API</a>)</li>\n</ul>\n<p><strong>Azure authentication</strong></p>\n<p>Authentication for Azure is set with <cite>service subscription key</cite> which can be given to the library\nin two different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, either service specific environment variable\nfor example <tt class=\"docutils literal\">AZURE_TEXTANALYTICS_KEY</tt> or with common key <tt class=\"docutils literal\">AZURE_SUBSCRIPTION_KEY</tt> which\nwill be used for all the services.</li>\n<li>Method 2 as Robocloud vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p>Method 1. subscription key using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get subscription key\n</span><span class=\"p\">    </span><span class=\"c\"># with AZURE_TEXTANALYTICS_KEY or AZURE_SUBSCRIPTION_KEY environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init Text Analytics Service</span>\n</pre>\n<p>Method 2. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">  </span><span class=\"s\">robocloud_vault_name=azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 2. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">          </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>References</strong></p>\n<p>List of supported language locales - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/language-support#speech-to-text\">Azure locale list</a></p>\n<p>List of supported region identifiers - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/regions#speech-to-text-text-to-speech-and-translation\">Azure region list</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>This is a section which describes how to use the library in your\nRobot Framework tasks.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}   </span><span class=\"s\">IMAGE_URL</span><span class=\"p\">\n${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}    </span><span class=\"s\">Faces,ImageType</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Visioning image information</span><span class=\"p\">\n   </span><span class=\"nf\">Init Computer Vision Service</span><span class=\"p\">\n   &amp;{</span><span class=\"nv\">result</span><span class=\"p\">}   </span><span class=\"nf\">Vision Analyze</span><span class=\"p\">  </span><span class=\"s\">image_url=</span><span class=\"p\">${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}  </span><span class=\"s\">visual_features=</span><span class=\"p\">${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}\n   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}    </span><span class=\"nf\">Set Variable</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[faces]</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">face</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}\n      </span><span class=\"nf\">Log</span><span class=\"p\">  </span><span class=\"s\">Age: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[age], Gender: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[gender], Rectangle: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[faceRectangle]</span><span class=\"p\">\n   </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>This is a section which describes how to use the library in your\nown Python modules.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Azure</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_text_analytics_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_face_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_computer_vision_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_speech_service</span><span class=\"p\">(</span><span class=\"s2\">&quot;westeurope&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sentiment_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;The rooms were wonderful and the staff was helpful.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">detect_face</span><span class=\"p\">(</span>\n   <span class=\"n\">image_file</span><span class=\"o\">=</span><span class=\"n\">PATH_TO_FILE</span><span class=\"p\">,</span>\n   <span class=\"n\">face_attributes</span><span class=\"o\">=</span><span class=\"s2\">&quot;age,gender,smile,hair,facialHair,emotion&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n   <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;gender&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;age&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">gender</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">age</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">vision_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">image_url</span><span class=\"o\">=</span><span class=\"n\">URL_TO_IMAGE</span><span class=\"p\">,</span>\n   <span class=\"n\">visual_features</span><span class=\"o\">=</span><span class=\"s2\">&quot;Faces,ImageType&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'metadata'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n   <span class=\"sa\">f</span><span class=\"s2\">&quot;Image dimensions meta['width']</span><span class=\"si\">}</span><span class=\"s2\">x</span><span class=\"si\">{</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">'height'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> pixels&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;faces&quot;</span><span class=\"p\">]:</span>\n   <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;left&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;top&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;width&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;height&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'gender'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (left=</span><span class=\"si\">{</span><span class=\"n\">left</span><span class=\"si\">}</span><span class=\"s2\">, top=</span><span class=\"si\">{</span><span class=\"n\">top</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (width=</span><span class=\"si\">{</span><span class=\"n\">width</span><span class=\"si\">}</span><span class=\"s2\">, height=</span><span class=\"si\">{</span><span class=\"n\">height</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">text_to_speech</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Developer tools for open-source RPA leveraging the Robot Framework ecosystem&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">neural_voice_style</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheerful&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">target_file</span><span class=\"o\">=</span><span class=\"s1\">'output.mp3'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
    "version": "",
    "named_args": true,
    "scope": "GLOBAL",
    "generated": "2020-12-01 13:50:46",
    "inits": [
        {
            "name": "Init",
            "args": [
                "region: str = northeurope",
                "robocloud_vault_name: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
            "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
            "tags": [],
            "matched": true
        }
    ],
    "keywords": [
        {
            "name": "Detect Face",
            "args": [
                "image_file: str = None",
                "image_url: str = None",
                "face_attributes: str = None",
                "face_landmarks: bool = False",
                "recognition_model: str = recognition_02",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect facial attributes in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of attributes,\nfor example. &quot;age,gender,smile&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_landmarks:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">return face landmarks of the detected faces\nor not. The default value is <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recognition_model:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">model used by Azure to detech faces, options\nare &quot;recognition_01&quot; or &quot;recognition_02&quot;, default is &quot;recognition_02&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>Read more about <cite>face_attributes</cite> at <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/concepts/face-detection\">Face detection explained</a>:</p>\n<ul class=\"simple\">\n<li>age</li>\n<li>gender</li>\n<li>smile</li>\n<li>facialHair</li>\n<li>headPose</li>\n<li>glasses</li>\n<li>emotion</li>\n<li>hair</li>\n<li>makeup</li>\n<li>accessories</li>\n<li>blur</li>\n<li>exposure</li>\n<li>nouse</li>\n</ul>\n</div>\n</div>",
            "shortdoc": "Detect facial attributes in the image",
            "tags": [],
            "matched": true
        },
        {
            "name": "Detect Language",
            "args": [
                "text: str",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect languages in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Detect languages in the given text",
            "tags": [],
            "matched": true
        },
        {
            "name": "Find Entities",
            "args": [
                "text: str",
                "language: str = None",
                "json_file=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect entities in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Detect entities in the given text",
            "tags": [],
            "matched": true
        },
        {
            "name": "Init Computer Vision Service",
            "args": [
                "region: str = None",
                "use_robocloud_vault: bool = False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Computer Vision</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Initialize Azure Computer Vision",
            "tags": [],
            "matched": true
        },
        {
            "name": "Init Face Service",
            "args": [
                "region: str = None",
                "use_robocloud_vault: bool = False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Face</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Initialize Azure Face",
            "tags": [],
            "matched": true
        },
        {
            "name": "Init Speech Service",
            "args": [
                "region: str = None",
                "use_robocloud_vault: bool = False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Speech</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Initialize Azure Speech",
            "tags": [],
            "matched": true
        },
        {
            "name": "Init Text Analytics Service",
            "args": [
                "region: str = None",
                "use_robocloud_vault: bool = False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Text Analyticts</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Initialize Azure Text Analyticts",
            "tags": [],
            "matched": true
        },
        {
            "name": "Key Phrases",
            "args": [
                "text: str",
                "language: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect key phrases in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Detect key phrases in the given text",
            "tags": [],
            "matched": true
        },
        {
            "name": "List Supported Voices",
            "args": [
                "locale: str = None",
                "neural_only: bool = False",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List supported voices for Azure API Speech Services.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">list only voices specific to locale, by default return all voices</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_only:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><cite>True</cite> if only neural voices should be returned,\n<cite>False</cite> by default</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">voices in json</td>\n</tr>\n</tbody>\n</table>\n<p>Available voice selection might differ between regions.</p>\n</div>\n</div>",
            "shortdoc": "List supported voices for Azure API Speech Services.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Sentiment Analyze",
            "args": [
                "text: str",
                "language: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Analyze sentiments in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Analyze sentiments in the given text",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Robocloud Vault",
            "args": [
                "vault_name"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set Robocloud Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocloud Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Set Robocloud Vault name",
            "tags": [],
            "matched": true
        },
        {
            "name": "Text To Speech",
            "args": [
                "text: str",
                "language: str = en-US",
                "name: str = en-US-AriaRUS",
                "gender: str = FEMALE",
                "encoding: str = MP3",
                "neural_voice_style: typing.Any = None",
                "target_file: str = synthesized.mp3"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Synthesize speech synchronously</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">input text to synthesize</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">voice language, defaults to &quot;en-US&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">voice name, defaults to &quot;en-US-AriaRUS&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param gender:</th><td class=\"field-body\">voice gender, defaults to &quot;FEMALE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">result encoding type, defaults to &quot;MP3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_voice_style:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then neural voice is used,\nexample style. &quot;cheerful&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save synthesized output to file,\ndefaults to &quot;synthesized.mp3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">synthesized output in bytes</td>\n</tr>\n</tbody>\n</table>\n<p>Neural voices are only supported for Speech resources created in\nEast US, South East Asia, and West Europe regions.</p>\n</div>\n</div>",
            "shortdoc": "Synthesize speech synchronously",
            "tags": [],
            "matched": true
        },
        {
            "name": "Vision Analyze",
            "args": [
                "image_file: str = None",
                "image_url: str = None",
                "visual_features: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Identify features in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param visual_features:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of features,\nfor example. &quot;Categories,Description,Color&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>See <a class=\"reference external\" href=\"https://westcentralus.dev.cognitive.microsoft.com/docs/services/computer-vision-v3-ga\">Computer Vision API</a> for valid feature names and their explanations:</p>\n<ul class=\"simple\">\n<li>Adult</li>\n<li>Brands</li>\n<li>Categories</li>\n<li>Color</li>\n<li>Description</li>\n<li>Faces</li>\n<li>ImageType</li>\n<li>Objects</li>\n<li>Tags</li>\n</ul>\n</div>\n</div>",
            "shortdoc": "Identify features in the image",
            "tags": [],
            "matched": true
        },
        {
            "name": "Vision Describe",
            "args": [
                "image_file: str = None",
                "image_url: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Describe image with tags and captions</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Describe image with tags and captions",
            "tags": [],
            "matched": true
        },
        {
            "name": "Vision Detect Objects",
            "args": [
                "image_file: str = None",
                "image_url: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect objects in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Detect objects in the image",
            "tags": [],
            "matched": true
        },
        {
            "name": "Vision Ocr",
            "args": [
                "image_file: str = None",
                "image_url: str = None",
                "json_file: str = None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Optical Character Recognition (OCR) detects text in an image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Optical Character Recognition (OCR) detects text in an image",
            "tags": [],
            "matched": true
        }
    ],
    "all_tags": [],
    "contains_tags": false
}