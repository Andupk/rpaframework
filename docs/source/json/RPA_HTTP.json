{
    "name": "RPA.HTTP",
    "doc": "<p>RPA Framework HTTP library that extends functionality of RequestsLibrary, for more information see: <a href=\"https://github.com/MarketSquare/robotframework-requests\">https://github.com/MarketSquare/robotframework-requests</a></p>",
    "version": "0.7.2",
    "named_args": true,
    "scope": "GLOBAL",
    "generated": "2020-12-01 13:50:49",
    "inits": [
        {
            "name": "Init",
            "args": [
                "*args",
                "**kwargs"
            ],
            "doc": "<p>Initialize self.  See help(type(self)) for accurate signature.</p>",
            "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
            "tags": [],
            "matched": true
        }
    ],
    "keywords": [
        {
            "name": "Create Client Cert Session",
            "args": [
                "alias",
                "url",
                "headers={}",
                "cookies={}",
                "client_certs=None",
                "timeout=None",
                "proxies=None",
                "verify=False",
                "debug=0",
                "max_retries=3",
                "backoff_factor=0.1",
                "disable_warnings=0",
                "retry_status_list=[]",
                "retry_method_list=['OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'PUT', 'GET']"
            ],
            "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>client_certs</code> ['client certificate', 'client key'] PEM files containing the client key and certificate</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
            "shortdoc": "Create Session: create a HTTP session to a server",
            "tags": [],
            "matched": true
        },
        {
            "name": "Create Custom Session",
            "args": [
                "alias",
                "url",
                "auth",
                "headers={}",
                "cookies={}",
                "timeout=None",
                "proxies=None",
                "verify=False",
                "debug=0",
                "max_retries=3",
                "backoff_factor=0.1",
                "disable_warnings=0",
                "retry_status_list=[]",
                "retry_method_list=['OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'PUT', 'GET']"
            ],
            "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> A Custom Authentication object to be passed on to the requests library. <a href=\"http://docs.python-requests.org/en/master/user/advanced/#custom-authentication\">http://docs.python-requests.org/en/master/user/advanced/#custom-authentication</a></p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
            "shortdoc": "Create Session: create a HTTP session to a server",
            "tags": [],
            "matched": true
        },
        {
            "name": "Create Digest Session",
            "args": [
                "alias",
                "url",
                "auth",
                "headers={}",
                "cookies={}",
                "timeout=None",
                "proxies=None",
                "verify=False",
                "debug=0",
                "max_retries=3",
                "backoff_factor=0.1",
                "disable_warnings=0",
                "retry_status_list=[]",
                "retry_method_list=['OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'PUT', 'GET']"
            ],
            "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
            "shortdoc": "Create Session: create a HTTP session to a server",
            "tags": [],
            "matched": true
        },
        {
            "name": "Create Ntlm Session",
            "args": [
                "alias",
                "url",
                "auth",
                "headers={}",
                "cookies={}",
                "timeout=None",
                "proxies=None",
                "verify=False",
                "debug=0",
                "max_retries=3",
                "backoff_factor=0.1",
                "disable_warnings=0",
                "retry_status_list=[]",
                "retry_method_list=['OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'PUT', 'GET']"
            ],
            "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
            "shortdoc": "Create Session: create a HTTP session to a server",
            "tags": [],
            "matched": true
        },
        {
            "name": "Create Session",
            "args": [
                "alias",
                "url",
                "headers={}",
                "cookies={}",
                "auth=None",
                "timeout=None",
                "proxies=None",
                "verify=False",
                "debug=0",
                "max_retries=3",
                "backoff_factor=0.1",
                "disable_warnings=0",
                "retry_status_list=[]",
                "retry_method_list=['OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'PUT', 'GET']"
            ],
            "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> List of username &amp; password for HTTP Basic Auth</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
            "shortdoc": "Create Session: create a HTTP session to a server",
            "tags": [],
            "matched": true
        },
        {
            "name": "Delete All Sessions",
            "args": [],
            "doc": "<p>Removes all the session objects</p>",
            "shortdoc": "Removes all the session objects",
            "tags": [],
            "matched": true
        },
        {
            "name": "Delete Request",
            "args": [
                "alias",
                "uri",
                "data=None",
                "json=None",
                "params=None",
                "headers=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a DELETE request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the DELETE request to</p>\n<p><code>json</code> a value that will be json encoded and sent as request data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a DELETE request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Download",
            "args": [
                "url: str",
                "target_file: str = None",
                "binary: bool = True",
                "verify: bool = True",
                "force_new_session: bool = False",
                "overwrite: bool = False"
            ],
            "doc": "<p>An alias for the <code>HTTP Get</code> keyword.</p>\n<p>The difference in use is that the URL is always downloaded based on the URL path (even without <code>target_file</code>). If there is a filename in the path, then that is used as <code>target_file</code> to save to. By default, the filename will be \"downloaded.html\".</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>binary</code> if file is saved as binary, default <code>True</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code></p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>",
            "shortdoc": "An alias for the <code>HTTP Get</code> keyword.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Current Session Alias",
            "args": [],
            "doc": "<p>Get request session alias that was used with the <code>HTTP Get</code> keyword.</p>\n<p>Return name of session alias.</p>",
            "shortdoc": "Get request session alias that was used with the <code>HTTP Get</code> keyword.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get File For Streaming Upload",
            "args": [
                "path"
            ],
            "doc": "<p>Opens and returns a file descriptor of a specified file to be passed as <code>data</code> parameter to other requests keywords.</p>\n<p>This allows streaming upload of large files without reading them into memory.</p>\n<p>File descriptor is binary mode and read only. Requests keywords will automatically close the file, if used outside this library it's up to the caller to close it.</p>",
            "shortdoc": "Opens and returns a file descriptor of a specified file to be passed as <code>data</code> parameter to other requests keywords.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Request",
            "args": [
                "alias",
                "uri",
                "headers=None",
                "data=None",
                "json=None",
                "params=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a GET request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the GET request to</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as GET data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as GET data if data is not specified</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a GET request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Head Request",
            "args": [
                "alias",
                "uri",
                "headers=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a HEAD request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the HEAD request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a HEAD request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Http Get",
            "args": [
                "url: str",
                "target_file: str = None",
                "binary: bool = True",
                "verify: bool = True",
                "force_new_session: bool = False",
                "overwrite: bool = False"
            ],
            "doc": "<p>A helper method for <code>Get Request</code> that will create a session, perform GET request, and store the target file, if set by the <code>target_file</code> parameter.</p>\n<p>The old session will be used if the URL scheme and the host are the same as previously, e.g., '<a href=\"https://www.google.fi\">https://www.google.fi</a>' part of the URL.</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>binary</code> if file is saved as binary, default <code>True</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code></p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>\n<p>Returns request response.</p>",
            "shortdoc": "A helper method for <code>Get Request</code> that will create a session, perform GET request, and store the target file, if set by the <code>target_file</code> parameter.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Options Request",
            "args": [
                "alias",
                "uri",
                "headers=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the OPTIONS request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Patch Request",
            "args": [
                "alias",
                "uri",
                "data=None",
                "json=None",
                "params=None",
                "headers=None",
                "files=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a PATCH request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PATCH request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PATCH data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PATCH data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to PATCH to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a PATCH request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Post Request",
            "args": [
                "alias",
                "uri",
                "data=None",
                "json=None",
                "params=None",
                "headers=None",
                "files=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a POST request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the POST request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as POST data or binary data that is sent as the raw body content or passed as such for multipart form data if <code>files</code> is also defined or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as POST data if files or data is not specified</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to POST to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a POST request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Put Request",
            "args": [
                "alias",
                "uri",
                "data=None",
                "json=None",
                "params=None",
                "files=None",
                "headers=None",
                "allow_redirects=None",
                "timeout=None"
            ],
            "doc": "<p>Send a PUT request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PUT request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PUT data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PUT data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
            "shortdoc": "Send a PUT request on the session object found using the given <span class=\"name\">alias</span>",
            "tags": [],
            "matched": true
        },
        {
            "name": "Request Should Be Successful",
            "args": [
                "response"
            ],
            "doc": "<p>Fails if response status code is a client or server error (4xx, 5xx).</p>\n<p>The <code>response</code> is the output of other requests keywords like <code>Get Request</code>.</p>\n<p>In case of failure an HTTPError will be automatically raised.</p>",
            "shortdoc": "Fails if response status code is a client or server error (4xx, 5xx).",
            "tags": [],
            "matched": true
        },
        {
            "name": "Session Exists",
            "args": [
                "alias"
            ],
            "doc": "<p>Return True if the session has been already created</p>\n<p><code>alias</code> that has been used to identify the Session object in the cache</p>",
            "shortdoc": "Return True if the session has been already created",
            "tags": [],
            "matched": true
        },
        {
            "name": "Status Should Be",
            "args": [
                "expected_status",
                "response",
                "msg=None"
            ],
            "doc": "<p>Fails if response status code is different than the expected.</p>\n<p><code>expected_status</code> could be the code number as an integer or as string. But it could also be a named status code like 'ok', 'created', 'accepted' or 'bad request', 'not found' etc.</p>\n<p>The <code>response</code> is the output of other requests keywords like <code>Get Request</code>.</p>\n<p>A custom message <code>msg</code> can be added to work like built in keywords.</p>",
            "shortdoc": "Fails if response status code is different than the expected.",
            "tags": [],
            "matched": true
        },
        {
            "name": "To Json",
            "args": [
                "content",
                "pretty_print=False"
            ],
            "doc": "<p>Convert a string to a JSON object</p>\n<p><code>content</code> String content to convert into JSON</p>\n<p><code>pretty_print</code> If defined, will output JSON is pretty print format</p>",
            "shortdoc": "Convert a string to a JSON object",
            "tags": [],
            "matched": true
        },
        {
            "name": "Update Session",
            "args": [
                "alias",
                "headers=None",
                "cookies=None"
            ],
            "doc": "<p>Update Session Headers: update a HTTP Session Headers</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of headers merge into session</p>",
            "shortdoc": "Update Session Headers: update a HTTP Session Headers",
            "tags": [],
            "matched": true
        }
    ],
    "all_tags": [],
    "contains_tags": false
}