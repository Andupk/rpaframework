{
    "name": "RPA.Tables",
    "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Tables</cite> is a library for manipulating tabular data inside Robot Framework.</p>\n<p>It can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.</p>\n<p><strong>Import types</strong></p>\n<p>The data from which a table can be created can be of two main types:</p>\n<ol class=\"arabic simple\">\n<li>An iterable of individual rows, like a list of lists, or list of dictionaries</li>\n<li>A dictionary of columns, where each dictionary value is a list of values</li>\n</ol>\n<p>For instance, these two input values:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">],</span>\n    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">58</span><span class=\"p\">,</span>     <span class=\"mi\">22</span><span class=\"p\">,</span>     <span class=\"mi\">67</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Would both result in the following table:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"39%\" />\n<col width=\"33%\" />\n<col width=\"28%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Index</th>\n<th class=\"head\">Name</th>\n<th class=\"head\">Age</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>1</td>\n<td>Mark</td>\n<td>58</td>\n</tr>\n<tr><td>2</td>\n<td>John</td>\n<td>22</td>\n</tr>\n<tr><td>3</td>\n<td>Adam</td>\n<td>67</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Tables</cite> library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Files to Table</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}\n    </span><span class=\"nf\">Filter table by column</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">size</span><span class=\"p\">  </span><span class=\"s\">&gt;=</span><span class=\"p\">  ${</span><span class=\"nv\">1024</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}</span><span class=\"s\">[name]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Write table to CSV</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files.csv</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">read_table_from_csv</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;orders.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;product&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">group_table_by_column</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">customer</span> <span class=\"ow\">in</span> <span class=\"n\">customers</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">customer</span><span class=\"p\">:</span>\n        <span class=\"n\">add_cart</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n    <span class=\"n\">make_order</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
    "version": "",
    "named_args": true,
    "scope": "GLOBAL",
    "generated": "2020-12-01 13:50:50",
    "inits": [],
    "keywords": [
        {
            "name": "Add Table Column",
            "args": [
                "table",
                "name=None",
                "values=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Append a column to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">name of new column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">row values (or single scalar value for all rows)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Append a column to a table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Add Table Row",
            "args": [
                "table",
                "row",
                "index=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Append rows to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">value for new row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">index name for new row</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Append rows to a table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Clear Table",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Clear table in-place, but keep columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to clear</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Clear table in-place, but keep columns.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Copy Table",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Copy table object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to copy</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Copy table object.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Create Table",
            "args": [
                "data=None",
                "trim=False",
                "columns=None",
                "index=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create Table object from data.</p>\n<p>Data can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">source data for table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">remove all empty rows from the end of the worksheet,\ndefault <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">names of columns (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">names of rows (optional)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Create Table object from data.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Export Table",
            "args": [
                "table",
                "with_index=False",
                "as_list=True"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Convert table object to standard Python containers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to convert to dict</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_index:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include index in values</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">export data as list instead of dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Convert table object to standard Python containers.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Filter Empty Rows",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all rows from the table which have only None values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Remove all rows from the table which have only None values.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Filter Table By Column",
            "args": [
                "table",
                "column",
                "operator",
                "value"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return all rows where the column values match the given condition.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to filter with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">filtering operator, e.g. &gt;, &lt;, ==, contains</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to compare column to (using operator)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Return all rows where the column values match the given condition.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Find Table Rows",
            "args": [
                "table",
                "column",
                "value",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find a row in the table by a given column value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to find from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">name of column to search</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to match for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Find a row in the table by a given column value.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Table Cell",
            "args": [
                "table",
                "row",
                "column"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get a cell value from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column of cell</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Get a cell value from table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Table Column",
            "args": [
                "table",
                "column",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all column values from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Get all column values from table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Table Dimensions",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return table dimensions, as (rows, columns).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Return table dimensions, as (rows, columns).",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Table Row",
            "args": [
                "table",
                "index",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get a single row from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Get a single row from table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Get Table Slice",
            "args": [
                "table",
                "start=None",
                "end=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return a new Table from a subset of given Table rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">start index (inclusive)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">end index (inclusive)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Return a new Table from a subset of given Table rows.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Group Table By Column",
            "args": [
                "table",
                "column"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Group table by <cite>column</cite> and return a list of grouped Tables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to use for grouping</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column which is used as grouping criteria</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Group table by <cite>column</cite> and return a list of grouped Tables.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Merge Tables",
            "args": [
                "*tables",
                "index=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a union of two tables and their contents.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tables:</th><td class=\"field-body\">Tables to merge</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">Column name to use as index for merge</td>\n</tr>\n</tbody>\n</table>\n<p>By default rows from all tables are appended one after the other.\nOptionally a column name can be given with <tt class=\"docutils literal\">index</tt>, which is\nused to merge rows together.</p>\n<p>Example:</p>\n<p>For instance, a <tt class=\"docutils literal\">name</tt> column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Price</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>10.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>15.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>20.0</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Stock</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>12.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>99.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>0.0</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${products}=</span><span class=\"p\">    </span><span class=\"c\">Merge tables</span><span class=\"p\">    </span><span class=\"c\">${prices}</span><span class=\"p\">    </span><span class=\"c\">${stock}</span><span class=\"p\">    </span><span class=\"c\">index=Name</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${product}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{products}</span><span class=\"p\">\n    </span><span class=\"c\">Log many</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Product: ${product}[Name]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Price: ${product}[Price]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Stock: ${product}[Stock]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
            "shortdoc": "Create a union of two tables and their contents.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Pop Table Column",
            "args": [
                "table",
                "column=None",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove column from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Remove column from table and return it.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Pop Table Row",
            "args": [
                "table",
                "index=None",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove row from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">row index, pops first row if none given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Remove row from table and return it.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Read Table From Csv",
            "args": [
                "path",
                "header=None",
                "columns=None",
                "dialect=None",
                "delimiters=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read a CSV file as a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">CSV file includes header</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">names of columns in resulting table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">format of CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delimiters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string of possible delimiters</td>\n</tr>\n</tbody>\n</table>\n<p>By default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it's unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.</p>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>,\nand <tt class=\"docutils literal\">header</tt> is boolean argument (<tt class=\"docutils literal\">True</tt>/<tt class=\"docutils literal\">False</tt>). Optionally a\nset of valid <tt class=\"docutils literal\">delimiters</tt> can be given as a string.</p>\n<p>The <tt class=\"docutils literal\">columns</tt> argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.</p>\n</div>\n</div>",
            "shortdoc": "Read a CSV file as a table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Rename Table Columns",
            "args": [
                "table",
                "columns",
                "strict=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Renames columns in the Table with given values. Columns with\nname as <cite>None</cite> will be use previous value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">list of new column names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">if True, raises ValueError if column lengths\ndo not match</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Renames columns in the Table with given values. Columns with name as <cite>None</cite> will be use previous value.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Column As Index",
            "args": [
                "table",
                "column=None"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set existing column as index for rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to convert to index</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Set existing column as index for rows.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Row As Column Names",
            "args": [
                "table",
                "index"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set existing row as names for columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">row to use as column names</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Set existing row as names for columns.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Table Cell",
            "args": [
                "table",
                "row",
                "column",
                "value"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set a cell value in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Set a cell value in the table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Table Column",
            "args": [
                "table",
                "column",
                "values"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Assign values to entire column in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">value(s) to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Assign values to entire column in the table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Set Table Row",
            "args": [
                "table",
                "row",
                "values"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Assign values to a row in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">value(s) to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Assign values to a row in the table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Sort Table By Column",
            "args": [
                "table",
                "column",
                "ascending=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Sort table in-place according to <cite>column</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to sort</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to sort with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ascending:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">table sort order</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Sort table in-place according to <cite>column</cite>.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Table Head",
            "args": [
                "table",
                "count=5",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return first <cite>count</cite> rows from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Return first <cite>count</cite> rows from table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Table Tail",
            "args": [
                "table",
                "count=5",
                "as_list=False"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return last <cite>count</cite> rows from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Return last <cite>count</cite> rows from table.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Trim Column Names",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all extraneous whitespace from column names.</p>\n</div>\n</div>",
            "shortdoc": "Remove all extraneous whitespace from column names.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Trim Empty Rows",
            "args": [
                "table"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all rows from the end of the table\nwhich have only None values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
            "shortdoc": "Remove all rows from the end of the table which have only None values.",
            "tags": [],
            "matched": true
        },
        {
            "name": "Write Table To Csv",
            "args": [
                "table",
                "path",
                "header=True",
                "dialect=excel"
            ],
            "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Write a table as a CSV file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to write to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">write columns as header to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">the format of output CSV</td>\n</tr>\n</tbody>\n</table>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>.</p>\n</div>\n</div>",
            "shortdoc": "Write a table as a CSV file.",
            "tags": [],
            "matched": true
        }
    ],
    "all_tags": [],
    "contains_tags": false
}