{
    "RPA.Archive": {
        "name": "RPA.Archive",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Archive</cite> is a library for operating with ZIP and TAR packages.</p>\n<p><strong>Examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Archive</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating a ZIP archive</span><span class=\"p\">\n   </span><span class=\"nf\">Archive Folder With ZIP</span><span class=\"p\">   ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">tasks</span><span class=\"p\">  </span><span class=\"s\">tasks.zip</span><span class=\"p\">   </span><span class=\"s\">recursive=True</span><span class=\"p\">  </span><span class=\"s\">include=*.robot</span><span class=\"p\">  </span><span class=\"s\">exclude=/.*</span><span class=\"p\">\n   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}                  </span><span class=\"nf\">List Archive</span><span class=\"p\">             </span><span class=\"s\">tasks.zip</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  ${</span><span class=\"nv\">files</span><span class=\"p\">}\n      </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n   </span><span class=\"nf\">END</span><span class=\"p\">\n   </span><span class=\"nf\">Add To Archive</span><span class=\"p\">            </span><span class=\"s\">.</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">..</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">missing.robot</span><span class=\"p\">  </span><span class=\"s\">tasks.zip</span><span class=\"p\">\n   &amp;{</span><span class=\"nv\">info</span><span class=\"p\">}                   </span><span class=\"nf\">Get Archive Info</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Archive</span> <span class=\"kn\">import</span> <span class=\"n\">Archive</span>\n\n<span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Archive</span><span class=\"p\">()</span>\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">archive_folder_with_tar</span><span class=\"p\">(</span><span class=\"s1\">'./tasks'</span><span class=\"p\">,</span> <span class=\"s1\">'tasks.tar'</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">list_archive</span><span class=\"p\">(</span><span class=\"s1\">'tasks.tar'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [],
        "keywords": [
            {
                "name": "Add To Archive",
                "args": [
                    "files: typing.Any",
                    "archive_name: str",
                    "folder: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add file(s) to the archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">name of the file, or list of files, to add</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder for added file,\nrelative path in the archive</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword adds file or list of files into existing archive. Files\ncan be added to archive structure with relative path using argument <cite>folder</cite>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">extrafile.txt</span><span class=\"p\">  </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">stat.png</span><span class=\"p\">       </span><span class=\"c\">archive.tar.gz</span><span class=\"p\">  </span><span class=\"c\">images</span><span class=\"p\">\n</span><span class=\"c\">&#64;{files}</span><span class=\"p\">        </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">filename1.txt</span><span class=\"p\">   </span><span class=\"c\">filename2.txt</span><span class=\"p\">\n</span><span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">${files}</span><span class=\"p\">       </span><span class=\"c\">files.tar</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add file(s) to the archive",
                "tags": [],
                "matched": true
            },
            {
                "name": "Archive Folder With Tar",
                "args": [
                    "folder: str",
                    "archive_name: str",
                    "recursive: bool = False",
                    "include: str = None",
                    "exclude: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a tar/tar.gz archive of a folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder to archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">should sub directories be included, defaults is False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\">define file pattern to include in the package,\nby default all files are included</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exclude:</th><td class=\"field-body\">define file pattern to exclude from the package</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword creates an TAR or TAR.GZ archive of a local folder. Type of archive\nis determined by the file extension. By default subdirectories are not\nincluded, but they can included using <cite>recursive</cite> argument.</p>\n<p>To include only certain files, like TXT files, the argument <cite>include</cite> can be used.\nSimilarly to exclude certain file, like dotfiles, the argument <cite>exclude</cite> can be used.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.tar</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">tasks.tar.gz</span><span class=\"p\">   </span><span class=\"c\">include=*.robot</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">tasks.tar</span><span class=\"p\">      </span><span class=\"c\">exclude=/.*</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.tar</span><span class=\"p\">  </span><span class=\"c\">recursive=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Create a tar/tar.gz archive of a folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Archive Folder With Zip",
                "args": [
                    "folder: str",
                    "archive_name: str",
                    "recursive: bool = False",
                    "include: str = None",
                    "exclude: str = None",
                    "compression: str = stored"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a zip archive of a folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder to archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">should sub directories be included, defaults is False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\">define file pattern to include in the package, defaults to None (means all files)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exclude:</th><td class=\"field-body\">define file pattern to exclude from the package, defaults is None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param compression:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of package compression method, defaults to &quot;stored&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword creates an ZIP archive of a local folder. By default subdirectories are not\nincluded, but they can included using <cite>recursive</cite> argument.</p>\n<p>To include only certain files, like TXT files, the argument <cite>include</cite> can be used.\nSimilarly to exclude certain file, like dotfiles, the argument <cite>exclude</cite> can be used.</p>\n<p>Compression methods:</p>\n<ul class=\"simple\">\n<li>stored, default</li>\n<li>deflated</li>\n<li>bzip2</li>\n<li>lzma</li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">mydocs.zip</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">robottasks.zip</span><span class=\"p\">   </span><span class=\"c\">include=*.robot</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">no_dotfiles.zip</span><span class=\"p\">  </span><span class=\"c\">exclude=/.*</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.zip</span><span class=\"p\">    </span><span class=\"c\">recursive=True</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}</span><span class=\"p\">               </span><span class=\"c\">packagelzma.zip</span><span class=\"p\">  </span><span class=\"c\">compression=lzma</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}</span><span class=\"p\">               </span><span class=\"c\">bzipped.zip</span><span class=\"p\">      </span><span class=\"c\">compression=bzip2</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Create a zip archive of a folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Extract Archive",
                "args": [
                    "archive_name: str",
                    "path: str = None",
                    "members: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Extract files from archive into local directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">filepath to extract file into, default is current working directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param members:</th><td class=\"field-body\">list of files to extract from, by default\nall files in archive are extracted</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword supports extracting files from zip, tar and tar.gz archives.</p>\n<p>By default file is extracted into current working directory, but <cite>path</cite> argument\ncan be set to define extraction path.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Extract Archive</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}extracted</span><span class=\"p\">\n</span><span class=\"c\">&#64;{files}</span><span class=\"p\">           </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">filename1.txt</span><span class=\"p\">    </span><span class=\"c\">filename2.txt</span><span class=\"p\">\n</span><span class=\"c\">Extract Archive</span><span class=\"p\">    </span><span class=\"c\">archive.tar</span><span class=\"p\">   </span><span class=\"c\">C:${/}myfiles${/}</span><span class=\"p\">  </span><span class=\"c\">${files}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Extract files from archive into local directory",
                "tags": [],
                "matched": true
            },
            {
                "name": "Extract File From Archive",
                "args": [
                    "filename: str",
                    "archive_name: str",
                    "path: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Extract a file from archive into local directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file to extract</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">filepath to extract file into,\ndefault is current working directory</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword supports extracting a file from zip, tar and tar.gz archives.</p>\n<p>By default file is extracted into current working directory,\nbut <cite>path</cite> argument can be set to define extraction path.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Extract File From Archive</span><span class=\"p\">    </span><span class=\"c\">extrafile.txt</span><span class=\"p\">   </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">Extract File From Archive</span><span class=\"p\">    </span><span class=\"c\">background.png</span><span class=\"p\">  </span><span class=\"c\">images.tar.gz</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}extracted</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Extract a file from archive into local directory",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Archive Info",
                "args": [
                    "archive_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get information about the archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n</tbody>\n</table>\n<p>Returns following file attributes in a dictionary:</p>\n<ul class=\"simple\">\n<li>filename</li>\n<li>filemode</li>\n<li>size</li>\n<li>mtime</li>\n<li>last modification time in format <cite>%d.%m.%Y %H:%M:%S</cite></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{archiveinfo}</span><span class=\"p\">   </span><span class=\"c\">Get Archive Info</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get information about the archive",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Archive",
                "args": [
                    "archive_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List files in an archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n</tbody>\n</table>\n<p>Returns list of file, where each file in a list is a dictionary\nwith following attributes:</p>\n<ul class=\"simple\">\n<li>name</li>\n<li>size</li>\n<li>mtime</li>\n<li>last modification time in format <cite>%d.%m.%Y %H:%M:%S</cite></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{files}</span><span class=\"p\">   </span><span class=\"c\">List Archive</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${file}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">   </span><span class=\"c\">${files}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[filename]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[size]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[mtime]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "List files in an archive",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Browser": {
        "name": "RPA.Browser",
        "doc": "<p>Browser is a web testing library for Robot Framework, based on the popular SeleniumLibrary.</p>\n<p>It uses the Selenium WebDriver modules internally to control a web browser. See <a href=\"http://seleniumhq.org\">http://seleniumhq.org</a> for more information about Selenium in general.</p>\n<h2 id=\"Locating elements\">Locating elements</h2>\n<p>All keywords in the browser library that need to interact with an element on a web page take an argument typically named <code>locator</code> that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but <a href=\"#Using%20WebElements\" class=\"name\">using WebElements</a> is possible too.</p>\n<h3 id=\"Locator syntax\">Locator syntax</h3>\n<p>Finding elements can be done using different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.</p>\n<h4 id=\"Default locator strategy\">Default locator strategy</h4>\n<p>By default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on <code>id</code> and <code>name</code> attributes, but some keywords support additional attributes or other values that make sense in their context. For example, <a href=\"#Click%20Link\" class=\"name\">Click Link</a> supports the <code>href</code> attribute and the link text and addition to the normal <code>id</code> and <code>name</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>example</td>\n<td># Match based on <code>id</code> or <code>name</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Match also based on link text and <code>href</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>example</td>\n<td># Match based on <code>id</code>, <code>name</code> or <code>value</code>.</td>\n</tr>\n</table>\n<p>If a locator accidentally starts with a prefix recognized as <a href=\"#Explicit%20locator%20strategy\" class=\"name\">explicit locator strategy</a> or <a href=\"#Implicit%20XPath%20strategy\" class=\"name\">implicit XPath strategy</a>, it is possible to use the explicit <code>default</code> prefix to enable the default strategy.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>name:foo</td>\n<td># Find element with name <code>foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default:name:foo</td>\n<td># Use default strategy with value <code>name:foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//foo</td>\n<td># Find element using XPath <code>//foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default: //foo</td>\n<td># Use default strategy with value <code>//foo</code>.</td>\n</tr>\n</table>\n<h4 id=\"Explicit locator strategy\">Explicit locator strategy</h4>\n<p>The explicit locator strategy is specified with a prefix using either syntax <code>strategy:value</code> or <code>strategy=value</code>. The former syntax is preferred because the latter is identical to Robot Framework's <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax\">named argument syntax</a> and that can cause problems. Spaces around the separator are ignored, so <code>id:foo</code>, <code>id: foo</code> and <code>id : foo</code> are all equivalent.</p>\n<p>Locator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register <a href=\"#Custom%20locators\" class=\"name\">custom locators</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Strategy</th>\n<th>Match based on</th>\n<th>Example</th>\n</tr>\n<tr>\n<td>id</td>\n<td>Element <code>id</code>.</td>\n<td><code>id:example</code></td>\n</tr>\n<tr>\n<td>name</td>\n<td><code>name</code> attribute.</td>\n<td><code>name:example</code></td>\n</tr>\n<tr>\n<td>identifier</td>\n<td>Either <code>id</code> or <code>name</code>.</td>\n<td><code>identifier:example</code></td>\n</tr>\n<tr>\n<td>class</td>\n<td>Element <code>class</code>.</td>\n<td><code>class:example</code></td>\n</tr>\n<tr>\n<td>tag</td>\n<td>Tag name.</td>\n<td><code>tag:div</code></td>\n</tr>\n<tr>\n<td>xpath</td>\n<td>XPath expression.</td>\n<td><code>xpath://div[@id=\"example\"]</code></td>\n</tr>\n<tr>\n<td>css</td>\n<td>CSS selector.</td>\n<td><code>css:div#example</code></td>\n</tr>\n<tr>\n<td>dom</td>\n<td>DOM expression.</td>\n<td><code>dom:document.images[5]</code></td>\n</tr>\n<tr>\n<td>link</td>\n<td>Exact text a link has.</td>\n<td><code>link:The example</code></td>\n</tr>\n<tr>\n<td>partial link</td>\n<td>Partial link text.</td>\n<td><code>partial link:he ex</code></td>\n</tr>\n<tr>\n<td>sizzle</td>\n<td>Sizzle selector deprecated.</td>\n<td><code>sizzle:div.example</code></td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>jQuery expression.</td>\n<td><code>jquery:div.example</code></td>\n</tr>\n<tr>\n<td>default</td>\n<td>Keyword specific default behavior.</td>\n<td><code>default:example</code></td>\n</tr>\n</table>\n<p>See the <a href=\"#Default%20locator%20strategy\" class=\"name\">Default locator strategy</a> section below for more information about how the default strategy works. Using the explicit <code>default</code> prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.</p>\n<p>Different locator strategies have different pros and cons. Using ids, either explicitly like <code>id:foo</code> or by using the <a href=\"#Default%20locator%20strategy\" class=\"name\">default locator strategy</a> simply like <code>foo</code>, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using <code>tag</code>, <code>class</code> or <code>css</code> strategy like <code>tag:h1</code>, <code>class:example</code> or <code>css:h1.example</code> is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>id:foo</td>\n<td># Element with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>css:div#foo h1</td>\n<td># h1 element under div with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //div[@id=\"foo\"]//h1</td>\n<td># Same as the above using XPath, not CSS.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //*[contains(text(), \"example\")]</td>\n<td># Element containing text 'example'.</td>\n</tr>\n</table>\n<p><b>NOTE:</b></p>\n<ul>\n<li>Using the <code>sizzle</code> strategy or its alias <code>jquery</code> requires that the system under test contains the jQuery library.</li>\n</ul>\n<h4 id=\"Implicit XPath strategy\">Implicit XPath strategy</h4>\n<p>If the locator starts with <code>//</code> or <code>(//</code>, the locator is considered to be an XPath expression. In other words, using <code>//div</code> is equivalent to using explicit <code>xpath://div</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//div[@id=\"foo\"]//h1</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>(//div)[2]</td>\n</tr>\n</table>\n<h3 id=\"Using WebElements\">Using WebElements</h3>\n<p>In addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the <a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a> keyword.</p>\n<table border=\"1\">\n<tr>\n<td>${elem} =</td>\n<td><a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a></td>\n<td>id:example</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>${elem}</td>\n<td></td>\n</tr>\n</table>\n<h3 id=\"Custom locators\">Custom locators</h3>\n<p>If more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:</p>\n<table border=\"1\">\n<tr>\n<td>Custom Locator Strategy</td>\n<td>[Arguments]</td>\n<td>${browser}</td>\n<td>${locator}</td>\n<td>${tag}</td>\n<td>${constraints}</td>\n</tr>\n<tr>\n<td></td>\n<td>${element}=</td>\n<td>Execute Javascript</td>\n<td>return window.document.getElementById('${locator}');</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[Return]</td>\n<td>${element}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>This keyword is a reimplementation of the basic functionality of the <code>id</code> locator where <code>${browser}</code> is a reference to a WebDriver instance and <code>${locator}</code> is the name of the locator strategy. To use this locator, it must first be registered by using the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a></td>\n<td>custom</td>\n<td>Custom Locator Strategy</td>\n</tr>\n</table>\n<p>The first argument of <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>custom:example</td>\n</tr>\n</table>\n<p>See the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword for more details.</p>\n<h2 id=\"Browser and Window\">Browser and Window</h2>\n<p>There is different conceptual meaning when this library talks about windows or browsers. This chapter explains those differences.</p>\n<h3 id=\"Browser\">Browser</h3>\n<p>When <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> keyword is called, it will create a new Selenium WebDriver instance by using the <a href=\"https://www.seleniumhq.org/docs/03_webdriver.jsp\">Selenium WebDriver</a> API. In this library's terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.</p>\n<h3 id=\"Window\">Window</h3>\n<p>Windows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In this context a browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> keyword:</p>\n<pre>\n<a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a>    window.open()    # Opens a new window with location about:blank\n</pre>\n<p>The example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.</p>\n<p>Structure:</p>\n<pre>\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n</pre>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://robotframework.org\">https://robotframework.org</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserA</td>\n<td># BrowserA with first window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA second window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td></td>\n<td># Switched to second window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://robocon.io\">https://robocon.io</a></td>\n<td></td>\n<td></td>\n<td># Second window navigates to robocon site.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA third window is opened.</td>\n</tr>\n<tr>\n<td>${handle}</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td># Switched to third window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a></td>\n<td></td>\n<td></td>\n<td># Third windows goes to robot framework github site.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://github.com\">https://github.com</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserB</td>\n<td># BrowserB with first windows is opened.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} is: <a href=\"https://www.github.com\">https://www.github.com</a></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td>browser=BrowserA</td>\n<td></td>\n<td># BrowserA second windows is selected.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} = <a href=\"https://robocon.io/\">https://robocon.io/</a></td>\n</tr>\n<tr>\n<td>@{locations 1}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td></td>\n<td></td>\n<td># By default, lists locations under the currectly active browser (BrowserA).</td>\n</tr>\n<tr>\n<td>@{locations 2}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td>browser=ALL</td>\n<td></td>\n<td># By using browser=ALL argument keyword list all locations from all browsers.</td>\n</tr>\n</table>\n<p>The above example, @{locations 1} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a> and <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>'. The @{locations 2} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a>, <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>' and '<a href=\"https://github.com/\">https://github.com/</a>.</p>\n<h2 id=\"Timeouts, waits, and delays\">Timeouts, waits, and delays</h2>\n<p>This section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the <a href=\"#Time%20format\" class=\"name\">time format</a> that can be used when setting various timeouts, waits, and delays.</p>\n<h3 id=\"Timeout\">Timeout</h3>\n<p>This library contains various keywords that have an optional <code>timeout</code> argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, <code>Wait ...</code> keywords and keywords related to alerts. Additionally <a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async Javascript</a>. Although it does not have <code>timeout</code>, argument, uses a timeout to define how long asynchronous JavaScript can run.</p>\n<p>The default timeout these keywords use can be set globally either by using the <a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a> keyword or with the <code>timeout</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported timeout syntax.</p>\n<h3 id=\"Implicit wait\">Implicit wait</h3>\n<p>Implicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> keyword or with the <code>implicit_wait</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp\">Selenium documentation</a> for more information about this functionality.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Selenium speed\">Selenium speed</h3>\n<p>Selenium execution speed can be slowed down globally by using <a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium speed</a> keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Time format\">Time format</h3>\n<p>All timeouts and waits can be given as numbers considered seconds (e.g. <code>0.5</code> or <code>42</code>) or in Robot Framework's time syntax (e.g. <code>1.5 seconds</code> or <code>1 min 30 s</code>). For more information about the time syntax see the <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">Robot Framework User Guide</a>.</p>\n<h2 id=\"Run-on-failure functionality\">Run-on-failure functionality</h2>\n<p>This library has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> keyword, but this can be changed either by using the <a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a> keyword or with the <code>run_on_failure</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. It is possible to use any keyword from any imported library or resource file.</p>\n<p>The run-on-failure functionality can be disabled by using a special value <code>NOTHING</code> or anything considered false (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) such as <code>NONE</code>.</p>\n<h2 id=\"Boolean arguments\">Boolean arguments</h2>\n<p>Some keywords accept arguments that are handled as Boolean values true or false. If such an argument is given as a string, it is considered false if it is either empty or case-insensitively equal to <code>false</code>, <code>no</code>, <code>off</code>, <code>0</code> or <code>none</code>. Other strings are considered true regardless of their value and other argument types are tested using the same <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">rules as in Python</a>.</p>\n<p>True examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=True</td>\n<td># Strings are generally true.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=yes</td>\n<td># Same as the above.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=${TRUE}</td>\n<td># Python True is true.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=${42}</td>\n<td># Numbers other than 0 are true.</td>\n</tr>\n</table>\n<p>False examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=False</td>\n<td># String false is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=no</td>\n<td># Also string no is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=NONE</td>\n<td># String NONE is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=${EMPTY}</td>\n<td># Empty string is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=${FALSE}</td>\n<td># Python False is false.</td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a></td>\n<td>${RESULTS}</td>\n<td>persist=${NONE}</td>\n<td># Python None is false.</td>\n</tr>\n</table>",
        "version": "4.5.0",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "*args",
                    "**kwargs"
                ],
                "doc": "<p>SeleniumLibrary can be imported with several optional arguments.</p>\n<ul>\n<li><code>timeout</code>: Default value for <span class=\"name\">timeouts</span> used with <code>Wait ...</code> keywords.</li>\n<li><code>implicit_wait</code>: Default value for <a href=\"#Implicit%20wait\" class=\"name\">implicit wait</a> used when locating elements.</li>\n<li><code>run_on_failure</code>: Default action for the <a href=\"#Run-on-failure%20functionality\" class=\"name\">run-on-failure functionality</a>.</li>\n<li><code>screenshot_root_directory</code>: Path to folder where possible screenshots are created or EMBED. See <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword for further details about EMBED. If not given, the directory where the log file is written is used.</li>\n<li><code>plugins</code>: Allows extending the SeleniumLibrary with external Python classes.</li>\n<li><code>event_firing_webdriver</code>: Class for wrapping Selenium with <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver\">EventFiringWebDriver</a></li>\n</ul>",
                "shortdoc": "SeleniumLibrary can be imported with several optional arguments.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Add Cookie",
                "args": [
                    "name",
                    "value",
                    "path=None",
                    "domain=None",
                    "secure=None",
                    "expiry=None"
                ],
                "doc": "<p>Adds a cookie to your current session.</p>\n<p><code>name</code> and <code>value</code> are required, <code>path</code>, <code>domain</code>, <code>secure</code> and <code>expiry</code> are optional.  Expiry supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>domain=example.com</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=2027-09-28 16:21:35</td>\n<td># Expiry as timestamp.</td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=1822137695</td>\n<td># Expiry as epoch seconds.</td>\n</tr>\n</table>\n<p>Prior to SeleniumLibrary 3.0 setting expiry did not work.</p>",
                "shortdoc": "Adds a cookie to your current session.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Location Strategy",
                "args": [
                    "strategy_name",
                    "strategy_keyword",
                    "persist=False"
                ],
                "doc": "<p>Adds a custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies. <a href=\"#Remove%20Location%20Strategy\" class=\"name\">Remove Location Strategy</a> can be used to remove a registered strategy.</p>\n<p>Location strategies are automatically removed after leaving the current scope by default. Setting <code>persist</code> to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) will cause the location strategy to stay registered throughout the life of the test.</p>",
                "shortdoc": "Adds a custom location strategy.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Alert Should Be Present",
                "args": [
                    "text=",
                    "action=ACCEPT",
                    "timeout=None"
                ],
                "doc": "<p>Verifies that an alert is present and by default, accepts it.</p>\n<p>Fails if no alert is present. If <code>text</code> is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p><code>action</code> and <code>timeout</code> arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.</p>",
                "shortdoc": "Verifies that an alert is present and by default, accepts it.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Alert Should Not Be Present",
                "args": [
                    "action=ACCEPT",
                    "timeout=0"
                ],
                "doc": "<p>Verifies that no alert is present.</p>\n<p>If the alert actually exists, the <code>action</code> argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> keyword.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the <a href=\"#Time%20format\" class=\"name\">time format</a> section for information about the syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that no alert is present.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Assign Id To Element",
                "args": [
                    "locator",
                    "id"
                ],
                "doc": "<p>Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.</p>\n<p>This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Assign%20Id%20To%20Element\" class=\"name\">Assign ID to Element</a></td>\n<td>//ul[@class='example' and ./li[contains(., 'Stuff')]]</td>\n<td>my id</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>my id</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Attach Chrome Browser",
                "args": [
                    "port: int",
                    "alias: str = None"
                ],
                "doc": "<p>Attach to an existing instance of Chrome or Chromium.</p>\n<p>Requires that the browser was started with the command line option <code>--remote-debugging-port=&lt;port&gt;</code>, where port is any 4-digit number not being used by other applications.</p>\n<p>That port can then be used to connect using this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Attach Chrome Browser</td>\n<td>port=9222</td>\n</tr>\n</table>",
                "shortdoc": "Attach to an existing instance of Chrome or Chromium.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Capture Element Screenshot",
                "args": [
                    "locator",
                    "filename=selenium-element-screenshot-{index}.png"
                ],
                "doc": "<p>Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.</p>\n<p>See <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> for details about <code>filename</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>An absolute path to the created element screenshot is returned.</p>\n<p>Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.</p>\n<p>New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>${OUTPUTDIR}/id_image_id-1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Capture Page Screenshot",
                "args": [
                    "filename=selenium-screenshot-{index}.png"
                ],
                "doc": "<p>Takes a screenshot of the current page and embeds it into a log file.</p>\n<p><code>filename</code> argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when <a href=\"#Importing\" class=\"name\">importing</a> the library or by using the <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>filename</code> equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.</p>\n<p>Starting from SeleniumLibrary 1.8, if <code>filename</code> contains marker <code>{index}</code>, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>An absolute path to the created screenshot file is returned or if <code>filename</code>  equals to EMBED, word <span class=\"name\">EMBED</span> is returned.</p>\n<p>Support for EMBED is new in SeleniumLibrary 4.2</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-1.png</td>\n</tr>\n<tr>\n<td>${path} =</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-2.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${path}</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_name.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_name.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_with_index_{index}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_with_index_1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>formatted_index_{index:03}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/formatted_index_001.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>EMBED</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Not Exist</span></td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Checkbox Should Be Selected",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox <code>locator</code> is selected/checked.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Checkbox Should Not Be Selected",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox <code>locator</code> is not selected/checked.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Choose File",
                "args": [
                    "locator",
                    "file_path"
                ],
                "doc": "<p>Inputs the <code>file_path</code> into the file input field <code>locator</code>.</p>\n<p>This keyword is most often used to input files into upload forms. The keyword does not check <code>file_path</code> is the file or folder available on the machine where tests are executed. If the <code>file_path</code> points at a file and when using Selenium Grid, Selenium will <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE\">magically</a>, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.</p>\n<p>That <code>file_path</code> is not checked, is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Choose%20File\" class=\"name\">Choose File</a></td>\n<td>my_upload_field</td>\n<td>${CURDIR}/trades.csv</td>\n</tr>\n</table>",
                "shortdoc": "Inputs the <code>file_path</code> into the file input field <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Clear All Highlights",
                "args": [],
                "doc": "<p>Remove all highlighting made by <code>Highlight Elements</code>.</p>",
                "shortdoc": "Remove all highlighting made by <code>Highlight Elements</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Clear Element Text",
                "args": [
                    "locator"
                ],
                "doc": "<p>Clears the value of the text-input-element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Clears the value of the text-input-element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Button",
                "args": [
                    "locator",
                    "modifier=False"
                ],
                "doc": "<p>Clicks the button identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks the button identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Button When Visible",
                "args": [
                    "locator: str",
                    "modifier: str = None"
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by <code>locator</code>, once it becomes visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Element",
                "args": [
                    "locator",
                    "modifier=False",
                    "action_chain=False"
                ],
                "doc": "<p>Click the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>modifier</code> argument can be used to pass <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys\">Selenium Keys</a> when clicking the element. The <span class=\"name\">+</span> can be used as a separator for different Selenium Keys. The <span class=\"name\">CTRL</span> is internally translated to the <span class=\"name\">CONTROL</span> key. The <code>modifier</code> is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT\">ALT key</a> . If <code>modifier</code> does not match to Selenium Keys, keyword fails.</p>\n<p>If <code>action_chain</code> argument is true, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &lt;web_element&gt;.click() function. If both <code>action_chain</code> and <code>modifier</code> are defined, the click will be performed using <code>modifier</code> and <code>action_chain</code> will be ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td></td>\n<td># Would click element without any modifiers.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL</td>\n<td># Would click element with CTLR key pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n<td># Would click element with CTLR and ALT keys pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>action_chain=True</td>\n<td># Clicks the button using an Selenium  ActionChains</td>\n</tr>\n</table>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.2 The <code>action_chain</code> argument is new in SeleniumLibrary 4.1</p>",
                "shortdoc": "Click the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Element At Coordinates",
                "args": [
                    "locator",
                    "xoffset",
                    "yoffset"
                ],
                "doc": "<p>Click the element <code>locator</code> at <code>xoffset/yoffset</code>.</p>\n<p>The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Click the element <code>locator</code> at <code>xoffset/yoffset</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Element If Visible",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Click element if it is visible</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element If Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click element if it is visible",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Element When Visible",
                "args": [
                    "locator: str",
                    "modifier: str = None",
                    "action_chain: bool = False"
                ],
                "doc": "<p>Click element identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p><code>action_chain</code> store action in Selenium ActionChain queue</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element When Visible</td>\n<td>q</td>\n<td></td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>action_chain=True</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Click element identified by <code>locator</code>, once it becomes visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Image",
                "args": [
                    "locator",
                    "modifier=False"
                ],
                "doc": "<p>Clicks an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks an image identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Link",
                "args": [
                    "locator",
                    "modifier=False"
                ],
                "doc": "<p>Clicks a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks a link identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close All Browsers",
                "args": [],
                "doc": "<p>Closes all open browsers and resets the browser cache.</p>\n<p>After this keyword, new indexes returned from <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword are reset to 1.</p>\n<p>This keyword should be used in test or suite teardown to make sure all browsers are closed.</p>",
                "shortdoc": "Closes all open browsers and resets the browser cache.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Browser",
                "args": [],
                "doc": "<p>Closes the current browser.</p>",
                "shortdoc": "Closes the current browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Window",
                "args": [],
                "doc": "<p>Closes currently opened and selected browser window/tab.</p>",
                "shortdoc": "Closes currently opened and selected browser window/tab.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Cover Element",
                "args": [
                    "locator"
                ],
                "doc": "<p>Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.3.0</p>\n<p>Example: |<a href=\"#Cover%20Element\" class=\"name\">Cover Element</a> | css:div#container |</p>",
                "shortdoc": "Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Webdriver",
                "args": [
                    "driver_name",
                    "alias=None",
                    "kwargs={}",
                    "**init_kwargs"
                ],
                "doc": "<p>Creates an instance of Selenium WebDriver.</p>\n<p>Like <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a>, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> is not adequate.</p>\n<p><code>driver_name</code> must be a WebDriver implementation name like Firefox, Chrome, Ie, Opera, Safari, PhantomJS, or Remote.</p>\n<p>The initialized WebDriver can be configured either with a Python dictionary <code>kwargs</code> or by using keyword arguments <code>**init_kwargs</code>. These arguments are passed directly to WebDriver without any processing. See <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/api.html\">Selenium API documentation</a> for details about the supported arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Use proxy with Firefox</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${proxy}=</td>\n<td><span class=\"name\">Evaluate</span></td>\n<td>selenium.webdriver.Proxy()</td>\n<td>modules=selenium, selenium.webdriver</td>\n</tr>\n<tr>\n<td>${proxy.http_proxy}=</td>\n<td><span class=\"name\">Set Variable</span></td>\n<td>localhost:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>Firefox</td>\n<td>proxy=${proxy}</td>\n<td></td>\n</tr>\n<tr>\n<td># Use proxy with PhantomJS</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${service args}=</td>\n<td><span class=\"name\">Create List</span></td>\n<td>--proxy=192.168.132.104:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>PhantomJS</td>\n<td>service_args=${service args}</td>\n<td></td>\n</tr>\n</table>\n<p>Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> keyword is used. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for an example.</p>",
                "shortdoc": "Creates an instance of Selenium WebDriver.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Current Frame Should Contain",
                "args": [
                    "text",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that the current frame contains <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Current Frame Contains</span>.</p>",
                "shortdoc": "Verifies that the current frame contains <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Current Frame Should Not Contain",
                "args": [
                    "text",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that the current frame does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that the current frame does not contain <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete All Cookies",
                "args": [],
                "doc": "<p>Deletes all cookies.</p>",
                "shortdoc": "Deletes all cookies.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Cookie",
                "args": [
                    "name"
                ],
                "doc": "<p>Deletes the cookie matching <code>name</code>.</p>\n<p>If the cookie is not found, nothing happens.</p>",
                "shortdoc": "Deletes the cookie matching <code>name</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Alert Contain",
                "args": [
                    "text: str = None",
                    "timeout: float = None"
                ],
                "doc": "<p>Does alert contain text.</p>\n<p><code>text</code> check if alert includes text, will raise ValueError is text does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Contain</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert contain text.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Alert Not Contain",
                "args": [
                    "text: str = None",
                    "timeout: float = None"
                ],
                "doc": "<p>Does alert not contain text.</p>\n<p><code>text</code> check that alert does not include text, will raise ValueError if text does exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Not Contain</td>\n<td>unexpected message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert not contain text.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Element Contain",
                "args": [
                    "locator: str",
                    "expected: str",
                    "ignore_case: bool = False"
                ],
                "doc": "<p>Does element contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Element Contain</td>\n<td>id:spec</td>\n<td>specification complete</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Does element contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Frame Contain",
                "args": [
                    "locator: str",
                    "text: str"
                ],
                "doc": "<p>Does frame contain expected text</p>\n<p><code>locator</code> locator of the frame to check</p>\n<p><code>text</code> does frame contain this text</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Frame Contain</td>\n<td>id:myframe</td>\n<td>secret</td>\n</tr>\n</table>",
                "shortdoc": "Does frame contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Location Contain",
                "args": [
                    "expected: str"
                ],
                "doc": "<p>Does current URL contain expected</p>\n<p><code>expected</code> URL should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://robocorp.com\">https://robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Location Contain</td>\n<td>robocorp</td>\n</tr>\n</table>",
                "shortdoc": "Does current URL contain expected",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain",
                "args": [
                    "text: str"
                ],
                "doc": "<p>Does page contain expected text</p>\n<p><code>text</code> page should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain</td>\n<td>Gmail</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Button",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Button</td>\n<td>search-button</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected button",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Checkbox",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected checkbox</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Checkbox</td>\n<td>random-selection</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected checkbox",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Element",
                "args": [
                    "locator: str",
                    "count: int = None"
                ],
                "doc": "<p>Does page contain expected element</p>\n<p><code>locator</code> element locator</p>\n<p><code>count</code> how many times element is expected to appear on page by default one or more</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>textarea</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>button</td>\n<td>count=4</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Image",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected image</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Image</td>\n<td>Google</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Link",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected link</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Link</td>\n<td>id:submit</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected link",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain List",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected list</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain List</td>\n<td>class:selections</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected list",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Radio Button",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected radio button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Radio Button</td>\n<td>male</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected radio button",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Page Contain Textfield",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Does page contain expected textfield</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Textfield</td>\n<td>id:address</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected textfield",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Cell Contain",
                "args": [
                    "locator: str",
                    "row: int",
                    "column: int",
                    "expected: str"
                ],
                "doc": "<p>Does table cell contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Cell Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table cell contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Column Contain",
                "args": [
                    "locator: str",
                    "column: int",
                    "expected: str"
                ],
                "doc": "<p>Does table column contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table column</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Column Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Nokia</td>\n</tr>\n</table>",
                "shortdoc": "Does table column contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Contain",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Does table contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in table</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Contain</td>\n<td>//table</td>\n<td>February</td>\n</tr>\n</table>",
                "shortdoc": "Does table contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Footer Contain",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Does table footer contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table footer</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Footer Contain</td>\n<td>//table</td>\n<td>Sum</td>\n</tr>\n</table>",
                "shortdoc": "Does table footer contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Header Contain",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Does table header contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table header</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Header Contain</td>\n<td>//table</td>\n<td>Month</td>\n</tr>\n</table>",
                "shortdoc": "Does table header contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Table Row Contain",
                "args": [
                    "locator: str",
                    "row: int",
                    "expected: str"
                ],
                "doc": "<p>Does table row contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Row Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table row contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Textarea Contain",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Does textarea contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textarea</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textarea Contain</td>\n<td>//textarea</td>\n<td>sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Does textarea contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Textfield Contain",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Does textfield contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textfield</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textfield Contain</td>\n<td>id:lname</td>\n<td>Last</td>\n</tr>\n</table>",
                "shortdoc": "Does textfield contain expected text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Double Click Element",
                "args": [
                    "locator"
                ],
                "doc": "<p>Double clicks the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Double clicks the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Drag And Drop",
                "args": [
                    "locator",
                    "target"
                ],
                "doc": "<p>Drags the element identified by <code>locator</code> into the <code>target</code> element.</p>\n<p>The <code>locator</code> argument is the locator of the dragged element and the <code>target</code> is the locator of the target. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a></td>\n<td>css:div#element</td>\n<td>css:div.target</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified by <code>locator</code> into the <code>target</code> element.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Drag And Drop By Offset",
                "args": [
                    "locator",
                    "xoffset",
                    "yoffset"
                ],
                "doc": "<p>Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element will be moved by <code>xoffset</code> and <code>yoffset</code>, each of which is a negative or positive number specifying the offset.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop%20By%20Offset\" class=\"name\">Drag And Drop By Offset</a></td>\n<td>myElem</td>\n<td>50</td>\n<td>-35</td>\n<td># Move myElem 50px right and 35px down</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Attribute Value Should Be",
                "args": [
                    "locator",
                    "attribute",
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies element identified by <code>locator</code> contains expected attribute value.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example: <a href=\"#Element%20Attribute%20Value%20Should%20Be\" class=\"name\">Element Attribute Value Should Be</a> | css:img | href | value</p>\n<p>New in SeleniumLibrary 3.2.</p>",
                "shortdoc": "Verifies element identified by <code>locator</code> contains expected attribute value.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Be Disabled",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is disabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by <code>locator</code> is disabled.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Be Enabled",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is enabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by <code>locator</code> is enabled.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Be Focused",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is focused.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element identified by <code>locator</code> is focused.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Be Visible",
                "args": [
                    "locator",
                    "message=None"
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is visible.</p>\n<p>Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries <code>display:none</code> is not logically visible, so using this keyword on that element would fail.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>",
                "shortdoc": "Verifies that the element identified by <code>locator</code> is visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "message=None",
                    "ignore_case=False"
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> if you want to match the exact text, not a substring.</p>",
                "shortdoc": "Verifies that element <code>locator</code> contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Not Be Visible",
                "args": [
                    "locator",
                    "message=None"
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is NOT visible.</p>\n<p>Passes if the element does not exists. See <a href=\"#Element%20Should%20Be%20Visible\" class=\"name\">Element Should Be Visible</a> for more information about visibility and supported arguments.</p>",
                "shortdoc": "Verifies that the element identified by <code>locator</code> is NOT visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Should Not Contain",
                "args": [
                    "locator",
                    "expected",
                    "message=None",
                    "ignore_case=False"
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that element <code>locator</code> does not contain text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Text Should Be",
                "args": [
                    "locator",
                    "expected",
                    "message=None",
                    "ignore_case=False"
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains exact the text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Should%20Contain\" class=\"name\">Element Should Contain</a> if a substring match is desired.</p>",
                "shortdoc": "Verifies that element <code>locator</code> contains exact the text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Element Text Should Not Be",
                "args": [
                    "locator",
                    "not_expected",
                    "message=None",
                    "ignore_case=False"
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p>New in SeleniumLibrary 3.1.1</p>",
                "shortdoc": "Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Execute Async Javascript",
                "args": [
                    "*code"
                ],
                "doc": "<p>Executes asynchronous JavaScript code with possible arguments.</p>\n<p>Similar to <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.</p>\n<p>Scripts must complete within the script timeout or this keyword will fail. See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section for more information.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\">arguments</a> as part of <code>code</code> argument. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> for more details.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>${CURDIR}/async_js_to_execute.js</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>var callback = arguments[arguments.length - 1];</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>function answer(){callback(\"text\");};</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>window.setTimeout(answer, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result}</td>\n<td>text</td>\n</tr>\n</table>",
                "shortdoc": "Executes asynchronous JavaScript code with possible arguments.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Execute Javascript",
                "args": [
                    "*code"
                ],
                "doc": "<p>Executes the given JavaScript code with possible arguments.</p>\n<p><code>code</code> may be divided into multiple cells in the test data and <code>code</code> may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from <code>code</code>.</p>\n<p>If <code>code</code> is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.</p>\n<p>The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use <code>window</code> to refer to the window of your application and <code>document</code> to refer to the document object of the current frame or window, e.g. <code>document.getElementById('example')</code>.</p>\n<p>This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\">arguments</a> as part of <code>code</code> argument. The JavaScript code and arguments must be separated with <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers and must be used exactly with this format. If the Javascript code is first, then the <span class=\"name\">JAVASCRIPT</span> marker is optional. The order of <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers can be swapped, but if <span class=\"name\">ARGUMENTS</span> is the first marker, then <span class=\"name\">JAVASCRIPT</span> marker is mandatory. It is only allowed to use <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers only one time in the <code>code</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>window.myFunc('arg1', 'arg2')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>${CURDIR}/js_to_execute.js</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>alert(arguments[0]);</td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td>JAVASCRIPT</td>\n<td>alert(arguments[0]);</td>\n</tr>\n</table>",
                "shortdoc": "Executes the given JavaScript code with possible arguments.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Frame Should Contain",
                "args": [
                    "locator",
                    "text",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that frame identified by <code>locator</code> contains <code>text</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that frame identified by <code>locator</code> contains <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get All Links",
                "args": [],
                "doc": "<p>Returns a list containing ids of all links found in current page.</p>\n<p>If a link has no id, an empty string will be in the list instead.</p>",
                "shortdoc": "Returns a list containing ids of all links found in current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Browser Aliases",
                "args": [],
                "doc": "<p>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserA</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserB</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{aliases}</td>\n<td><a href=\"#Get%20Browser%20Aliases\" class=\"name\">Get Browser Aliases</a></td>\n<td></td>\n<td># &amp;{aliases} = { BrowserA=1|BrowserB=2 }</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>${aliases.BrowserA}</td>\n<td></td>\n<td># logs <code>1</code></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${alias}</td>\n<td>IN</td>\n<td>@{aliases}</td>\n</tr>\n<tr>\n<td></td>\n<td><span class=\"name\">Log</span></td>\n<td>${alias}</td>\n<td># logs <code>BrowserA</code> and <code>BrowserB</code></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Browser Capabilities",
                "args": [],
                "doc": "<p>Get dictionary of browser properties</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${caps}=</td>\n<td>Get Browser Capabilities</td>\n</tr>\n</table>",
                "shortdoc": "Get dictionary of browser properties",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Browser Ids",
                "args": [],
                "doc": "<p>Returns index of all active browser as list.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{browser_ids}=</td>\n<td>Get Browser Ids</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${id}</td>\n<td>IN</td>\n<td>@{browser_ids}</td>\n</tr>\n<tr>\n<td></td>\n<td>@{window_titles}=</td>\n<td>Get Window Titles</td>\n<td>browser=${id}</td>\n</tr>\n<tr>\n<td></td>\n<td>Log</td>\n<td>Browser ${id} has these windows: ${window_titles}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns index of all active browser as list.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Cookie",
                "args": [
                    "name"
                ],
                "doc": "<p>Returns information of cookie with <code>name</code> as an object.</p>\n<p>If no cookie is found with <code>name</code>, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path, for example <code>/</code>.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>The domain, the cookie is visible to.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Python datetime object indicating when the cookie expires.</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>Possible attributes outside of the WebDriver specification</td>\n</tr>\n</table>\n<p>See the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a> for details about the cookie information. Notice that <code>expiry</code> is specified as a <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\">datetime object</a>, not as seconds since Unix Epoch like WebDriver natively does.</p>\n<p>In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a>. These other attributes are available in an <code>extra</code> attribute in the cookie object and it contains a dictionary of the other attributes. The <code>extra</code> attribute is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n</tr>\n<tr>\n<td>${cookie} =</td>\n<td><a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a></td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.name}</td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.value}</td>\n<td>bar</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${cookie.expiry.year} &gt; 2017</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns information of cookie with <code>name</code> as an object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Cookies",
                "args": [
                    "as_dict=False"
                ],
                "doc": "<p>Returns all cookies of the current page.</p>\n<p>If <code>as_dict</code> argument evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then cookie information is returned as a single string in format <code>name1=value1; name2=value2; name3=value3</code>. When <code>as_dict</code> argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.</p>\n<p>The <span class=\"name\">` as_dict</span>` argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Returns all cookies of the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Attribute",
                "args": [
                    "locator",
                    "attribute"
                ],
                "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>\n<p>Passing attribute name as part of the <code>locator</code> was removed in SeleniumLibrary 3.2. The explicit <code>attribute</code> argument should be used instead.</p>",
                "shortdoc": "Returns the value of <code>attribute</code> from the element <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Count",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the number of elements matching <code>locator</code>.</p>\n<p>If you wish to assert the number of matching elements, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument. Keyword will always return an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td><a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a></td>\n<td>name:div_name</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${count} &gt; 2</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns the number of elements matching <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Size",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns width and height of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both width and height are returned as integers.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height} =</td>\n<td><a href=\"#Get%20Element%20Size\" class=\"name\">Get Element Size</a></td>\n<td>css:div#container</td>\n</tr>\n</table>",
                "shortdoc": "Returns width and height of the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Status",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Return dictionary containing element status of:</p>\n<ul>\n<li>visible</li>\n<li>enabled</li>\n<li>disabled</li>\n<li>focused</li>\n</ul>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{res}</td>\n<td>Get Element Status</td>\n<td>class:special</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.visible}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.enabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.disabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.focused}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Return dictionary containing element status of:",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Horizontal Position",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the horizontal position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the left side of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Vertical%20Position\" class=\"name\">Get Vertical Position</a>.</p>",
                "shortdoc": "Returns the horizontal position of the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get List Items",
                "args": [
                    "locator",
                    "values=False"
                ],
                "doc": "<p>Returns all labels or values of selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Returns visible labels by default, but values can be returned by setting the <code>values</code> argument to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${labels} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>mylist</td>\n<td></td>\n</tr>\n<tr>\n<td>${values} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>css:#example select</td>\n<td>values=True</td>\n</tr>\n</table>\n<p>Support to return values is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns all labels or values of selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Location",
                "args": [],
                "doc": "<p>Returns the current browser window URL.</p>",
                "shortdoc": "Returns the current browser window URL.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Locations",
                "args": [
                    "browser=CURRENT"
                ],
                "doc": "<p>Returns and logs URLs of all windows of the selected browser.</p>\n<p><b>Browser Scope:</b></p>\n<p>The <code>browser</code> argument specifies the browser that shall return its windows information.</p>\n<ul>\n<li><code>browser</code> can be <code>index_or_alias</code> like in <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a>.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>CURRENT</code> (default, case-insensitive) the currently active browser is selected.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>ALL</code> (case-insensitive) the window information of all windows of all opened browsers are returned.</li>\n</ul>",
                "shortdoc": "Returns and logs URLs of all windows of the selected browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selected List Label",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the label of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the label of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the label of selected option from selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selected List Labels",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns labels of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns labels of selected options from selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selected List Value",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the value of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the value of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value of selected option from selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selected List Values",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns values of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns values of selected options from selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selenium Implicit Wait",
                "args": [],
                "doc": "<p>Gets the implicit wait value used by Selenium.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>",
                "shortdoc": "Gets the implicit wait value used by Selenium.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selenium Speed",
                "args": [],
                "doc": "<p>Gets the delay that is waited after each Selenium command.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>",
                "shortdoc": "Gets the delay that is waited after each Selenium command.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Selenium Timeout",
                "args": [],
                "doc": "<p>Gets the timeout that is used by various keywords.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>",
                "shortdoc": "Gets the timeout that is used by various keywords.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Session Id",
                "args": [],
                "doc": "<p>Returns the currently active browser session id.</p>\n<p>New in SeleniumLibrary 3.2</p>",
                "shortdoc": "Returns the currently active browser session id.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Source",
                "args": [],
                "doc": "<p>Returns the entire HTML source of the current page or frame.</p>",
                "shortdoc": "Returns the entire HTML source of the current page or frame.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Cell",
                "args": [
                    "locator",
                    "row",
                    "column",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Returns contents of a table cell.</p>\n<p>The table is located using the <code>locator</code> argument and its cell found using <code>row</code> and <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.</p>\n<p>All <code>&lt;th&gt;</code> and <code>&lt;td&gt;</code> elements anywhere in the table are considered to be cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Returns contents of a table cell.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Testability Status",
                "args": [],
                "doc": "<p>Get SeleniumTestability plugin status</p>",
                "shortdoc": "Get SeleniumTestability plugin status",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Text",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the text value of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the text value of the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Title",
                "args": [],
                "doc": "<p>Returns the title of the current page.</p>",
                "shortdoc": "Returns the title of the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Value",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the value attribute of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value attribute of the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Vertical Position",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the vertical position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the top of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Horizontal%20Position\" class=\"name\">Get Horizontal Position</a>.</p>",
                "shortdoc": "Returns the vertical position of the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get WebElement",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns the first WebElement matching the given <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the first WebElement matching the given <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get WebElements",
                "args": [
                    "locator"
                ],
                "doc": "<p>Returns a list of WebElement objects matching the <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.</p>",
                "shortdoc": "Returns a list of WebElement objects matching the <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Handles",
                "args": [
                    "browser=CURRENT"
                ],
                "doc": "<p>Returns all child window handles of the selected browser as a list.</p>\n<p>Can be used as a list of windows to exclude with <a href=\"#Select%20Window\" class=\"name\">Select Window</a>.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>\n<p>Prior to SeleniumLibrary 3.0, this keyword was named <span class=\"name\">List Windows</span>.</p>",
                "shortdoc": "Returns all child window handles of the selected browser as a list.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Identifiers",
                "args": [
                    "browser=CURRENT"
                ],
                "doc": "<p>Returns and logs id attributes of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs id attributes of all windows of the selected browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Names",
                "args": [
                    "browser=CURRENT"
                ],
                "doc": "<p>Returns and logs names of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs names of all windows of the selected browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Position",
                "args": [],
                "doc": "<p>Returns current window position.</p>\n<p>The position is relative to the top left corner of the screen. Returned values are integers. See also <a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x}</td>\n<td>${y}=</td>\n<td><a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a></td>\n</tr>\n</table>",
                "shortdoc": "Returns current window position.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Size",
                "args": [
                    "inner=False"
                ],
                "doc": "<p>Returns current window width and height as integers.</p>\n<p>See also <a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a>.</p>\n<p>If <code>inner</code> parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments. The <code>inner</code> is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Returns current window width and height as integers.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Titles",
                "args": [
                    "browser=CURRENT"
                ],
                "doc": "<p>Returns and logs titles of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs titles of all windows of the selected browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Go Back",
                "args": [],
                "doc": "<p>Simulates the user clicking the back button on their browser.</p>",
                "shortdoc": "Simulates the user clicking the back button on their browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Go To",
                "args": [
                    "url"
                ],
                "doc": "<p>Navigates the current browser window to the provided <code>url</code>.</p>",
                "shortdoc": "Navigates the current browser window to the provided <code>url</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Handle Alert",
                "args": [
                    "action=ACCEPT",
                    "timeout=None"
                ],
                "doc": "<p>Handles the current alert and returns its message.</p>\n<p>By default, the alert is accepted, but this can be controlled with the <code>action</code> argument that supports the following case-insensitive values:</p>\n<ul>\n<li><code>ACCEPT</code>: Accept the alert i.e. press <code>Ok</code>. Default.</li>\n<li><code>DISMISS</code>: Dismiss the alert i.e. press <code>Cancel</code>.</li>\n<li><code>LEAVE</code>: Leave the alert open.</li>\n</ul>\n<p>The <code>timeout</code> argument specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Handle Alert</td>\n<td></td>\n<td></td>\n<td># Accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>action=DISMISS</td>\n<td></td>\n<td># Dismiss alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>timeout=10 s</td>\n<td></td>\n<td># Use custom timeout and accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>DISMISS</td>\n<td>1 min</td>\n<td># Use custom timeout and dismiss alert.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td></td>\n<td># Accept alert and get its message.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td>LEAVE</td>\n<td># Leave alert open and get its message.</td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Handles the current alert and returns its message.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Highlight Elements",
                "args": [
                    "locator: str",
                    "width: str = 2px",
                    "style: str = dotted",
                    "color: str = blue"
                ],
                "doc": "<p>Highlight all matching elements by locator.</p>\n<p>Highlighing is done by adding a colored outline around the elements with CSS styling.</p>\n<p><code>locator</code>  element locator <code>width</code>    highlight outline width <code>style</code>    highlight outline style <code>color</code>    highlight outline color</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Highlight Elements</td>\n<td><a href=\"xpath://h2\">xpath://h2</a></td>\n</tr>\n</table>",
                "shortdoc": "Highlight all matching elements by locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Input Password",
                "args": [
                    "locator",
                    "password",
                    "clear=True"
                ],
                "doc": "<p>Types the given password into the text field identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See <a href=\"#Input%20Text\" class=\"name\">Input Text</a> for <code>clear</code> argument details.</p>\n<p>Difference compared to <a href=\"#Input%20Text\" class=\"name\">Input Text</a> is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>password</td>\n</tr>\n</table>\n<p>the password is shown as a normal keyword argument. A way to avoid that is using variables like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>${PASSWORD}</td>\n</tr>\n</table>\n<p>Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.</p>\n<p>The <span class=\"name\">clear</span> argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Types the given password into the text field identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Input Text",
                "args": [
                    "locator",
                    "text",
                    "clear=True"
                ],
                "doc": "<p>Types the given <code>text</code> into the text field identified by <code>locator</code>.</p>\n<p>When <code>clear</code> is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use <a href=\"#Input%20Password\" class=\"name\">Input Password</a> if you do not want the given <code>text</code> to be logged.</p>\n<p>If <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> is used and the <code>text</code> argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the <code>text</code> string as is to the element. If a file should be transferred to the hub and upload should be performed, please use <a href=\"#Choose%20File\" class=\"name\">Choose File</a> keyword.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See the <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> section how Boolean values are handled.</p>\n<p>Disabling the file upload the Selenium Grid node and the <span class=\"name\">clear</span> argument are new in SeleniumLibrary 4.0</p>",
                "shortdoc": "Types the given <code>text</code> into the text field identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Input Text Into Alert",
                "args": [
                    "text",
                    "action=ACCEPT",
                    "timeout=None"
                ],
                "doc": "<p>Types the given <code>text</code> into an input field in an alert.</p>\n<p>The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Types the given <code>text</code> into an input field in an alert.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Input Text When Element Is Visible",
                "args": [
                    "locator: str",
                    "text: str"
                ],
                "doc": "<p>Input text into locator after it has become visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>text</code> insert text to locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Input Text When Element Is Visible</td>\n<td>//input[@id=\"freetext\"]</td>\n<td>my feedback</td>\n</tr>\n</table>",
                "shortdoc": "Input text into locator after it has become visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Alert Present",
                "args": [
                    "text: str = None",
                    "action: str = ACCEPT"
                ],
                "doc": "<p>Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.</p>\n<p>Other possible actions are DISMISS and LEAVE.</p>\n<p><code>text</code> check if alert text is matching to this, if <span class=\"name\">None</span> will check if alert is present at all</p>\n<p><code>action</code> possible action if alert is present, default ACCEPT</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Alert Present</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Checkbox Selected",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Is checkbox selected</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Checkbox Selected</td>\n<td>id:taxes-paid</td>\n</tr>\n</table>",
                "shortdoc": "Is checkbox selected",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Attribute Equal To",
                "args": [
                    "locator: str",
                    "attribute: str",
                    "expected: str"
                ],
                "doc": "<p>Is element attribute equal to expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>attribute</code> element attribute to check for</p>\n<p><code>expected</code> is attribute value equal to this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Attribute Equal To</td>\n<td>h1</td>\n<td>id</td>\n<td>main</td>\n</tr>\n</table>",
                "shortdoc": "Is element attribute equal to expected value",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Disabled",
                "args": [
                    "locator: str",
                    "missing_ok: bool = True"
                ],
                "doc": "<p>Is element disabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Disabled</td>\n<td>//input[@type=\"submit\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element disabled",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Enabled",
                "args": [
                    "locator: str",
                    "missing_ok: bool = True"
                ],
                "doc": "<p>Is element enabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Enabled</td>\n<td>input.field1</td>\n</tr>\n</table>",
                "shortdoc": "Is element enabled",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Focused",
                "args": [
                    "locator: str",
                    "missing_ok: bool = True"
                ],
                "doc": "<p>Is element focused</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Focused</td>\n<td>//input[@id=\"freetext\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element focused",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Text",
                "args": [
                    "locator: str",
                    "expected: str",
                    "ignore_case: bool = False"
                ],
                "doc": "<p>Is element text expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Is element text expected",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Visible",
                "args": [
                    "locator: str",
                    "missing_ok: bool = True"
                ],
                "doc": "<p>Is element visible</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Visible</td>\n<td>id:confirmation</td>\n</tr>\n</table>",
                "shortdoc": "Is element visible",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is List Selected",
                "args": [
                    "locator: str"
                ],
                "doc": "<p>Is any option selected in the</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selected</td>\n<td>id:cars</td>\n</tr>\n</table>",
                "shortdoc": "Is any option selected in the",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is List Selection",
                "args": [
                    "locator: str",
                    "*expected: str"
                ],
                "doc": "<p>Is list selected with expected values</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected selected options</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selection</td>\n<td>id:cars</td>\n<td>Ford</td>\n</tr>\n</table>",
                "shortdoc": "Is list selected with expected values",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Location",
                "args": [
                    "url: str"
                ],
                "doc": "<p>Is current URL expected url</p>\n<p><code>url</code> expected current URL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Location</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Is current URL expected url",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Radio Button Selected",
                "args": [
                    "group_name: str"
                ],
                "doc": "<p>Is any radio button selected in the button group</p>\n<p><code>group_name</code> radio button group name</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Selected</td>\n<td>group_name=gender</td>\n</tr>\n</table>",
                "shortdoc": "Is any radio button selected in the button group",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Radio Button Set To",
                "args": [
                    "group_name: str",
                    "value: str"
                ],
                "doc": "<p>Is radio button group set to expected value</p>\n<p><code>group_name</code> radio button group name</p>\n<p><code>value</code> expected value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Set To</td>\n<td>group_name=gender</td>\n<td>value=female</td>\n</tr>\n</table>",
                "shortdoc": "Is radio button group set to expected value",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Textarea Value",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Is textarea matching expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textarea value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textarea Value</td>\n<td>//textarea</td>\n<td>Yours sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Is textarea matching expected value",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Textfield Value",
                "args": [
                    "locator: str",
                    "expected: str"
                ],
                "doc": "<p>Is textfield value expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textfield value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textfield Value</td>\n<td>id:lname</td>\n<td>Lastname</td>\n</tr>\n</table>",
                "shortdoc": "Is textfield value expected",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Title",
                "args": [
                    "title: str"
                ],
                "doc": "<p>Is page title expected</p>\n<p><code>title</code> expected title value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Title</td>\n<td>Webpage title text</td>\n</tr>\n</table>",
                "shortdoc": "Is page title expected",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Selection Should Be",
                "args": [
                    "locator",
                    "*expected"
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has <code>expected</code> options selected.</p>\n<p>It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.</p>\n<p>If no expected options are given, validates that the list has no selections. A more explicit alternative is using <a href=\"#List%20Should%20Have%20No%20Selections\" class=\"name\">List Should Have No Selections</a>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>gender</td>\n<td>Female</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>interests</td>\n<td>Test Automation</td>\n<td>Python</td>\n</tr>\n</table>",
                "shortdoc": "Verifies selection list <code>locator</code> has <code>expected</code> options selected.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Should Have No Selections",
                "args": [
                    "locator"
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has no options selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list <code>locator</code> has no options selected.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Location Should Be",
                "args": [
                    "url",
                    "message=None"
                ],
                "doc": "<p>Verifies that the current URL is exactly <code>url</code>.</p>\n<p>The <code>url</code> argument contains the exact url that should exist in browser.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL is exactly <code>url</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Location Should Contain",
                "args": [
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies that the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL contains <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Locator Should Match X Times",
                "args": [
                    "locator",
                    "x",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p><b>DEPRECATED in SeleniumLibrary 4.0.</b>, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument instead.</p>",
                "shortdoc": "<b>DEPRECATED in SeleniumLibrary 4.0.</b>, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument instead.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Log Location",
                "args": [],
                "doc": "<p>Logs and returns the current browser window URL.</p>",
                "shortdoc": "Logs and returns the current browser window URL.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Log Source",
                "args": [
                    "loglevel=INFO"
                ],
                "doc": "<p>Logs and returns the HTML source of the current page or frame.</p>\n<p>The <code>loglevel</code> argument defines the used log level. Valid log levels are <code>WARN</code>, <code>INFO</code> (default), <code>DEBUG</code>, <code>TRACE</code> and <code>NONE</code> (no logging).</p>",
                "shortdoc": "Logs and returns the HTML source of the current page or frame.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Log Title",
                "args": [],
                "doc": "<p>Logs and returns the title of the current page.</p>",
                "shortdoc": "Logs and returns the title of the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Maximize Browser Window",
                "args": [],
                "doc": "<p>Maximizes current browser window.</p>",
                "shortdoc": "Maximizes current browser window.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Down",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates pressing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element is pressed without releasing the mouse button.</p>\n<p>See also the more specific keywords <a href=\"#Mouse%20Down%20On%20Image\" class=\"name\">Mouse Down On Image</a> and <a href=\"#Mouse%20Down%20On%20Link\" class=\"name\">Mouse Down On Link</a>.</p>",
                "shortdoc": "Simulates pressing the left mouse button on the element <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Down On Image",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates a mouse down event on an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>",
                "shortdoc": "Simulates a mouse down event on an image identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Down On Link",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates a mouse down event on a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>",
                "shortdoc": "Simulates a mouse down event on a link identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Out",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates moving the mouse away from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates moving the mouse away from the element <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Over",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates hovering the mouse over the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates hovering the mouse over the element <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Up",
                "args": [
                    "locator"
                ],
                "doc": "<p>Simulates releasing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates releasing the left mouse button on the element <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Available Browser",
                "args": [
                    "url: str",
                    "use_profile: bool = False",
                    "headless: bool = None",
                    "maximized: bool = False",
                    "browser_selection: typing.Any = AUTO",
                    "alias: str = None",
                    "profile_name: str = None",
                    "profile_path: str = None",
                    "preferences: dict = None",
                    "proxy: str = None"
                ],
                "doc": "<p>Opens the first available browser in the system in preferred order, or the given browser (<code>browser_selection</code>).</p>\n<p><code>url</code> URL to open</p>\n<p><code>use_profile</code> Set browser profile, default <code>False</code> (Chrome/Chromium only)</p>\n<p><code>headless</code> Run in headless mode, default <code>False</code></p>\n<p><code>maximized</code> Run window maximized, default <code>False</code></p>\n<p><code>browser_selection</code> browser name, default <code>AUTOMATIC_BROWSER_SELECTION</code></p>\n<p><code>alias</code> Custom name for browser</p>\n<p><code>profile_name</code> Name of profile (if profile enabled)</p>\n<p><code>profile_path</code> Path to profiles (if profile enabled)</p>\n<p><code>preferences</code> Profile preferences (Chrome/Chromium only)</p>\n<p><code>proxy</code> Proxy server address (Chrome only)</p>\n<p>Returns an index of the webdriver session.</p>\n<h4>Process of opening a browser</h4>\n<p>1. Get the order of browsers</p>\n<p>2. Loop the list of preferred browsers</p>\n<p>a. Set the webdriver options for the browser</p>\n<p>b. Create the webdriver using existing installation</p>\n<p>c. (If step b. failed) Download and install webdriver, try again</p>\n<p>d. (If step c. failed) Try starting webdriver in headless mode</p>\n<p>3. Open the URL</p>\n<p>Returns index or custom alias for the browser instance.</p>\n<p>Raises <code>BrowserNotFoundError</code> if unable to open the browser.</p>\n<p>For information about Safari webdriver setup, see <a href=\"https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari\">https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari</a></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${idx1}</td>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${idx2}</td>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>browser_selection=opera,firefox</td>\n</tr>\n<tr>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>headless=True</td>\n<td>proxy=localhost:8899</td>\n</tr>\n</table>",
                "shortdoc": "Opens the first available browser in the system in preferred order, or the given browser (<code>browser_selection</code>).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Browser",
                "args": [
                    "url=None",
                    "browser=firefox",
                    "alias=None",
                    "remote_url=False",
                    "desired_capabilities=None",
                    "ff_profile_dir=None",
                    "options=None",
                    "service_log_path=None",
                    "executable_path=None"
                ],
                "doc": "<p>Opens a new browser instance to the optional <code>url</code>.</p>\n<p>The <code>browser</code> argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>firefox, ff</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>googlechrome, chrome, gc</td>\n</tr>\n<tr>\n<td>Headless Firefox</td>\n<td>headlessfirefox</td>\n</tr>\n<tr>\n<td>Headless Chrome</td>\n<td>headlesschrome</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>internetexplorer, ie</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>edge</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>safari</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>opera</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>android</td>\n</tr>\n<tr>\n<td>Iphone</td>\n<td>iphone</td>\n</tr>\n<tr>\n<td>PhantomJS</td>\n<td>phantomjs</td>\n</tr>\n<tr>\n<td>HTMLUnit</td>\n<td>htmlunit</td>\n</tr>\n<tr>\n<td>HTMLUnit with Javascript</td>\n<td>htmlunitwithjs</td>\n</tr>\n</table>\n<p>To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the <a href=\"https://github.com/robotframework/SeleniumLibrary#browser-drivers\">project documentation</a> for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.</p>\n<p>After opening the browser, it is possible to use optional <code>url</code> to navigate the browser to the desired address.</p>\n<p>Optional <code>alias</code> is an alias given for this browser instance and it can be used for switching between browsers. When same <code>alias</code> is given with two <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The <code>alias</code> definition overrules <code>browser</code> definition. When same <code>alias</code> is used but a different <code>browser</code> is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> is called. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>Optional <code>remote_url</code> is the URL for a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Optional <code>desired_capabilities</code> can be used to configure, for example, logging preferences for a browser or a browser and operating system when using <a href=\"http://saucelabs.com\">Sauce Labs</a>. Desired capabilities can be given either as a Python dictionary or as a string in the format <code>key1:value1,key2:value2</code>. <a href=\"https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities\">Selenium documentation</a> lists possible capabilities that can be enabled.</p>\n<p>Optional <code>ff_profile_dir</code> is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The <code>ff_profile_dir</code> can also be an instance of the <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html\">selenium.webdriver.FirefoxProfile</a> . As a third option, it is possible to use <span class=\"name\">FirefoxProfile</span> methods and attributes to define the profile using methods and attributes in the same way as with <code>options</code> argument. Example: It is possible to use FirefoxProfile <span class=\"name\">set_preference</span> to define different profile settings. See <code>options</code> argument documentation in below how to handle backslash escaping.</p>\n<p>Optional <code>options</code> argument allows defining browser specific Selenium options. Example for Chrome, the <code>options</code> argument allows defining the following <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">methods and attributes</a> and for Firefox these <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options\">methods and attributes</a> are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If <code>browser</code> argument is <span class=\"name\">android</span> then <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> is used. Selenium options are also supported, when <code>remote_url</code> argument is used.</p>\n<p>The SeleniumLibrary <code>options</code> argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.</p>\n<p>The string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: <span class=\"name\">add_argument(\"--headless\")</span> or <span class=\"name\">add_experimental_option(\"key\", \"value\")</span>. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, <span class=\"name\">headless=True</span>. Multiple methods and attributes must be separated by a semicolon. Example: <span class=\"name\">add_argument(\"--headless\");add_argument(\"--start-maximized\")</span>.</p>\n<p>Arguments allow defining Python data types and arguments are evaluated by using Python <a href=\"https://docs.python.org/3/library/ast.html#ast.literal_eval\">ast.literal_eval</a>. Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example <span class=\"name\">True</span> or <span class=\"name\">None</span>, by not using quotes around the arguments.</p>\n<p>The string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example <span class=\"name\">add_argument ( \"--headless\" )</span> is same as <span class=\"name\">add_argument(\"--headless\")</span>. But <span class=\"name\">add_argument(\" --headless \")</span> is not same same as <span class=\"name\">add_argument ( \"--headless\" )</span>, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\">raw strings</a> and example write: r\"C:\\\\path\\\\to\\\\profile\".</p>\n<p>As last format, <code>options</code> argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to <span class=\"name\">${options}</span> variable in the Robot Framework data:</p>\n<pre>\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n</pre>\n<p>Then the <span class=\"name\">${options}</span> variable can be used as an argument to <code>options</code>.</p>\n<p>Example the <code>options</code> argument can be used to launch Chomium-based applications which utilize the <a href=\"https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver\">Chromium Embedded Framework</a> . To lauch Chomium-based application, use <code>options</code> to define <span class=\"name\">binary_location</span> attribute and use <span class=\"name\">add_argument</span> method to define <span class=\"name\">remote-debugging-port</span> port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.</p>\n<p>Optional <code>service_log_path</code> argument defines the name of the file where to write the browser driver logs. If the <code>service_log_path</code>  argument contain a  marker <code>{index}</code>, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>Optional <code>executable_path</code> argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\">$PATH</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>alias=Firefox</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Edge</td>\n<td>remote_url=http://127.0.0.1:4444/wd/hub</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>about:blank</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>browser=Chrome</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Alias examples:</p>\n<table border=\"1\">\n<tr>\n<td>${1_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Opens new browser because alias is new.</td>\n</tr>\n<tr>\n<td>${2_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td></td>\n<td># Opens new browser because alias is not defined.</td>\n</tr>\n<tr>\n<td>${3_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>${4_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=${1_index}</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${3_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${4_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${2_index}</td>\n<td>${2}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Example when using <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> method:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")</td>\n<td># Sting format.</td>\n</tr>\n<tr>\n<td>${options} =</td>\n<td>Get Options</td>\n<td></td>\n<td></td>\n<td># Selenium options instance.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=${options}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")</td>\n<td># Start Chomium-based application.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"</td>\n<td># Windows OS path escaping.</td>\n</tr>\n</table>\n<p>Example for FirefoxProfile</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=/path/to/profile</td>\n<td># Using profile from disk.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=${FirefoxProfile_instance}</td>\n<td># Using instance of FirefoxProfile.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")</td>\n<td># Defining profile using FirefoxProfile mehtods.</td>\n</tr>\n</table>\n<p>If the provided configuration options are not enough, it is possible to use <a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a> to customize browser initialization even more.</p>\n<p>Applying <code>desired_capabilities</code> argument also for local browser is new in SeleniumLibrary 3.1.</p>\n<p>Using <code>alias</code> to decide, is the new browser opened is new in SeleniumLibrary 4.0. The <code>options</code> and <code>service_log_path</code> are new in SeleniumLibrary 4.0. Support for <code>ff_profile_dir</code> accepting an instance of the <span class=\"name\">selenium.webdriver.FirefoxProfile</span> and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0.</p>\n<p>Making <code>url</code> optional is new in SeleniumLibrary 4.1.</p>\n<p>The <code>executable_path</code> argument is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Opens a new browser instance to the optional <code>url</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Chrome Browser",
                "args": [
                    "url: str",
                    "use_profile: bool = False",
                    "headless: bool = False",
                    "maximized: bool = False",
                    "alias: str = None",
                    "profile_name: str = None",
                    "profile_path: str = None",
                    "preferences: dict = None",
                    "proxy: str = None"
                ],
                "doc": "<p>Open Chrome browser. See <code>Open Available Browser</code> for descriptions of arguments.</p>",
                "shortdoc": "Open Chrome browser. See <code>Open Available Browser</code> for descriptions of arguments.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Context Menu",
                "args": [
                    "locator"
                ],
                "doc": "<p>Opens the context menu on the element identified by <code>locator</code>.</p>",
                "shortdoc": "Opens the context menu on the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Headless Chrome Browser",
                "args": [
                    "url: str"
                ],
                "doc": "<p>Open Chrome browser in headless mode.</p>\n<p><code>url</code> URL to open</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${idx}</td>\n<td>Open Headless Chrome Browser</td>\n<td><a href=\"https://www.google.com\">https://www.google.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Open Chrome browser in headless mode.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open User Browser",
                "args": [
                    "url: str",
                    "tab=True"
                ],
                "doc": "<p>Open URL with user's default browser</p>\n<p><code>url</code> URL to open <code>tab</code> defines is url is opened in a tab (default <span class=\"name\">True</span>) or in new window (<span class=\"name\">False</span>)</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td></td>\n</tr>\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td>tab=False</td>\n</tr>\n</table>",
                "shortdoc": "Open URL with user's default browser",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain",
                "args": [
                    "text",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that current page contains <code>text</code>.</p>\n<p>If this keyword fails, it automatically logs the page source using the log level specified with the optional <code>loglevel</code> argument. Valid log levels are <code>DEBUG</code>, <code>INFO</code> (default), <code>WARN</code>, and <code>NONE</code>. If the log level is <code>NONE</code> or below the current active log level the source will not be logged.</p>",
                "shortdoc": "Verifies that current page contains <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Button",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Checkbox",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox <code>locator</code> is found from the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Element",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE",
                    "limit=None"
                ],
                "doc": "<p>Verifies that element <code>locator</code> is found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <code>None</code> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Examples assumes that locator matches to two elements.</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=1</td>\n<td># Keyword fails.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=2</td>\n<td># Keyword passes.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=none</td>\n<td># None is considered one or more.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n</table>\n<p>The <code>limit</code> argument is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element <code>locator</code> is found on the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Image",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Link",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain List",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Radio Button",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Contain Textfield",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies text field <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field <code>locator</code> is found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain",
                "args": [
                    "text",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies the current page does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies the current page does not contain <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Button",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Checkbox",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox <code>locator</code> is not found from the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Element",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that element <code>locator</code> is not found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies that element <code>locator</code> is not found on the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Image",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Link",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain List",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Radio Button",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Should Not Contain Textfield",
                "args": [
                    "locator",
                    "message=None",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies text field <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field <code>locator</code> is not found from current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Press Key",
                "args": [
                    "locator",
                    "key"
                ],
                "doc": "<p><b>DEPRECATED in SeleniumLibrary 4.0.</b> use <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> instead.</p>",
                "shortdoc": "<b>DEPRECATED in SeleniumLibrary 4.0.</b> use <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> instead.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Press Keys",
                "args": [
                    "locator=None",
                    "*keys"
                ],
                "doc": "<p>Simulates the user pressing key(s) to an element or on the active browser.</p>\n<p>If <code>locator</code> evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then the <code>keys</code> are sent to the currently active browser. Otherwise element is searched and <code>keys</code> are send to the element identified by the <code>locator</code>. In later case, keyword fails if element is not found. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>keys</code> arguments can contain one or many strings, but it can not be empty. <code>keys</code> can also be a combination of <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\">Selenium Keys</a> and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the <span class=\"name\">+</span> character, like in <span class=\"name\">CONTROL+c</span>. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string <span class=\"name\">AALTO</span> and <span class=\"name\">ALT</span> not parsed inside of the string. But <span class=\"name\">A+ALT+O</span> would found Selenium ALT key from the <code>keys</code> argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.</p>\n<p>If Selenium Keys are detected in the <code>keys</code> argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with <span class=\"name\">+</span> character, example <span class=\"name\">E+N+D</span>.</p>\n<p><span class=\"name\">CTRL</span> is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL\">Selenium CONTROL</a> and ESC is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE\">Selenium ESCAPE</a></p>\n<p>New in SeleniumLibrary 3.3</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>AAAAA</td>\n<td></td>\n<td># Sends string \"AAAAA\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>None</td>\n<td>BBBBB</td>\n<td></td>\n<td># Sends string \"BBBBB\" to currently active browser.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>E+N+D</td>\n<td></td>\n<td># Sends string \"END\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX</td>\n<td>YY</td>\n<td># Sends strings \"XXX\" and \"YY\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX+YY</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT+ARROW_DOWN</td>\n<td></td>\n<td># Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT</td>\n<td>ARROW_DOWN</td>\n<td># Pressing \"ALT\" key and then pressing ARROW_DOWN.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>CTRL+c</td>\n<td></td>\n<td># Pressing CTRL key down, sends string \"c\" and then releases CTRL key.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>button</td>\n<td>RETURN</td>\n<td></td>\n<td># Pressing \"ENTER\" key to element.</td>\n</tr>\n</table>",
                "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Radio Button Should Be Set To",
                "args": [
                    "group_name",
                    "value"
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> is set to <code>value</code>.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group <code>group_name</code> is set to <code>value</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Radio Button Should Not Be Selected",
                "args": [
                    "group_name"
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> has no selection.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group <code>group_name</code> has no selection.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Register Keyword To Run On Failure",
                "args": [
                    "keyword"
                ],
                "doc": "<p>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NOTHING</code> or <code>NONE</code>, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>Log Source</td>\n<td></td>\n</tr>\n<tr>\n<td>${previous kw}=</td>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>NONE</td>\n</tr>\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>${previous kw}</td>\n<td></td>\n</tr>\n</table>\n<p>Changes in SeleniumLibrary 3.0:</p>\n<ul>\n<li>Possible to use string <code>NONE</code> or Python <code>None</code> to disable the functionality.</li>\n<li>Return Python <code>None</code> when the functionality was disabled earlier. In previous versions special value <code>No Keyword</code> was returned and it could not be used to restore the original state.</li>\n</ul>",
                "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Reload Page",
                "args": [],
                "doc": "<p>Simulates user reloading page.</p>",
                "shortdoc": "Simulates user reloading page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Location Strategy",
                "args": [
                    "strategy_name"
                ],
                "doc": "<p>Removes a previously added custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies.</p>",
                "shortdoc": "Removes a previously added custom location strategy.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Screenshot",
                "args": [
                    "locator: str = None",
                    "filename: str = "
                ],
                "doc": "<p>Capture page and/or element screenshot.</p>\n<p><code>locator</code> if defined, take element screenshot, if not takes page screenshot</p>\n<p><code>filename</code> filename for the screenshot, by default creates file <span class=\"name\">screenshot-timestamp-element/page.png</span> if set to <span class=\"name\">None</span> then file is not saved at all</p>\n<p>Example:</p>\n<pre>\nScreenshot | locator=//img[@alt=\"Google\"] | filename=locator.png |             # element screenshot, defined filename\nScreenshot | filename=page.png        |                                    # page screenshot, defined filename\nScreenshot | filename=${NONE}         |                                    # page screenshot, NO file will be created\nScreenshot |                          |                                    # page screenshot, default filename\nScreenshot | locator=//img[@alt=\"Google\"] |                                    # element screenshot, default filename\nScreenshot | locator=//img[@alt=\"Google\"] | filename=${CURDIR}/subdir/loc.png  # element screenshot, create dirs if not existing\n</pre>",
                "shortdoc": "Capture page and/or element screenshot.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Scroll Element Into View",
                "args": [
                    "locator"
                ],
                "doc": "<p>Scrolls the element identified by <code>locator</code> into view.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.2.0</p>",
                "shortdoc": "Scrolls the element identified by <code>locator</code> into view.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select All From List",
                "args": [
                    "locator"
                ],
                "doc": "<p>Selects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects all options from multi-selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select Checkbox",
                "args": [
                    "locator"
                ],
                "doc": "<p>Selects the checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if checkbox is already selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects the checkbox identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select Frame",
                "args": [
                    "locator"
                ],
                "doc": "<p>Sets frame identified by <code>locator</code> as the current frame.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Works both with frames and iframes. Use <a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a> to cancel the frame selection and return to the main frame.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>top-frame</td>\n<td># Select frame with id or name 'top-frame'</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Click link 'example' in the selected frame</td>\n</tr>\n<tr>\n<td><a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a></td>\n<td></td>\n<td># Back to main frame.</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>//iframe[@name='xxx']</td>\n<td># Select frame using xpath</td>\n</tr>\n</table>",
                "shortdoc": "Sets frame identified by <code>locator</code> as the current frame.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select From List By Index",
                "args": [
                    "locator",
                    "*indexes"
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list <code>locator</code> by <code>indexes</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select From List By Label",
                "args": [
                    "locator",
                    "*labels"
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list <code>locator</code> by <code>labels</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select From List By Value",
                "args": [
                    "locator",
                    "*values"
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list <code>locator</code> by <code>values</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select Radio Button",
                "args": [
                    "group_name",
                    "value"
                ],
                "doc": "<p>Sets the radio button group <code>group_name</code> to <code>value</code>.</p>\n<p>The radio button to be selected is located by two arguments:</p>\n<ul>\n<li><code>group_name</code> is the name of the radio button group.</li>\n<li><code>value</code> is the <code>id</code> or <code>value</code> attribute of the actual radio button.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>size</td>\n<td>XL</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>contact</td>\n<td>email</td>\n</tr>\n</table>",
                "shortdoc": "Sets the radio button group <code>group_name</code> to <code>value</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select Window",
                "args": [
                    "locator=MAIN",
                    "timeout=None"
                ],
                "doc": "<p>DEPRECATED in SeleniumLibrary 4.0. , use <a href=\"#Switch%20Window\" class=\"name\">Switch Window</a> instead.</p>",
                "shortdoc": "DEPRECATED in SeleniumLibrary 4.0. , use <a href=\"#Switch%20Window\" class=\"name\">Switch Window</a> instead.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Browser Implicit Wait",
                "args": [
                    "value"
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>Same as <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> but only affects the current browser.</p>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Download Directory",
                "args": [
                    "directory: str = None",
                    "download_pdf: bool = True"
                ],
                "doc": "<p>Set browser download directory</p>\n<p><code>directory</code>    target directory for downloads, defaults to None which means that setting is removed <code>download_pdf</code> if <span class=\"name\">True</span> then PDF is downloaded instead of shown with browser's internal viewer</p>",
                "shortdoc": "Set browser download directory",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Focus To Element",
                "args": [
                    "locator"
                ],
                "doc": "<p>Sets the focus to the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Focus</span>.</p>",
                "shortdoc": "Sets the focus to the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Screenshot Directory",
                "args": [
                    "path"
                ],
                "doc": "<p>Sets the directory for captured screenshots.</p>\n<p><code>path</code> argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when <a href=\"#Importing\" class=\"name\">importing</a> the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>path</code> equals to EMBED (case insensitive) and <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> or <a href=\"#Capture%20Element%20Screenshot\" class=\"name\">capture Element Screenshot</a> keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Sets the directory for captured screenshots.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Selenium Implicit Wait",
                "args": [
                    "value"
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>This keyword sets the implicit wait for all opened browsers. Use <a href=\"#Set%20Browser%20Implicit%20Wait\" class=\"name\">Set Browser Implicit Wait</a> to set it only to the current browser.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig wait} =</td>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>10 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Perform AJAX call that is slow</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>${orig wait}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Selenium Speed",
                "args": [
                    "value"
                ],
                "doc": "<p>Sets the delay that is waited after each Selenium command.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium Speed</a></td>\n<td>0.5 seconds</td>\n</tr>\n</table>",
                "shortdoc": "Sets the delay that is waited after each Selenium command.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Selenium Timeout",
                "args": [
                    "value"
                ],
                "doc": "<p>Sets the timeout that is used by various keywords.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>15 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>${orig timeout}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the timeout that is used by various keywords.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Window Position",
                "args": [
                    "x",
                    "y"
                ],
                "doc": "<p>Sets window position using <code>x</code> and <code>y</code> coordinates.</p>\n<p>The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a></td>\n<td>100</td>\n<td>200</td>\n</tr>\n</table>",
                "shortdoc": "Sets window position using <code>x</code> and <code>y</code> coordinates.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Window Size",
                "args": [
                    "width",
                    "height",
                    "inner=False"
                ],
                "doc": "<p>Sets current windows size to given <code>width</code> and <code>height</code>.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a>.</p>\n<p>Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.</p>\n<p>If <code>inner</code> parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM <i>window.innerWidth</i> and <i>window.innerHeight</i>. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments.</p>\n<p>The <code>inner</code> argument is new since SeleniumLibrary 4.0.</p>\n<p>This <code>inner</code> argument does not support Frames. If a frame is selected, switch to default before running this.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Sets current windows size to given <code>width</code> and <code>height</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Simulate Event",
                "args": [
                    "locator",
                    "event"
                ],
                "doc": "<p>Simulates <code>event</code> on the element identified by <code>locator</code>.</p>\n<p>This keyword is useful if element has <code>OnEvent</code> handler that needs to be explicitly invoked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Simulate</span>.</p>",
                "shortdoc": "Simulates <code>event</code> on the element identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Submit Form",
                "args": [
                    "locator=None"
                ],
                "doc": "<p>Submits a form identified by <code>locator</code>.</p>\n<p>If <code>locator</code> is not given, first form on the page is submitted.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Submits a form identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Switch Browser",
                "args": [
                    "index_or_alias"
                ],
                "doc": "<p>Switches between active browsers using <code>index_or_alias</code>.</p>\n<p>Indices are returned by the <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword and aliases can be given to it explicitly. Indices start from 1.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td>ff</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td>ie</td>\n<td>alias=second</td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>1</td>\n<td># index</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>I'm feeling lucky</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>second</td>\n<td># alias</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>More Yahoo!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Above example expects that there was no other open browsers when opening the first one because it used index <code>1</code> when switching to it later. If you are not sure about that, you can store the index into a variable as below.</p>\n<table border=\"1\">\n<tr>\n<td>${index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n</tr>\n<tr>\n<td># Do something ...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>${index}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Switches between active browsers using <code>index_or_alias</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Switch Window",
                "args": [
                    "locator=MAIN",
                    "timeout=None",
                    "browser=CURRENT"
                ],
                "doc": "<p>Switches to browser window matching <code>locator</code>.</p>\n<p>If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.</p>\n<p>Notice that alerts should be handled with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> or other alert related keywords.</p>\n<p>The <code>locator</code> can be specified using different strategies somewhat similarly as when <a href=\"#Locating%20elements\" class=\"name\">locating elements</a> on pages.</p>\n<ul>\n<li>By default, the <code>locator</code> is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.</li>\n</ul>\n<ul>\n<li>The <code>locator</code> can specify an explicit strategy by using the format <code>strategy:value</code> (recommended) or <code>strategy=value</code>. Supported strategies are <code>name</code>, <code>title</code>, and <code>url</code>. These matches windows using their name, title, or URL, respectively. Additionally, <code>default</code> can be used to explicitly use the default strategy explained above.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>NEW</code> (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>MAIN</code> (default, case-insensitive), the main window is selected.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>CURRENT</code> (case-insensitive), nothing is done. This effectively just returns the current window handle.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is not a string, it is expected to be a list of window handles <i>to exclude</i>. Such a list of excluded windows can be got from <a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a> before doing an action that opens a new window.</li>\n</ul>\n<p>The <code>timeout</code> is used to specify how long keyword will poll to select the new window. The <code>timeout</code> is new in SeleniumLibrary 3.2.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup1</td>\n<td></td>\n<td># Open new window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>example</td>\n<td></td>\n<td># Select window using default strategy</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>popup2</td>\n<td></td>\n<td># Open another window</td>\n</tr>\n<tr>\n<td>${handle} =</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>NEW</td>\n<td># Select latest opened window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td></td>\n<td># Select window using handle</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>MAIN</td>\n<td></td>\n<td># Select the main window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Main</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${excludes} =</td>\n<td><a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a></td>\n<td></td>\n<td># Get list of current windows</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup3</td>\n<td></td>\n<td># Open one more window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${excludes}</td>\n<td></td>\n<td># Select window using excludes</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 3</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>The <code>browser</code> argument allows with <code>index_or_alias</code> to implicitly switch to a specific browser when switching to a window. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></p>\n<ul>\n<li>If the <code>browser</code> is <code>CURRENT</code> (case-insensitive), no other browser is selected.</li>\n</ul>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The <code>strategy:value</code> syntax is only supported by SeleniumLibrary 3.0 and newer.</li>\n<li>Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.</li>\n<li>Earlier versions supported aliases <code>None</code>, <code>null</code> and the empty string for selecting the main window, and alias <code>self</code> for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.</li>\n</ul>",
                "shortdoc": "Switches to browser window matching <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Cell Should Contain",
                "args": [
                    "locator",
                    "row",
                    "column",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies table cell contains text <code>expected</code>.</p>\n<p>See <a href=\"#Get%20Table%20Cell\" class=\"name\">Get Table Cell</a> that this keyword uses internally for an explanation about accepted arguments.</p>",
                "shortdoc": "Verifies table cell contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Column Should Contain",
                "args": [
                    "locator",
                    "column",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies table column contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple columns, those merged cells count as a single column.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table column contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Footer Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies table footer contains text <code>expected</code>.</p>\n<p>Any <code>&lt;td&gt;</code> element inside <code>&lt;tfoot&gt;</code> element is considered to be part of the footer.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table footer contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Header Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies table header contains text <code>expected</code>.</p>\n<p>Any <code>&lt;th&gt;</code> element anywhere in the table is considered to be part of the header.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table header contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Row Should Contain",
                "args": [
                    "locator",
                    "row",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies that table row contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that table row contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "loglevel=TRACE"
                ],
                "doc": "<p>Verifies table contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Textarea Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies text area <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area <code>locator</code> contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Textarea Value Should Be",
                "args": [
                    "locator",
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies text area <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area <code>locator</code> has exactly text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Textfield Should Contain",
                "args": [
                    "locator",
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies text field <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override the default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field <code>locator</code> contains text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Textfield Value Should Be",
                "args": [
                    "locator",
                    "expected",
                    "message=None"
                ],
                "doc": "<p>Verifies text field <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field <code>locator</code> has exactly text <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Title Should Be",
                "args": [
                    "title",
                    "message=None"
                ],
                "doc": "<p>Verifies that the current page title equals <code>title</code>.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that the current page title equals <code>title</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect All From List",
                "args": [
                    "locator"
                ],
                "doc": "<p>Unselects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Unselects all options from multi-selection list <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect Checkbox",
                "args": [
                    "locator"
                ],
                "doc": "<p>Removes the selection of checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if the checkbox is not selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Removes the selection of checkbox identified by <code>locator</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect Frame",
                "args": [],
                "doc": "<p>Sets the main frame as the current frame.</p>\n<p>In practice cancels the previous <a href=\"#Select%20Frame\" class=\"name\">Select Frame</a> call.</p>",
                "shortdoc": "Sets the main frame as the current frame.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect From List By Index",
                "args": [
                    "locator",
                    "*indexes"
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0. This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list <code>locator</code> by <code>indexes</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect From List By Label",
                "args": [
                    "locator",
                    "*labels"
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list <code>locator</code> by <code>labels</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unselect From List By Value",
                "args": [
                    "locator",
                    "*values"
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list <code>locator</code> by <code>values</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait And Click Button",
                "args": [
                    "locator: str",
                    "modifier: str = None"
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by <code>locator</code>, once it becomes visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Condition",
                "args": [
                    "condition",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a> for information about accessing content on pages.</p>\n<p>Fails if the timeout expires before the condition becomes true. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return document.title == \"New Title\"</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return jQuery.active == 0</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>style = document.querySelector('h1').style; return style.background == \"red\" &amp;&amp; style.color == \"white\"</td>\n</tr>\n</table>",
                "shortdoc": "Waits until <code>condition</code> is true or <code>timeout</code> expires.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Element Contains",
                "args": [
                    "locator",
                    "text",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> contains <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element <code>locator</code> contains <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Element Does Not Contain",
                "args": [
                    "locator",
                    "text",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> does not contain <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element <code>locator</code> does not contain <code>text</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Element Is Enabled",
                "args": [
                    "locator",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> is enabled.</p>\n<p>Element is considered enabled if it is not disabled nor read-only.</p>\n<p>Fails if <code>timeout</code> expires before the element is enabled. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Waits until the element <code>locator</code> is enabled.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Element Is Not Visible",
                "args": [
                    "locator",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> is not visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is not visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element <code>locator</code> is not visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Element Is Visible",
                "args": [
                    "locator",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> is visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element <code>locator</code> is visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Location Contains",
                "args": [
                    "expected",
                    "timeout=None",
                    "message=None"
                ],
                "doc": "<p>Waits until the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL contains <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Location Does Not Contain",
                "args": [
                    "location",
                    "timeout=None",
                    "message=None"
                ],
                "doc": "<p>Waits until the current URL does not contains <code>location</code>.</p>\n<p>The <code>location</code> argument contains value not expected in url.</p>\n<p>Fails if <code>timeout</code> expires before the location not contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL does not contains <code>location</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Location Is",
                "args": [
                    "expected",
                    "timeout=None",
                    "message=None"
                ],
                "doc": "<p>Waits until the current URL is <code>expected</code>.</p>\n<p>The <code>expected</code> argument is the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL is <code>expected</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Location Is Not",
                "args": [
                    "location",
                    "timeout=None",
                    "message=None"
                ],
                "doc": "<p>Waits until the current URL is not <code>location</code>.</p>\n<p>The <code>location</code> argument is the unexpected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is not. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL is not <code>location</code>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Page Contains",
                "args": [
                    "text",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until <code>text</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until <code>text</code> appears on the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Page Contains Element",
                "args": [
                    "locator",
                    "timeout=None",
                    "error=None",
                    "limit=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element <code>locator</code> appears on the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Page Does Not Contain",
                "args": [
                    "text",
                    "timeout=None",
                    "error=None"
                ],
                "doc": "<p>Waits until <code>text</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until <code>text</code> disappears from the current page.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Page Does Not Contain Element",
                "args": [
                    "locator",
                    "timeout=None",
                    "error=None",
                    "limit=None"
                ],
                "doc": "<p>Waits until the element <code>locator</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should not contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element <code>locator</code> disappears from the current page.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Cloud.AWS": {
        "name": "RPA.Cloud.AWS",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>AWS</cite> is a library for operating with Amazon AWS services S3, SQS,\nTextract and Comprehend.</p>\n<p>Services are initialized with keywords like <tt class=\"docutils literal\">Init S3 Client</tt> for S3.</p>\n<p><strong>AWS authentication</strong></p>\n<p>Authentication for AWS is set with <cite>key id</cite> and <cite>access key</cite> which can be given to the library\nin three different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, <tt class=\"docutils literal\">AWS_KEY_ID</tt> and <tt class=\"docutils literal\">AWS_KEY</tt>.</li>\n<li>Method 2 as keyword parameters to <tt class=\"docutils literal\">Init Textract Client</tt> for example.</li>\n<li>Method 3 as Robocloud vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p>Method 1. credentials using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get credentials\n</span><span class=\"p\">    </span><span class=\"c\"># with AWS_KEY and AWS_KEY_ID environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init S3 Client</span>\n</pre>\n<p>Method 2. credentials with keyword parameter</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">aws_key_id=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY_ID</span><span class=\"p\">}  </span><span class=\"s\">aws_key=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">  </span><span class=\"s\">robocloud_vault_name=aws</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">         </span><span class=\"s\">vault_name=aws</span><span class=\"p\">\n    </span><span class=\"nf\">Init Textract Client</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Requirements</strong></p>\n<p>The default installation depends on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\">boto3</a> library. Due to the size of the\ndependency, this library has been set as an optional package for <tt class=\"docutils literal\">rpaframework</tt>.</p>\n<p>This can be installed by opting in to the <cite>aws</cite> dependency:</p>\n<p><tt class=\"docutils literal\">pip install rpaframework[aws]</tt></p>\n<p><strong>Example</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">   </span><span class=\"s\">region=us-east-1</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}        </span><span class=\"s\">testbucket12213123123</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Upload a file into S3 bucket</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">\n    </span><span class=\"nf\">Upload File</span><span class=\"p\">      ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}   ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">file.pdf</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}         </span><span class=\"nf\">List Files</span><span class=\"p\">   ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "region: str = eu-west-1",
                    "robocloud_vault_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Analyze Document",
                "args": [
                    "image_file: str = None",
                    "json_file: str = None",
                    "bucket_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Analyzes an input document for relationships between detected items</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Analyzes an input document for relationships between detected items",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Bucket",
                "args": [
                    "bucket_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create S3 bucket with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create S3 bucket with name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Queue",
                "args": [
                    "queue_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">create queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create queue with name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Bucket",
                "args": [
                    "bucket_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete S3 bucket with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete S3 bucket with name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Files",
                "args": [
                    "bucket_name: str = None",
                    "files: list = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files deleted or <cite>False</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete files in the bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Message",
                "args": [
                    "receipt_handle: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete message in the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param receipt_handle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message handle to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete message in the queue",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Queue",
                "args": [
                    "queue_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete queue with name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Document Text",
                "args": [
                    "image_file: str = None",
                    "json_file: str = None",
                    "bucket_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detects text in the input document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detects text in the input document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Entities",
                "args": [
                    "text: str = None",
                    "lang=en"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Inspects text for named entities, and returns information about them</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Inspects text for named entities, and returns information about them",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Sentiment",
                "args": [
                    "text: str = None",
                    "lang=en"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Inspects text and returns an inference of the prevailing sentiment</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Inspects text and returns an inference of the prevailing sentiment",
                "tags": [],
                "matched": true
            },
            {
                "name": "Download Files",
                "args": [
                    "bucket_name: str = None",
                    "files: list = None",
                    "target_directory: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Download files from bucket to local filesystem</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of S3 object names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location for the downloaded files, default\ncurrent directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files downloaded</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Download files from bucket to local filesystem",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Cells",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>[summary]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">[description]</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "[summary]",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Document Analysis",
                "args": [
                    "job_id: str = None",
                    "max_results: int = 1000",
                    "next_token: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Analysis</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Analysis</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${i}</span><span class=\"p\">    </span><span class=\"c\">IN RANGE</span><span class=\"p\">    </span><span class=\"c\">50</span><span class=\"p\">\n    </span><span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Get Document Analysis</span><span class=\"p\">  </span><span class=\"c\">${jobid}</span><span class=\"p\">\n    </span><span class=\"c\">Exit For Loop If</span><span class=\"p\">    </span><span class=\"c\">&quot;${response}[JobStatus]&quot; == &quot;SUCCEEDED&quot;</span><span class=\"p\">\n    </span><span class=\"c\">Sleep</span><span class=\"p\">    </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get the results of Textract asynchronous <cite>Document Analysis</cite> operation",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Document Text Detection",
                "args": [
                    "job_id: str = None",
                    "max_results: int = 1000",
                    "next_token: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Text Detection</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Text Detection</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${i}</span><span class=\"p\">    </span><span class=\"c\">IN RANGE</span><span class=\"p\">    </span><span class=\"c\">50</span><span class=\"p\">\n    </span><span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Get Document Text Detection</span><span class=\"p\">    </span><span class=\"c\">${jobid}</span><span class=\"p\">\n    </span><span class=\"c\">Exit For Loop If</span><span class=\"p\">    </span><span class=\"c\">&quot;${response}[JobStatus]&quot; == &quot;SUCCEEDED&quot;</span><span class=\"p\">\n    </span><span class=\"c\">Sleep</span><span class=\"p\">    </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get the results of Textract asynchronous <cite>Document Text Detection</cite> operation",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Pages And Text",
                "args": [
                    "textract_response: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get pages and text out of Textract response json</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param textract_response:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">JSON from Textract</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary, page numbers as keys and value is a list\nof text lines</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get pages and text out of Textract response json",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Tables",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>[summary]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">[description]</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "[summary]",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Words",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>[summary]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">[description]</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "[summary]",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Comprehend Client",
                "args": [
                    "aws_key_id: str = None",
                    "aws_key: str = None",
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize AWS Comprehend client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize AWS Comprehend client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init S3 Client",
                "args": [
                    "aws_key_id: str = None",
                    "aws_key: str = None",
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize AWS S3 client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize AWS S3 client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Sqs Client",
                "args": [
                    "aws_key_id: str = None",
                    "aws_key: str = None",
                    "region: str = None",
                    "queue_url: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize AWS SQS client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQS queue url</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize AWS SQS client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Textract Client",
                "args": [
                    "aws_key_id: str = None",
                    "aws_key: str = None",
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize AWS Textract client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize AWS Textract client",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Buckets",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List all buckets for this account</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of buckets</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List all buckets for this account",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Files",
                "args": [
                    "bucket_name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List files in the bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Receive Message",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Receive message from queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">message as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Receive message from queue",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Message",
                "args": [
                    "message: str = None",
                    "message_attributes: dict = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send message to the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">body of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param message_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">attributes of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">send message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Send message to the queue",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Robocloud Vault",
                "args": [
                    "vault_name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set Robocloud Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocloud Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set Robocloud Vault name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Start Document Analysis",
                "args": [
                    "bucket_name_in: str = None",
                    "object_name_in: str = None",
                    "object_version_in: str = None",
                    "bucket_name_out: str = None",
                    "prefix_object_out: str = textract_output"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Starts the asynchronous analysis of an input document\nfor relationships between detected items such as key-value pairs,\ntables, and selection elements.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Analysis</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n</div>",
                "shortdoc": "Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Start Document Text Detection",
                "args": [
                    "bucket_name_in: str = None",
                    "object_name_in: str = None",
                    "object_version_in: str = None",
                    "bucket_name_out: str = None",
                    "prefix_object_out: str = textract_output"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Starts the asynchronous detection of text in a document.\nAmazon Textract can detect lines of text and the words that make up a\nline of text.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Text Detection</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n</div>",
                "shortdoc": "Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upload File",
                "args": [
                    "bucket_name: str = None",
                    "filename: str = None",
                    "object_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upload single file into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath for the file to be uploaded</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the object in the bucket, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple of upload status and error</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>object_name</cite> is not given then basename of the file is\nused as <cite>object_name</cite>.</p>\n</div>\n</div>",
                "shortdoc": "Upload single file into bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upload Files",
                "args": [
                    "bucket_name: str = None",
                    "files: list = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upload multiple files into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files (2 possible ways, see above)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files uploaded</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>Giving files as list of filepaths:</dt>\n<dd>['/path/to/file1.txt', '/path/to/file2.txt']</dd>\n<dt>Giving files as list of dictionaries (including filepath and object name):</dt>\n<dd>[{'filepath':'/path/to/file1.txt', 'object_name': 'file1.txt'},\n{'filepath': '/path/to/file2.txt', 'object_name': 'file2.txt'}]</dd>\n</dl>\n</div>\n</div>",
                "shortdoc": "Upload multiple files into bucket",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Cloud.Azure": {
        "name": "RPA.Cloud.Azure",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Azure</cite> is a library for operating with Microsoft Azure API endpoints.</p>\n<p>List of supported service names:</p>\n<ul class=\"simple\">\n<li>computervision (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/\">Azure Computer Vision API</a>)</li>\n<li>face (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/\">Azure Face API</a>)</li>\n<li>speech (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/\">Azure Speech Services API</a>)</li>\n<li>textanalytics (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/\">Azure Text Analytics API</a>)</li>\n</ul>\n<p><strong>Azure authentication</strong></p>\n<p>Authentication for Azure is set with <cite>service subscription key</cite> which can be given to the library\nin two different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, either service specific environment variable\nfor example <tt class=\"docutils literal\">AZURE_TEXTANALYTICS_KEY</tt> or with common key <tt class=\"docutils literal\">AZURE_SUBSCRIPTION_KEY</tt> which\nwill be used for all the services.</li>\n<li>Method 2 as Robocloud vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p>Method 1. subscription key using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get subscription key\n</span><span class=\"p\">    </span><span class=\"c\"># with AZURE_TEXTANALYTICS_KEY or AZURE_SUBSCRIPTION_KEY environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init Text Analytics Service</span>\n</pre>\n<p>Method 2. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">  </span><span class=\"s\">robocloud_vault_name=azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 2. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">          </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>References</strong></p>\n<p>List of supported language locales - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/language-support#speech-to-text\">Azure locale list</a></p>\n<p>List of supported region identifiers - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/regions#speech-to-text-text-to-speech-and-translation\">Azure region list</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>This is a section which describes how to use the library in your\nRobot Framework tasks.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}   </span><span class=\"s\">IMAGE_URL</span><span class=\"p\">\n${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}    </span><span class=\"s\">Faces,ImageType</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Visioning image information</span><span class=\"p\">\n   </span><span class=\"nf\">Init Computer Vision Service</span><span class=\"p\">\n   &amp;{</span><span class=\"nv\">result</span><span class=\"p\">}   </span><span class=\"nf\">Vision Analyze</span><span class=\"p\">  </span><span class=\"s\">image_url=</span><span class=\"p\">${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}  </span><span class=\"s\">visual_features=</span><span class=\"p\">${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}\n   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}    </span><span class=\"nf\">Set Variable</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[faces]</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">face</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}\n      </span><span class=\"nf\">Log</span><span class=\"p\">  </span><span class=\"s\">Age: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[age], Gender: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[gender], Rectangle: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[faceRectangle]</span><span class=\"p\">\n   </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>This is a section which describes how to use the library in your\nown Python modules.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Azure</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_text_analytics_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_face_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_computer_vision_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_speech_service</span><span class=\"p\">(</span><span class=\"s2\">&quot;westeurope&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sentiment_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;The rooms were wonderful and the staff was helpful.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">detect_face</span><span class=\"p\">(</span>\n   <span class=\"n\">image_file</span><span class=\"o\">=</span><span class=\"n\">PATH_TO_FILE</span><span class=\"p\">,</span>\n   <span class=\"n\">face_attributes</span><span class=\"o\">=</span><span class=\"s2\">&quot;age,gender,smile,hair,facialHair,emotion&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n   <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;gender&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;age&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">gender</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">age</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">vision_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">image_url</span><span class=\"o\">=</span><span class=\"n\">URL_TO_IMAGE</span><span class=\"p\">,</span>\n   <span class=\"n\">visual_features</span><span class=\"o\">=</span><span class=\"s2\">&quot;Faces,ImageType&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'metadata'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n   <span class=\"sa\">f</span><span class=\"s2\">&quot;Image dimensions meta['width']</span><span class=\"si\">}</span><span class=\"s2\">x</span><span class=\"si\">{</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">'height'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> pixels&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;faces&quot;</span><span class=\"p\">]:</span>\n   <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;left&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;top&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;width&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;height&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'gender'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (left=</span><span class=\"si\">{</span><span class=\"n\">left</span><span class=\"si\">}</span><span class=\"s2\">, top=</span><span class=\"si\">{</span><span class=\"n\">top</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (width=</span><span class=\"si\">{</span><span class=\"n\">width</span><span class=\"si\">}</span><span class=\"s2\">, height=</span><span class=\"si\">{</span><span class=\"n\">height</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">text_to_speech</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Developer tools for open-source RPA leveraging the Robot Framework ecosystem&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">neural_voice_style</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheerful&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">target_file</span><span class=\"o\">=</span><span class=\"s1\">'output.mp3'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "region: str = northeurope",
                    "robocloud_vault_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Detect Face",
                "args": [
                    "image_file: str = None",
                    "image_url: str = None",
                    "face_attributes: str = None",
                    "face_landmarks: bool = False",
                    "recognition_model: str = recognition_02",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect facial attributes in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of attributes,\nfor example. &quot;age,gender,smile&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_landmarks:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">return face landmarks of the detected faces\nor not. The default value is <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recognition_model:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">model used by Azure to detech faces, options\nare &quot;recognition_01&quot; or &quot;recognition_02&quot;, default is &quot;recognition_02&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>Read more about <cite>face_attributes</cite> at <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/concepts/face-detection\">Face detection explained</a>:</p>\n<ul class=\"simple\">\n<li>age</li>\n<li>gender</li>\n<li>smile</li>\n<li>facialHair</li>\n<li>headPose</li>\n<li>glasses</li>\n<li>emotion</li>\n<li>hair</li>\n<li>makeup</li>\n<li>accessories</li>\n<li>blur</li>\n<li>exposure</li>\n<li>nouse</li>\n</ul>\n</div>\n</div>",
                "shortdoc": "Detect facial attributes in the image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Language",
                "args": [
                    "text: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect languages in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect languages in the given text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Entities",
                "args": [
                    "text: str",
                    "language: str = None",
                    "json_file=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect entities in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect entities in the given text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Computer Vision Service",
                "args": [
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Computer Vision</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Azure Computer Vision",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Face Service",
                "args": [
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Face</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Azure Face",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Speech Service",
                "args": [
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Speech</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Azure Speech",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Text Analytics Service",
                "args": [
                    "region: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Azure Text Analyticts</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Azure Text Analyticts",
                "tags": [],
                "matched": true
            },
            {
                "name": "Key Phrases",
                "args": [
                    "text: str",
                    "language: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect key phrases in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect key phrases in the given text",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Supported Voices",
                "args": [
                    "locale: str = None",
                    "neural_only: bool = False",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List supported voices for Azure API Speech Services.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">list only voices specific to locale, by default return all voices</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_only:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><cite>True</cite> if only neural voices should be returned,\n<cite>False</cite> by default</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">voices in json</td>\n</tr>\n</tbody>\n</table>\n<p>Available voice selection might differ between regions.</p>\n</div>\n</div>",
                "shortdoc": "List supported voices for Azure API Speech Services.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Sentiment Analyze",
                "args": [
                    "text: str",
                    "language: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Analyze sentiments in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Analyze sentiments in the given text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Robocloud Vault",
                "args": [
                    "vault_name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set Robocloud Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocloud Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set Robocloud Vault name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Text To Speech",
                "args": [
                    "text: str",
                    "language: str = en-US",
                    "name: str = en-US-AriaRUS",
                    "gender: str = FEMALE",
                    "encoding: str = MP3",
                    "neural_voice_style: typing.Any = None",
                    "target_file: str = synthesized.mp3"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Synthesize speech synchronously</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">input text to synthesize</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">voice language, defaults to &quot;en-US&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">voice name, defaults to &quot;en-US-AriaRUS&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param gender:</th><td class=\"field-body\">voice gender, defaults to &quot;FEMALE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">result encoding type, defaults to &quot;MP3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_voice_style:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then neural voice is used,\nexample style. &quot;cheerful&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save synthesized output to file,\ndefaults to &quot;synthesized.mp3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">synthesized output in bytes</td>\n</tr>\n</tbody>\n</table>\n<p>Neural voices are only supported for Speech resources created in\nEast US, South East Asia, and West Europe regions.</p>\n</div>\n</div>",
                "shortdoc": "Synthesize speech synchronously",
                "tags": [],
                "matched": true
            },
            {
                "name": "Vision Analyze",
                "args": [
                    "image_file: str = None",
                    "image_url: str = None",
                    "visual_features: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Identify features in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param visual_features:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of features,\nfor example. &quot;Categories,Description,Color&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>See <a class=\"reference external\" href=\"https://westcentralus.dev.cognitive.microsoft.com/docs/services/computer-vision-v3-ga\">Computer Vision API</a> for valid feature names and their explanations:</p>\n<ul class=\"simple\">\n<li>Adult</li>\n<li>Brands</li>\n<li>Categories</li>\n<li>Color</li>\n<li>Description</li>\n<li>Faces</li>\n<li>ImageType</li>\n<li>Objects</li>\n<li>Tags</li>\n</ul>\n</div>\n</div>",
                "shortdoc": "Identify features in the image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Vision Describe",
                "args": [
                    "image_file: str = None",
                    "image_url: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Describe image with tags and captions</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Describe image with tags and captions",
                "tags": [],
                "matched": true
            },
            {
                "name": "Vision Detect Objects",
                "args": [
                    "image_file: str = None",
                    "image_url: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect objects in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect objects in the image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Vision Ocr",
                "args": [
                    "image_file: str = None",
                    "image_url: str = None",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Optical Character Recognition (OCR) detects text in an image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Optical Character Recognition (OCR) detects text in an image",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Cloud.Google": {
        "name": "RPA.Cloud.Google",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Google</cite> is a library for operating with Google API endpoints.</p>\n<p>Usage requires the following steps:</p>\n<ul class=\"simple\">\n<li>Create a GCP project</li>\n<li>Create a service account key file (JSON) and save it to a place the robot\ncan use it</li>\n<li>Enable APIs</li>\n<li>Install rpaframework[google]</li>\n</ul>\n<p><strong>Google authentication</strong></p>\n<p>Authentication for Google is set with <cite>service credentials JSON file</cite> which can be given to the library\nin three different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, <tt class=\"docutils literal\">GOOGLE_APPLICATION_CREDENTIALS</tt> with path to JSON file.</li>\n<li>Method 2 as keyword parameter to <tt class=\"docutils literal\">Init Storage Client</tt> for example.</li>\n<li>Method 3 as Robocloud vault secret. The vault name and secret key name needs to be given in library init\nor with keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret value should contain JSON file contents.</li>\n</ul>\n<p>Method 1. service credentials using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for Vision Client, expecting to get JSON\n</span><span class=\"p\">    </span><span class=\"c\"># with GOOGLE_APPLICATION_CREDENTIALS environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init Vision Client</span>\n</pre>\n<p>Method 2. service credentials with keyword parameter</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Speech To Text Client</span><span class=\"p\">  </span><span class=\"s\">/path/to/service_credentials.json</span>\n</pre>\n<p>Method 3. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n...       </span><span class=\"s\">robocloud_vault_name=googlecloud</span><span class=\"p\">\n...       </span><span class=\"s\">robocloud_vault_secret_key=servicecreds</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Storage Client</span><span class=\"p\">   </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">   </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">  </span><span class=\"s\">vault_secret_key=servicecreds</span><span class=\"p\">\n    </span><span class=\"nf\">Init Storage Client</span><span class=\"p\">   </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Requirements</strong></p>\n<p>Due to number of dependencies related to Google Cloud services this library has been set as\nan optional package for <tt class=\"docutils literal\">rpaframework</tt>.</p>\n<p>This can be installed by opting in to the <cite>google</cite> dependency:</p>\n<p><tt class=\"docutils literal\">pip install rpaframework[google]</tt></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">SERVICE CREDENTIALS</span><span class=\"p\">}    ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">service_credentials.json</span><span class=\"p\">\n${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}            </span><span class=\"s\">testbucket12213123123</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Upload a file into a new storage bucket</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Init Storage Client</span><span class=\"p\">   ${</span><span class=\"nv\">SERVICE CREDENTIALS</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Bucket</span><span class=\"p\">    ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">Upload File</span><span class=\"p\">      ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}   ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">file.pdf</span><span class=\"p\">  </span><span class=\"s\">myfile.pdf</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}         </span><span class=\"nf\">List Files</span><span class=\"p\">   ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Cloud.Google</span> <span class=\"kn\">import</span> <span class=\"n\">Google</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Google</span>\n<span class=\"n\">service_credentials</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/service_credentials.json'</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_vision_client</span><span class=\"p\">(</span><span class=\"n\">service_credentials</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_text_to_speech</span><span class=\"p\">(</span><span class=\"n\">service_credentials</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">detect_text</span><span class=\"p\">(</span><span class=\"s1\">'imagefile.png'</span><span class=\"p\">,</span> <span class=\"s1\">'result.json'</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">synthesize_speech</span><span class=\"p\">(</span><span class=\"s1\">'I want this said aloud'</span><span class=\"p\">,</span> <span class=\"n\">target_file</span><span class=\"o\">=</span><span class=\"s1\">'said.mp3'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "robocloud_vault_name: str = None",
                    "robocloud_vault_secret_key: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Analyze Sentiment",
                "args": [
                    "text_file: str",
                    "file_type: str = text",
                    "json_file: str = None",
                    "lang=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Analyze sentiment in a text file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param text_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source text file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the source, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Analyze sentiment in a text file",
                "tags": [],
                "matched": true
            },
            {
                "name": "Annotate Image",
                "args": [
                    "image_uri: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Annotate image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Annotate image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Annotate Video",
                "args": [
                    "video_uri: str = None",
                    "video_file: str = None",
                    "json_file: str = None",
                    "features: list = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Annotate video</p>\n<p>Possible values for features:\n- FEATURE_UNSPECIFIED, Unspecified.\n- LABEL_DETECTION, Label detection. Detect objects, such as dog or flower.\n- SHOT_CHANGE_DETECTION, Shot change detection.\n- EXPLICIT_CONTENT_DETECTION, Explicit content detection.\n- SPEECH_TRANSCRIPTION, Speech transcription.\n- TEXT_DETECTION, OCR text detection and tracking.\n- OBJECT_TRACKING, Object detection and tracking.\n- LOGO_RECOGNITION, Logo detection, tracking, and recognition.</p>\n<p>If <cite>video_uri</cite> is given then that is used even if <cite>video_file</cite> is None.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param video_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param video_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to video</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param features:</th><td class=\"field-body\">list of annotation features to detect,\ndefaults to [&quot;LABEL_DETECTION&quot;, &quot;SHOT_CHANGE_DETECTION&quot;]</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">annotate result</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Annotate video",
                "tags": [],
                "matched": true
            },
            {
                "name": "Classify Text",
                "args": [
                    "text_file",
                    "json_file",
                    "lang=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Classify text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param text_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source text file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the source, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">classify response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Classify text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Clear Values",
                "args": [
                    "sheet_id: str",
                    "sheet_range: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Clear cell values for range of cells within a sheet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Clear cell values for range of cells within a sheet",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Bucket",
                "args": [
                    "bucket_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create Google Cloud Storage bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">bucket</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create Google Cloud Storage bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Sheet",
                "args": [
                    "title: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create empty sheet with a title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created <cite>sheet_id</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create empty sheet with a title",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Bucket",
                "args": [
                    "bucket_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete Google Cloud Storage bucket</p>\n<p>Bucket needs to be empty before it can be deleted.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete Google Cloud Storage bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Files",
                "args": [
                    "bucket_name: str",
                    "files: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete files in the bucket</p>\n<p>Files need to be object name in the bucket.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">single file, list of files or\ncomma separated list of files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files which could not be deleted,\nor True if all were deleted</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete files in the bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Document",
                "args": [
                    "image_file: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Labels",
                "args": [
                    "image_file: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect labels in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect labels in the image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Detect Text",
                "args": [
                    "image_file: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect text in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect text in the image",
                "tags": [],
                "matched": true
            },
            {
                "name": "Download Files",
                "args": [
                    "bucket_name: str",
                    "files: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Download files from a bucket</p>\n<p>Example <cite>files</cite>:\nfiles = {&quot;mytestimg&quot;: &quot;image1.png&quot;, &quot;mydoc&quot;: &quot;google.pdf</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of object names or dictionary of\nobject names and target files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files which could not be downloaded, or\nTrue if all were downloaded</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Download files from a bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Face Detection",
                "args": [
                    "image_uri: str",
                    "json_file: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Detect faces</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Detect faces",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Bucket",
                "args": [
                    "bucket_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Google Cloud Storage bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">bucket</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Google Cloud Storage bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Values",
                "args": [
                    "sheet_id: str",
                    "sheet_range: str",
                    "value_render_option: str = UNFORMATTED_VALUE",
                    "datetime_render_option: str = FORMATTED_STRING"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get values from the range in the sheet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param value_render_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">how values should be represented\nin the output defaults to &quot;UNFORMATTED_VALUE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_render_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ow dates, times, and durations should\nbe represented in the outpu, defaults to &quot;FORMATTED_STRING&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get values from the range in the sheet",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Natural Language Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Natural Language client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Natural Language client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Sheets Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Sheets client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Sheets client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Speech To Text Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Speech to Text client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Speech to Text client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Storage Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Storage client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Storage client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Text To Speech Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Text to Speech client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Text to Speech client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Translation Client",
                "args": [
                    "service_credentials_file: str = None",
                    "project_identifier: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Translation client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param project_identifier:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">identifier for Translation project</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Translation client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Video Intelligence Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Video Intelligence client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Video Intelligence client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Init Vision Client",
                "args": [
                    "service_credentials_file: str = None",
                    "use_robocloud_vault: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize Google Cloud Vision client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_credentials_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to credentials JSON</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use json stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Initialize Google Cloud Vision client",
                "tags": [],
                "matched": true
            },
            {
                "name": "Insert Values",
                "args": [
                    "sheet_id: str",
                    "sheet_range: str",
                    "values: list",
                    "major_dimension: str = COLUMNS",
                    "value_input_option: str = USER_ENTERED"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Insert values into sheet cells</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">list of values to insert into sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param major_dimension:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">major dimension of the values, default <cite>COLUMNS</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param value_input_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">controls whether input strings are parsed or not,\ndefault <cite>USER_ENTERED</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Insert values into sheet cells",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Buckets",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List Google Cloud Storage buckets</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of buckets</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List Google Cloud Storage buckets",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Files",
                "args": [
                    "bucket_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of object names in the bucket</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List files in the bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Supported Voices",
                "args": [
                    "language_code: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List supported voices for the speech</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param language_code:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">voice languages to list, defaults to None (all)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of supported voices</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List supported voices for the speech",
                "tags": [],
                "matched": true
            },
            {
                "name": "Recognize",
                "args": [
                    "audio_file_uri",
                    "encoding: str = FLAC",
                    "language_code: str = en_US",
                    "audio_channel_count=2"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Recognize text in the audio file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param audio_file_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">recognized texts</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Recognize text in the audio file",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Robocloud Vault",
                "args": [
                    "vault_name",
                    "vault_secret_key"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set Robocloud Vault name and secret key name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocloud Vault name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_secret_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Rococloud Vault secret key name</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set Robocloud Vault name and secret key name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Synthesize Speech",
                "args": [
                    "text",
                    "language=en-US",
                    "name=en-US-Standard-B",
                    "gender=MALE",
                    "encoding=MP3",
                    "target_file=synthesized.mp3"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Synthesize speech synchronously</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">input text to synthesize</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">voice language, defaults to &quot;en-US&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">voice name, defaults to &quot;en-US-Standard-B&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param gender:</th><td class=\"field-body\">voice gender, defaults to &quot;MALE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">result encoding type, defaults to &quot;MP3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save synthesized output to file,\ndefaults to &quot;synthesized.mp3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">synthesized output in bytes</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Synthesize speech synchronously",
                "tags": [],
                "matched": true
            },
            {
                "name": "Translate",
                "args": [
                    "text: typing.Any",
                    "source_language: str = None",
                    "target_language: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Translate text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text to translate</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_language:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">language code, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_language:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">language code, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">translated text</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Translate text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upload File",
                "args": [
                    "bucket_name: str",
                    "filename: str",
                    "target_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upload a file into a bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to upload file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target object name</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Upload a file into a bucket",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upload Files",
                "args": [
                    "bucket_name: str",
                    "files: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upload files into a bucket</p>\n<p>Example <cite>files</cite>:\nfiles = {&quot;mytestimg&quot;: &quot;image1.png&quot;, &quot;mydoc&quot;: &quot;google.pdf&quot;}</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">dictionary of object names and filepaths</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Upload files into a bucket",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Database": {
        "name": "RPA.Database",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Database</cite> is a library for handling different database operations.</p>\n<p>All database operations are supported. Keywords <cite>Query</cite> and <cite>Get Rows</cite>\nreturn values by default in <cite>RPA.Table</cite> format.</p>\n<p>Library is compatible with any Database API Specification 2.0 module.</p>\n<p>References:</p>\n<ul class=\"simple\">\n<li>Database API Specification 2.0 - <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0249/\">http://www.python.org/dev/peps/pep-0249/</a></li>\n<li>Lists of DB API 2.0 - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseInterfaces\">http://wiki.python.org/moin/DatabaseInterfaces</a></li>\n<li>Python Database Programming - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseProgramming/\">http://wiki.python.org/moin/DatabaseProgramming/</a></li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get Orders From Database</span><span class=\"p\">\n    </span><span class=\"nf\">Connect To Database</span><span class=\"p\">  </span><span class=\"s\">pymysql</span><span class=\"p\">  </span><span class=\"s\">tester</span><span class=\"p\">  </span><span class=\"s\">user</span><span class=\"p\">  </span><span class=\"s\">password</span><span class=\"p\">  </span><span class=\"s\">127.0.0.1</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}            </span><span class=\"nf\">Query</span><span class=\"p\">    </span><span class=\"s\">Select * FROM incoming_orders</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">order</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}\n        </span><span class=\"nf\">Handle Order</span><span class=\"p\">  ${</span><span class=\"nv\">order</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocloud.Secrets</span> <span class=\"kn\">import</span> <span class=\"n\">FileSecrets</span>\n\n<span class=\"n\">filesecrets</span> <span class=\"o\">=</span> <span class=\"n\">FileSecrets</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets.json&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">filesecrets</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;databasesecrets&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">()</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect_to_database</span><span class=\"p\">(</span><span class=\"s1\">'pymysql'</span><span class=\"p\">,</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;DATABASE&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;USERNAME&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'127.0.0.1'</span>\n                    <span class=\"p\">)</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM incoming_orders&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">orders</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Call Stored Procedure",
                "args": [
                    "name",
                    "params=None",
                    "sanstran=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Call stored procedure with name and params.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">procedure name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param params:</th><td class=\"field-body\">parameters for the procedure as a list, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{params}</span><span class=\"p\">     </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">FirstParam</span><span class=\"p\">   </span><span class=\"c\">SecondParam</span><span class=\"p\">   </span><span class=\"c\">ThirdParam</span><span class=\"p\">\n</span><span class=\"c\">&#64;{results}</span><span class=\"p\">    </span><span class=\"c\">Call Stored Procedure</span><span class=\"p\">   </span><span class=\"c\">mystpr</span><span class=\"p\">  </span><span class=\"c\">${params}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Call stored procedure with name and params.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Connect To Database",
                "args": [
                    "module_name=None",
                    "database=None",
                    "username=None",
                    "password=None",
                    "host=None",
                    "port=None",
                    "charset=None",
                    "config_file=db.cfg"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to database using DB API 2.0 module.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param module_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">database module to use</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">name of the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param host:</th><td class=\"field-body\">SQL server address</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param port:</th><td class=\"field-body\">SQL server port</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param charset:</th><td class=\"field-body\">for example, &quot;utf-8&quot;, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param config_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location of configuration file, defaults to &quot;db.cfg&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">database</span><span class=\"p\">  </span><span class=\"c\">username</span><span class=\"p\">  </span><span class=\"c\">password</span><span class=\"p\">  </span><span class=\"c\">host</span><span class=\"p\">  </span><span class=\"c\">port</span><span class=\"p\">\n</span><span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}resources${/}dbconfig.cfg</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Connect to database using DB API 2.0 module.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Description",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get description of the SQL table</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${db_description}</span><span class=\"p\">      </span><span class=\"c\">Description</span><span class=\"p\">  </span><span class=\"c\">mytable</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get description of the SQL table",
                "tags": [],
                "matched": true
            },
            {
                "name": "Disconnect From Database",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close connection to SQL database</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${result}</span><span class=\"p\">              </span><span class=\"c\">Query</span><span class=\"p\">   </span><span class=\"c\">Select firstname, lastname FROM table</span><span class=\"p\">\n</span><span class=\"c\">Disconnect From Database</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Close connection to SQL database",
                "tags": [],
                "matched": true
            },
            {
                "name": "Execute Sql Script",
                "args": [
                    "filename",
                    "sanstran=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Execute content of SQL script as SQL commands.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to SQL script to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Execute SQL Script</span><span class=\"p\">   </span><span class=\"c\">script.sql</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Execute content of SQL script as SQL commands.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Number Of Rows",
                "args": [
                    "table",
                    "conditions=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get number of rows in a table. Conditions can be given\nas arguments for WHERE clause.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">restrictions for selections, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">\n</span><span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">column1=5 and column2='x'</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get number of rows in a table. Conditions can be given as arguments for WHERE clause.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Rows",
                "args": [
                    "table",
                    "columns=None",
                    "conditions=None",
                    "as_table=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get rows from table. Columns and conditions can be\nset to filter result.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">name of columns to return, defaults to <cite>None</cite>\nmeans that all columns are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">limiting result by WHERE clause, defaults to <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">if result should be instance of <tt class=\"docutils literal\">Table</tt>, defaults to <cite>True</cite>\n<cite>False</cite> means that return type would be <cite>list</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">  </span><span class=\"c\">columns=id,name</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">columns=id</span><span class=\"p\">  </span><span class=\"c\">conditions=column1='newvalue'</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">conditions=column2='updatedvalue'</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get rows from table. Columns and conditions can be set to filter result.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Query",
                "args": [
                    "statement",
                    "assertion=None",
                    "sanstran=False",
                    "as_table=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Make a SQL query.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL statement to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param assertion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">assert on query result, row_count or columns.\nWorks only for SELECT statements Defaults to None.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">if result should be instance of <tt class=\"docutils literal\">Table</tt>, defaults to <cite>True</cite>\n<cite>False</cite> means that return type would be <cite>list</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">   </span><span class=\"c\">Select firstname, lastname FROM table</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${row}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{RES}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">${row}</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">row_count &gt; ${EXPECTED}</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">'arvo' in columns</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">columns == ['id', 'arvo']</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Make a SQL query.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Auto Commit",
                "args": [
                    "autocommit=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set database auto commit mode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autocommit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">boolean value for auto commit, defaults to True</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Auto Commit</span><span class=\"p\">             </span><span class=\"c\"># auto commit is set on\nSet Auto Commit</span><span class=\"p\">   </span><span class=\"c\">False</span><span class=\"p\">     </span><span class=\"c\"># auto commit is turned off</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set database auto commit mode.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Desktop": {
        "name": "RPA.Desktop",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Desktop</cite> is a cross-platform library for navigating and interacting with\ndesktop environments. It can be used to automate applications through\nthe same interfaces that are available to human users.</p>\n<p>The library includes the following features:</p>\n<ul class=\"simple\">\n<li>Mouse and keyboard input emulation</li>\n<li>Starting and stopping applications</li>\n<li>Finding elements through image template matching</li>\n<li>Taking screenshots</li>\n<li>Clipboard management</li>\n</ul>\n<dl class=\"docutils\">\n<dt><strong>Note:</strong> Windows element selectors are not currently supported,</dt>\n<dd>and require the use of <tt class=\"docutils literal\">RPA.Desktop.Windows</tt></dd>\n</dl>\n<p><strong>Locating elements</strong></p>\n<p>To automate actions on the desktop, a robot needs to interact with various\ngraphical elements such as buttons or input fields. The positions of these\nelements can be found using a feature called <cite>locators</cite>.</p>\n<p>A locator describes the properties or features of an element. This information\ncan be later used to locate similar elements even when window positions or\nstates change.</p>\n<p>The currently supported locator types are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"12%\" />\n<col width=\"21%\" />\n<col width=\"67%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Arguments</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>alias</td>\n<td>name (str)</td>\n<td>A named locator, the default.</td>\n</tr>\n<tr><td>image</td>\n<td>path (str)</td>\n<td>Image of an element that is matched to current screen content</td>\n</tr>\n<tr><td>coordinates</td>\n<td>x (int), y (int)</td>\n<td>Pixel coordinates as absolute position</td>\n</tr>\n<tr><td>offset</td>\n<td>x (int), y (int)</td>\n<td>Pixel coordinates relative to current mouse position</td>\n</tr>\n</tbody>\n</table>\n<p>A locator is defined by its type and arguments, divided by a colon.\nSome example usages are shown below. Note that the prefix for alias can\nbe omitted as its the default type.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">alias:SpareBin.Login</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">SpareBin.Login</span><span class=\"p\">\n\n</span><span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">image:%{ROBOT_ROOT}/logo.png</span><span class=\"p\">\n</span><span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">offset:200,0</span><span class=\"p\">\n</span><span class=\"c\">Click</span>\n</pre>\n<p><strong>Named locators</strong></p>\n<p>The library supports storing locators in a database, which contains\nall of the required fields and various bits of metadata. This enables\nhaving one source of truth, which can be updated if a website's or applications's\nUI changes. Robot Framework scripts can then only contain a reference\nto a stored locator by name.</p>\n<p>The main way to create named locators is with <a class=\"reference external\" href=\"https://robocorp.com/docs/product-manuals/robocorp-lab/robocorp-lab-overview\">Robocorp Lab</a>.</p>\n<p><strong>Keyboard and mouse</strong></p>\n<p>Keyboard keywords can emulate typing text, but also pressing various function keys.\nThe name of a key is case-insensitive and spaces will be converted to underscores,\ni.e. the key <tt class=\"docutils literal\">Page Down</tt> and <tt class=\"docutils literal\">page_down</tt> are equivalent.</p>\n<p>The following function keys are supported:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"16%\" />\n<col width=\"84%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Key</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>shift</td>\n<td>A generic Shift key. This is a modifier.</td>\n</tr>\n<tr><td>shift_l</td>\n<td>The left Shift key. This is a modifier.</td>\n</tr>\n<tr><td>shift_r</td>\n<td>The right Shift key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl</td>\n<td>A generic Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl_l</td>\n<td>he left Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl_r</td>\n<td>The right Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>alt</td>\n<td>A generic Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_l</td>\n<td>The left Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_r</td>\n<td>The right Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_gr</td>\n<td>The AltGr key. This is a modifier.</td>\n</tr>\n<tr><td>cmd</td>\n<td>A generic command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>cmd_l</td>\n<td>The left command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>cmd_r</td>\n<td>The right command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>up</td>\n<td>An up arrow key.</td>\n</tr>\n<tr><td>down</td>\n<td>A down arrow key.</td>\n</tr>\n<tr><td>left</td>\n<td>A left arrow key.</td>\n</tr>\n<tr><td>right</td>\n<td>A right arrow key.</td>\n</tr>\n<tr><td>enter</td>\n<td>The Enter or Return key.</td>\n</tr>\n<tr><td>space</td>\n<td>The Space key.</td>\n</tr>\n<tr><td>tab</td>\n<td>The Tab key.</td>\n</tr>\n<tr><td>backspace</td>\n<td>The Backspace key.</td>\n</tr>\n<tr><td>delete</td>\n<td>The Delete key.</td>\n</tr>\n<tr><td>esc</td>\n<td>The Esc key.</td>\n</tr>\n<tr><td>home</td>\n<td>The Home key.</td>\n</tr>\n<tr><td>end</td>\n<td>The End key.</td>\n</tr>\n<tr><td>page_down</td>\n<td>The Page Down key.</td>\n</tr>\n<tr><td>page_up</td>\n<td>The Page Up key.</td>\n</tr>\n<tr><td>caps_lock</td>\n<td>The Caps Lock key.</td>\n</tr>\n<tr><td>f1 to f20</td>\n<td>The function keys.</td>\n</tr>\n<tr><td>insert</td>\n<td>The Insert key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>menu</td>\n<td>The Menu key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>num_lock</td>\n<td>The Num Lock key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>pause</td>\n<td>The Pause / Break key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>print_screen</td>\n<td>The Print Screen key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>scroll_lock</td>\n<td>The Scroll Lock key. This may be undefined for some platforms.</td>\n</tr>\n</tbody>\n</table>\n<p>When controlling the mouse, there are different types of actions that can be\ndone. Same formatting rules as function keys apply. They are as follows:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"26%\" />\n<col width=\"74%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Action</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>click</td>\n<td>Click with left mouse button</td>\n</tr>\n<tr><td>left_click</td>\n<td>Click with left mouse button</td>\n</tr>\n<tr><td>double_click</td>\n<td>Double click with left mouse button</td>\n</tr>\n<tr><td>triple_click</td>\n<td>Triple click with left mouse button</td>\n</tr>\n<tr><td>right_click</td>\n<td>Click with right mouse button</td>\n</tr>\n</tbody>\n</table>\n<p>The supported mouse button types are <tt class=\"docutils literal\">left</tt>, <tt class=\"docutils literal\">right</tt>, and <tt class=\"docutils literal\">middle</tt>.</p>\n<p><strong>Examples*</strong></p>\n<p>The library can open applications and interact with them through\nkeyboard and mouse events.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Write entry in accounting</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]    ${</span><span class=\"nv\">entry</span><span class=\"p\">}\n    </span><span class=\"nf\">Open application</span><span class=\"p\">    </span><span class=\"s\">erp_client.exe</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">         </span><span class=\"s\">image:</span><span class=\"p\">%{</span><span class=\"nv\">ROBOT_ROOT</span><span class=\"p\">}</span><span class=\"s\">/images/create.png</span><span class=\"p\">\n    </span><span class=\"nf\">Type text</span><span class=\"p\">     ${</span><span class=\"nv\">entry</span><span class=\"p\">}\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">    </span><span class=\"s\">ctrl</span><span class=\"p\">    </span><span class=\"s\">s</span><span class=\"p\">\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">    </span><span class=\"s\">enter</span><span class=\"p\">\n    [</span><span class=\"kn\">Teardown</span><span class=\"p\">]    </span><span class=\"nf\">Close all applications</span>\n</pre>\n<p>Targeting can be currently done using coordinates (absolute or relative),\nbut using template matching is preferred.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Write to field</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]    ${</span><span class=\"nv\">text</span><span class=\"p\">}\n    </span><span class=\"nf\">Move mouse</span><span class=\"p\">   </span><span class=\"s\">image:input_label.png</span><span class=\"p\">\n    </span><span class=\"nf\">Move mouse</span><span class=\"p\">   </span><span class=\"s\">offset:200,0</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">\n    </span><span class=\"nf\">Type text</span><span class=\"p\">    ${</span><span class=\"nv\">text</span><span class=\"p\">}\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">   </span><span class=\"s\">enter</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Clear Clipboard",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Clear the system clipboard.</p>\n</div>\n</div>",
                "shortdoc": "Clear the system clipboard.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click",
                "args": [
                    "locator: str = None",
                    "action: Action { click | left_click | double_click | ... } = Action.click"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Click at the element indicated by locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for click position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">Click action, e.g. right click</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Button</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">coordinates:500,200</span><span class=\"p\">    </span><span class=\"c\">triple click</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Click at the element indicated by locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click With Offset",
                "args": [
                    "locator: str = None",
                    "x: int = 0",
                    "y: int = 0",
                    "action: Action { click | left_click | double_click | ... } = Action.click"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Click at a given pixel offset from the given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for click start position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">Click horizontal offset in pixels</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">Click vertical offset in pixels</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">Click action, e.g. right click</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click with offset</span><span class=\"p\">    </span><span class=\"c\">Robocorp.Logo</span><span class=\"p\">    </span><span class=\"c\">y=400</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Click at a given pixel offset from the given locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close All Applications",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close all opened applications.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order1.docx</span><span class=\"p\">\n</span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order2.docx</span><span class=\"p\">\n</span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order3.docx</span><span class=\"p\">\n</span><span class=\"c\"># Do something with Word\nClose all applications</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Close all opened applications.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Application",
                "args": [
                    "app: Application"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close given application. Needs to be started\nwith this library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app:</th><td class=\"field-body\">App instance</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${word}=</span><span class=\"p\">    </span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">template.docx</span><span class=\"p\">\n</span><span class=\"c\"># Do something with Word\nClose application</span><span class=\"p\">    </span><span class=\"c\">${word}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Close given application. Needs to be started with this library.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy To Clipboard",
                "args": [
                    "locator"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read value to system clipboard from given input element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Current clipboard value</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${value}=</span><span class=\"p\">    </span><span class=\"c\">Copy to clipboard</span><span class=\"p\">    </span><span class=\"c\">ResultPage.Counter</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Copied text: ${value}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Read value to system clipboard from given input element.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Drag And Drop",
                "args": [
                    "source: str",
                    "destination: str",
                    "start_delay: float = 2.0",
                    "end_delay: float = 0.5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Drag mouse from source to destination while holding the left mouse button.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">Locator for start position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Locator for destination position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Delay in seconds after pressing down mouse button</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Delay in seconds before releasing mouse button</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Drag mouse from source to destination while holding the left mouse button.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Element",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find an element defined by locator, and return its position.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${match}=</span><span class=\"p\">    </span><span class=\"c\">Find element</span><span class=\"p\">    </span><span class=\"c\">image:logo.png</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Found logo at ${match.x}, ${match.y}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Find an element defined by locator, and return its position.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Elements",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find all elements defined by locator, and return their positions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${matches}=</span><span class=\"p\">    </span><span class=\"c\">Find elements</span><span class=\"p\">    </span><span class=\"c\">image:icon.png</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${match}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{matches}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Found icon at ${match.x}, ${match.y}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Find all elements defined by locator, and return their positions.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Clipboard Value",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read current value from system clipboard.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Copy to clipboard</span><span class=\"p\">       </span><span class=\"c\">coordinates:401,198</span><span class=\"p\">\n</span><span class=\"c\">${text}=</span><span class=\"p\">    </span><span class=\"c\">Get clipboard value</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">We just copied '${text}'</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Read current value from system clipboard.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Display Dimensions",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the dimensions of the current virtual display,\nwhich is the combined size of all physical monitors.</p>\n</div>\n</div>",
                "shortdoc": "Returns the dimensions of the current virtual display, which is the combined size of all physical monitors.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Mouse Position",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get current mouse position in pixel coordinates.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${position}=</span><span class=\"p\">    </span><span class=\"c\">Get mouse position</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Current mouse position is ${position.x}, ${position.y}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get current mouse position in pixel coordinates.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Highlight Elements",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw an outline around all matching elements.</p>\n</div>\n</div>",
                "shortdoc": "Draw an outline around all matching elements.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Move Mouse",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Move mouse to given coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for mouse position</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">Robocorp.Logo</span><span class=\"p\">\n</span><span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">offset:0,400</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Move mouse to given coordinates.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Application",
                "args": [
                    "name_or_path: str",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Start a given application by name (if in PATH),\nor by path to executable.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param name_or_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Name or path of application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">Command line arguments for application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Application instance</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open application</span><span class=\"p\">    </span><span class=\"c\">notepad.exe</span><span class=\"p\">\n</span><span class=\"c\">Open application</span><span class=\"p\">    </span><span class=\"c\">c:\\path\\to\\program.exe</span><span class=\"p\">    </span><span class=\"c\">--example-argument</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Start a given application by name (if in PATH), or by path to executable.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open File",
                "args": [
                    "path: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open a file with the default application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open a file with the default application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Paste From Clipboard",
                "args": [
                    "locator"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Paste value from system clipboard into given element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for element</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Copy to clipboard</span><span class=\"p\">       </span><span class=\"c\">coordinates:401,198</span><span class=\"p\">\n</span><span class=\"c\">Paste from clipboard</span><span class=\"p\">    </span><span class=\"c\">coordinates:822,710</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Paste value from system clipboard into given element.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Press Keys",
                "args": [
                    "*keys: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Press multiple keys down simultaneously.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">Keys to press</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">alt</span><span class=\"p\">  </span><span class=\"c\">delete</span><span class=\"p\">\n\n</span><span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">a</span><span class=\"p\">\n</span><span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">c</span><span class=\"p\">\n</span><span class=\"c\">${all_text}=</span><span class=\"p\">  </span><span class=\"c\">Get clipboard value</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Text box content was: ${all_text}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Press multiple keys down simultaneously.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Press Mouse Button",
                "args": [
                    "button: typing.Any = left"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Press down mouse button and keep it pressed.</p>\n</div>\n</div>",
                "shortdoc": "Press down mouse button and keep it pressed.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Release Mouse Button",
                "args": [
                    "button: typing.Any = left"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Release mouse button that was previously pressed.</p>\n</div>\n</div>",
                "shortdoc": "Release mouse button that was previously pressed.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Clipboard Value",
                "args": [
                    "text: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Write given value to system clipboard.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set clipboard value</span><span class=\"p\">     </span><span class=\"c\">This is some text.</span><span class=\"p\">\n</span><span class=\"c\">Paste from clipboard</span><span class=\"p\">    </span><span class=\"c\">coordinates:822,710</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Write given value to system clipboard.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Default Confidence",
                "args": [
                    "confidence: float"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set the default template matching confidence.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param confidence:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Value from 1 to 100</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set the default template matching confidence.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Take Screenshot",
                "args": [
                    "path: str = None",
                    "locator: str = None",
                    "embed: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Take a screenshot of the whole screen, or an element\nidentified by the given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to screenshot. The string <tt class=\"docutils literal\">{index}</tt> will be replaced with\nan index number to avoid overwriting previous screenshots.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Element to crop screenshot to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param embed:</th><td class=\"field-body\">Embed screenshot into Robot Framework log</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Take a screenshot of the whole screen, or an element identified by the given locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Type Text",
                "args": [
                    "text: str",
                    "*modifiers: str",
                    "enter: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Type text one letter at a time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Text to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param modifiers:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Modifier or functions keys held during typing</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">Press Enter / Return key after typing text</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Type text</span><span class=\"p\">    </span><span class=\"c\">this text will be uppercase</span><span class=\"p\">    </span><span class=\"c\">shift</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Type text one letter at a time.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Type Text Into",
                "args": [
                    "locator: str",
                    "text: str",
                    "clear: bool = False",
                    "enter: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Type text at the position indicated by given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator of input element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Text to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param clear:</th><td class=\"field-body\">Clear element before writing</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">Press Enter / Return key after typing text</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Type text into</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Name</span><span class=\"p\">      </span><span class=\"c\">Marky Mark</span><span class=\"p\">\n</span><span class=\"c\">Type text into</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Password</span><span class=\"p\">  </span><span class=\"c\">${PASSWORD}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Type text at the position indicated by given locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Element",
                "args": [
                    "locator: str",
                    "timeout: float = 10.0",
                    "interval: float = 0.5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Wait for an element defined by locator to exist or\nuntil timeout is reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Wait for element</span><span class=\"p\">    </span><span class=\"c\">alias:CookieConsent</span><span class=\"p\">    </span><span class=\"c\">timeout=30</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">image:%{ROBOT_ROOT}/accept.png</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Wait for an element defined by locator to exist or until timeout is reached.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Desktop.Clipboard": {
        "name": "RPA.Desktop.Clipboard",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> Use library RPA.Desktop's clipboard functionality instead.</p>\n<p><cite>Clipboard</cite> is a library for managing clipboard - <strong>copy</strong> text to,\n<strong>paste</strong> text from, and <strong>clear</strong> clipboard contents.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop.Clipboard</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Clipping</span><span class=\"p\">\n    </span><span class=\"nf\">Copy To Clipboard</span><span class=\"p\">   </span><span class=\"s\">Text from Robot to clipboard</span><span class=\"p\">\n    ${</span><span class=\"nv\">var</span><span class=\"p\">}=             </span><span class=\"nf\">Paste From Clipboard</span><span class=\"p\">\n    </span><span class=\"nf\">Clear Clipboard</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.Clipboard</span> <span class=\"kn\">import</span> <span class=\"n\">Clipboard</span>\n\n<span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"n\">Clipboard</span><span class=\"p\">()</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">copy_to_clipboard</span><span class=\"p\">(</span><span class=\"s1\">'Text from Python to clipboard'</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">paste_from_clipboard</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;clipboard had text: '</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">'&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">clear_clipboard</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Clear Clipboard",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Clear Clipboard</cite> instead.\nClear clipboard contents</p>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Clear Clipboard</cite> instead. Clear clipboard contents",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy To Clipboard",
                "args": [
                    "text"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Copy to Clipboard</cite> instead.</p>\n<p>Copy text to clipboard</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">to copy</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Copy to Clipboard</cite> instead.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Paste From Clipboard",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Paste from Clipboard</cite> instead.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">text</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Paste from Clipboard</cite> instead.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Desktop.OperatingSystem": {
        "name": "RPA.Desktop.OperatingSystem",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>OperatingSystem</cite> is a cross-platform library for managing\ncomputer properties and actions.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop.OperatingSystem</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get computer information</span><span class=\"p\">\n    ${</span><span class=\"nv\">boot_time</span><span class=\"p\">}=   </span><span class=\"nf\">Get Boot Time</span><span class=\"p\">  </span><span class=\"s\">as_datetime=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">machine</span><span class=\"p\">}=     </span><span class=\"nf\">Get Machine Name</span><span class=\"p\">\n    ${</span><span class=\"nv\">username</span><span class=\"p\">}=    </span><span class=\"nf\">Get Username</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">memory</span><span class=\"p\">}=      </span><span class=\"nf\">Get Memory Stats</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">        ${</span><span class=\"nv\">memory</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.OperatingSystem</span> <span class=\"kn\">import</span> <span class=\"n\">OperatingSystem</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_computer_information</span><span class=\"p\">():</span>\n    <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"n\">OperatingSystem</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Boot time    : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_boot_time</span><span class=\"p\">(</span><span class=\"n\">as_datetime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Machine name : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_machine_name</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Username     : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_username</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Memory       : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_memory_stats</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">get_computer_information</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [],
        "keywords": [
            {
                "name": "Boot Time In Seconds From Epoch",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get machine boot time</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boot time in seconds from Epoch</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${epoch}</span><span class=\"p\">  </span><span class=\"c\">Boot Time In Seconds From Epoch</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get machine boot time",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Boot Time",
                "args": [
                    "as_datetime: bool = False",
                    "datetime_format: str = %Y-%m-%d %H:%M:%S"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get computer boot time in seconds from Epoch or in datetime string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param as_datetime:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if True returns datetime string, otherwise seconds,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">datetime string format, defaults to &quot;%Y-%m-%d %H:%M:%S&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">seconds from Epoch or datetime string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">  </span><span class=\"c\">datetime_format=%d.%m.%Y</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get computer boot time in seconds from Epoch or in datetime string.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Machine Name",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get machine name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">machine name as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${machine}</span><span class=\"p\">  </span><span class=\"c\">Get Machine Name</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get machine name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Memory Stats",
                "args": [
                    "humanized: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get computer memory stats and return those in bytes\nor in humanized memory format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param humanized:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if False returns memory information in bytes, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">memory information in dictionary format</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">\n</span><span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">   </span><span class=\"c\">humanized=False</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get computer memory stats and return those in bytes or in humanized memory format.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Username",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get username of logged in user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">username as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${user}</span><span class=\"p\">  </span><span class=\"c\">Get Username</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get username of logged in user",
                "tags": [],
                "matched": true
            },
            {
                "name": "Kill Process",
                "args": [
                    "process_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Kill process by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if succeeds False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.name()}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Kill process by name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Kill Process By Pid",
                "args": [
                    "pid: int"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Kill process by pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.pid}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Kill process by pid",
                "tags": [],
                "matched": true
            },
            {
                "name": "Process Exists",
                "args": [
                    "process_name: str",
                    "strict: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Check if process exists by its name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search for this process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">defines how match is made, default <cite>True</cite>\nwhich means that process name needs to be exact match\nand <cite>False</cite> does inclusive matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">\n</span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Check if process exists by its name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Put System To Sleep",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Puts system to sleep mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Put System To Sleep</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Puts system to sleep mode",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Desktop.Windows": {
        "name": "RPA.Desktop.Windows",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Windows</cite> is a library for managing the Windows operating system.</p>\n<p><strong>Running Windows applications</strong></p>\n<p>Windows applications can be started in several ways. The library supports\nthe following keywords:</p>\n<ul class=\"simple\">\n<li>Open Application (dispatch Office applications)</li>\n<li>Open File (open the file as process which opens the associated application)</li>\n<li>Open Executable (uses pywinauto start)</li>\n<li>Open Using Run Dialog (uses Windows run dialog)</li>\n<li>Open From Search (uses Windows search dialog)</li>\n</ul>\n<p><strong>Locators</strong></p>\n<p><cite>Locator</cite> is used to identify the element for interaction - usually for a mouse click.</p>\n<p>Locators can investigated for application once it has been opened by calling\nthe keyword <cite>get_windows_elements</cite> which can store locator information into JSON file\nand <cite>screenshot</cite> of the element into an image file.</p>\n<p><strong>Identifying locator</strong></p>\n<p>The element needs to be identified by a unique method, for example, &quot;Three&quot; for button 3\nin the Calculator application. It can be given either as <cite>Three</cite> or <cite>name:Three</cite>.</p>\n<p>Possible search criterias:</p>\n<ul class=\"simple\">\n<li>name</li>\n<li>class (class_name)</li>\n<li>type (control_type)</li>\n<li>id (automation_id)</li>\n<li>any if none was defined</li>\n</ul>\n<p>The current method of inspecting elements on Windows is <cite>inspect.exe</cite> which is part\nof <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects\">Windows SDK</a>.</p>\n<p><strong>Keyboard</strong></p>\n<p>The keyword <cite>send_keys</cite> can be used to send keys to the active window. The keyword\n<cite>type_keys</cite> sends keys to the active window element.</p>\n<p>Special key codes are documented on <a class=\"reference external\" href=\"https://pywinauto.readthedocs.io/en/latest/code/pywinauto.keyboard.html#\">pywinauto</a>\ndocumentation page.</p>\n<p><strong>FAQ</strong></p>\n<ol class=\"upperalpha simple\" start=\"17\">\n<li>I see error message <cite>AttributeError: module 'win32com.gen_py.00020813-0000-0000-C000-000000000046x0x1x9' has no attribute 'CLSIDToClassMap'</cite></li>\n</ol>\n<ol class=\"upperalpha simple\">\n<li>From PowerShell run this command: <cite>Remove-Item -path $env:LOCALAPPDATATempgen_py -recurse</cite></li>\n</ol>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">          </span><span class=\"nn\">RPA.Desktop.Windows</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">   </span><span class=\"nf\">Close all applications</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Open Calculator using run dialog</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Open using run dialog</span><span class=\"p\">    </span><span class=\"s\">calc.exe</span><span class=\"p\">   </span><span class=\"s\">Calculator</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get Window Elements</span><span class=\"p\">\n    </span><span class=\"nf\">Send Keys</span><span class=\"p\">               </span><span class=\"s\">5*2=</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element</span><span class=\"p\">             </span><span class=\"s\">partial name:Display is</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">                ${</span><span class=\"nv\">result</span><span class=\"p\">}\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element rich text</span><span class=\"p\">   </span><span class=\"s\">id:CalculatorResults</span><span class=\"p\">\n    </span><span class=\"nf\">Should Be Equal As Strings</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}  </span><span class=\"s\">Display is 10</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element rectangle</span><span class=\"p\">   </span><span class=\"s\">partial name:Display is</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Is Element Visible</span><span class=\"p\">      </span><span class=\"s\">CalculatorResults</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Is Element Enabled</span><span class=\"p\">      </span><span class=\"s\">partial name:Display is</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span>\n\n<span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">open_calculator</span><span class=\"p\">():</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">open_from_search</span><span class=\"p\">(</span><span class=\"s2\">&quot;calc.exe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Calculator&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">get_window_elements</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_calculations</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">get_element_rich_text</span><span class=\"p\">(</span><span class=\"s1\">'id:CalculatorResults'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">'Display is '</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">open_calculator</span><span class=\"p\">()</span>\n    <span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"s1\">'5*2='</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">make_calculations</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Calculation result of '</span><span class=\"si\">{</span><span class=\"n\">exp</span><span class=\"si\">}</span><span class=\"s2\">' is '</span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">'&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">close_all_applications</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "backend: str = uia"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Boot Time In Seconds From Epoch",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get machine boot time</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boot time in seconds from Epoch</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${epoch}</span><span class=\"p\">  </span><span class=\"c\">Boot Time In Seconds From Epoch</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get machine boot time",
                "tags": [],
                "matched": true
            },
            {
                "name": "Calculate Rectangle Center",
                "args": [
                    "rectangle: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Calculate x and y center coordinates from rectangle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param rectangle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">element rectangle coordinates</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">x and y coordinates of rectangle center</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">   </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">&amp;{rect}=</span><span class=\"p\">        </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${x}</span><span class=\"p\">  </span><span class=\"c\">${y}=</span><span class=\"p\">     </span><span class=\"c\">Calculate Rectangle Center</span><span class=\"p\">   </span><span class=\"c\">${rect}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Calculate x and y center coordinates from rectangle.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Click Type",
                "args": [
                    "x: int = None",
                    "y: int = None",
                    "click_type: str = click"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mouse click on coordinates x and y.</p>\n<p>Default click type is <cite>click</cite> meaning <cite>left</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">horizontal coordinate for click, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">vertical coordinate for click, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param click_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">&quot;click&quot;, &quot;right&quot; or &quot;double&quot;, defaults to &quot;click&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if coordinates are not valid</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">\n</span><span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">click_type=right</span><span class=\"p\">\n</span><span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">click_type=double</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mouse click on coordinates x and y.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close All Applications",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close all applications</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">    </span><span class=\"c\">notepad.exe</span><span class=\"p\">   </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Close All Applications</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Close all applications",
                "tags": [],
                "matched": true
            },
            {
                "name": "Connect By Handle",
                "args": [
                    "handle: str",
                    "windowtitle: str = None",
                    "existing_app: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to application by its handle</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param handle:</th><td class=\"field-body\">handle of the application</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${appid}</span><span class=\"p\">  </span><span class=\"c\">Connect By Handle</span><span class=\"p\">  </span><span class=\"c\">88112</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Connect to application by its handle",
                "tags": [],
                "matched": true
            },
            {
                "name": "Connect By Pid",
                "args": [
                    "app_pid: str",
                    "windowtitle: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to application by its pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_pid:</th><td class=\"field-body\">process id of the application</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${appid}</span><span class=\"p\">  </span><span class=\"c\">Connect By PID</span><span class=\"p\">  </span><span class=\"c\">3231</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Connect to application by its pid",
                "tags": [],
                "matched": true
            },
            {
                "name": "Drag And Drop",
                "args": [
                    "src: typing.Any",
                    "target: typing.Any",
                    "src_locator: str",
                    "target_locator: str = None",
                    "handle_ctrl_key: bool = False",
                    "drop_delay: float = 2.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Drag elements from source and drop them on target.</p>\n<p>Please note that if CTRL is not pressed down during drag and drop then\noperation is MOVE operation, on CTRL down the operation is COPY operation.</p>\n<p>There will be also overwrite notification if dropping over existing files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param src:</th><td class=\"field-body\">application object or instance id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">application object or instance id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param src_locator:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">elements to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param handle_ctrl_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if keyword should press CTRL down dragging</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param drop_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">how many seconds to wait until releasing mouse drop,\ndefault 2.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on validation errors</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}=</span><span class=\"p\">        </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">    </span><span class=\"c\">explorer.exe{VK_SPACE}C:\\workfiles\\movethese</span><span class=\"p\">   </span><span class=\"c\">movethese</span><span class=\"p\">\n</span><span class=\"c\">${app2}=</span><span class=\"p\">        </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">    </span><span class=\"c\">wordpad.exe</span><span class=\"p\">   </span><span class=\"c\">Document - WordPad</span><span class=\"p\">\n</span><span class=\"c\">Drag And Drop</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">${app2}</span><span class=\"p\">   </span><span class=\"c\">regexp:testfile_\\d.txt</span><span class=\"p\">  </span><span class=\"c\">name:Rich Text Window</span><span class=\"p\">   </span><span class=\"c\">handle_ctrl_key=${True}</span><span class=\"p\">\n</span><span class=\"c\">Drag And Drop</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">regexp:testfile_\\d.txt</span><span class=\"p\">  </span><span class=\"c\">name:subdir</span><span class=\"p\">  </span><span class=\"c\">handle_ctrl_key=${True}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Drag elements from source and drop them on target.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Element",
                "args": [
                    "locator: str",
                    "search_criteria: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find element from window by locator and criteria.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_criteria:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">criteria by which element is matched</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of matching elements and locators that were found on the window</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">   </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Log Many</span><span class=\"p\">  </span><span class=\"c\">${elements[0]}</span><span class=\"p\">     </span><span class=\"c\"># list of matching elements\nLog Many</span><span class=\"p\">  </span><span class=\"c\">${elements[1]}</span><span class=\"p\">     </span><span class=\"c\"># list of all available locators</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Find element from window by locator and criteria.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get App",
                "args": [
                    "app_id: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get application object by id</p>\n<p>By default returns active_application application object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">id of the application to get, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">        </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">&amp;{appdetails}</span><span class=\"p\">  </span><span class=\"c\">Get App</span><span class=\"p\">   </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get application object by id",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Boot Time",
                "args": [
                    "as_datetime: bool = False",
                    "datetime_format: str = %Y-%m-%d %H:%M:%S"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get computer boot time in seconds from Epoch or in datetime string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param as_datetime:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if True returns datetime string, otherwise seconds,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">datetime string format, defaults to &quot;%Y-%m-%d %H:%M:%S&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">seconds from Epoch or datetime string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">  </span><span class=\"c\">datetime_format=%d.%m.%Y</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get computer boot time in seconds from Epoch or in datetime string.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Dialog Rectangle",
                "args": [
                    "ctrl: typing.Any = None",
                    "as_dict: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get dialog rectangle coordinates</p>\n<p>If <cite>ctrl</cite> is None then get coordinates from <cite>dialog</cite>\n:param ctrl: name of the window control object, defaults to None\n:return: coordinates: left, top, right, bottom</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${left}</span><span class=\"p\">  </span><span class=\"c\">${top}</span><span class=\"p\">  </span><span class=\"c\">${right}</span><span class=\"p\">  </span><span class=\"c\">${bottom}=</span><span class=\"p\">  </span><span class=\"c\">Get Dialog Rectangle</span><span class=\"p\">\n</span><span class=\"c\">&amp;{coords}</span><span class=\"p\">  </span><span class=\"c\">Get Dialog Rectangle</span><span class=\"p\">  </span><span class=\"c\">as_dict=True</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">top=${coords.top} left=${coords.left}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get dialog rectangle coordinates",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element",
                "args": [
                    "locator: str",
                    "screenshot: bool = False",
                    "open_dialog: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get element by locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param screenshot:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">takes element screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param open_dialog:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if dialog should be reopened, default to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">element if element was identified, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">Get Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">Get Element</span><span class=\"p\">  </span><span class=\"c\">Result</span><span class=\"p\">      </span><span class=\"c\">screenshot=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get element by locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Center",
                "args": [
                    "element: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get element center coordinates</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param element:</th><td class=\"field-body\">dictionary of element items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">coordinates, x and y</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{element}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${x}</span><span class=\"p\">  </span><span class=\"c\">${y}=</span><span class=\"p\">  </span><span class=\"c\">Get Element Center</span><span class=\"p\">  </span><span class=\"c\">${elements[0][0]}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get element center coordinates",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Rectangle",
                "args": [
                    "locator: str",
                    "as_dict: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get value of element <cite>rectangle</cite> attribute.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_dict:</th><td class=\"field-body\">return values in a dictionary, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">(left, top, right, bottom) values if found, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${left}</span><span class=\"p\">  </span><span class=\"c\">${top}</span><span class=\"p\">  </span><span class=\"c\">${right}</span><span class=\"p\">  </span><span class=\"c\">${bottom}=</span><span class=\"p\">  </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">&amp;{coords}</span><span class=\"p\">  </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">as_dict=True</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">top=${coords.top} left=${coords.left}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get value of element <cite>rectangle</cite> attribute.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Element Rich Text",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get value of element <cite>rich text</cite> attribute.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>rich_text</cite> value if found, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${text}</span><span class=\"p\">  </span><span class=\"c\">Get Element Rich Text</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get value of element <cite>rich text</cite> attribute.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Machine Name",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get machine name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">machine name as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${machine}</span><span class=\"p\">  </span><span class=\"c\">Get Machine Name</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get machine name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Memory Stats",
                "args": [
                    "humanized: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get computer memory stats and return those in bytes\nor in humanized memory format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param humanized:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if False returns memory information in bytes, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">memory information in dictionary format</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">\n</span><span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">   </span><span class=\"c\">humanized=False</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get computer memory stats and return those in bytes or in humanized memory format.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Open Applications",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get list of all open applications</p>\n<p>Returns a dictionary</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Executable</span><span class=\"p\">    </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">${app3}</span><span class=\"p\">    </span><span class=\"c\">Open File</span><span class=\"p\">          </span><span class=\"c\">/path/to/myfile.txt</span><span class=\"p\">\n</span><span class=\"c\">&amp;{apps}</span><span class=\"p\">    </span><span class=\"c\">Get Open Applications</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get list of all open applications",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Spaced String",
                "args": [
                    "text"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Replace spaces in a text with <cite>pywinauto.keyboard</cite>\nspace characters <cite>{VK_SPACE}</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">replace spaces in this string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">Get Spaced String</span><span class=\"p\">   </span><span class=\"c\">My name is Bond</span><span class=\"p\">\n</span><span class=\"c\"># ${txt} = My{VK_SPACE}name{VK_SPACE}is{VK_SPACE}Bond</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Replace spaces in a text with <cite>pywinauto.keyboard</cite> space characters <cite>{VK_SPACE}</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Text",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get text from element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">     </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">   </span><span class=\"c\">11</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">   </span><span class=\"c\">55</span><span class=\"p\">\n</span><span class=\"c\">&amp;{val}</span><span class=\"p\">       </span><span class=\"c\">Get Text</span><span class=\"p\">   </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get text from element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Username",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get username of logged in user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">username as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${user}</span><span class=\"p\">  </span><span class=\"c\">Get Username</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get username of logged in user",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window Elements",
                "args": [
                    "screenshot: bool = False",
                    "element_json: bool = False",
                    "outline: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get element information about all window dialog controls\nand their descendants.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param screenshot:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save element screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_json:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save element json if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param outline:</th><td class=\"field-body\">highlight elements if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">all controls and all elements</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Get Window Elements</span><span class=\"p\">\n</span><span class=\"c\">Log Many</span><span class=\"p\">      </span><span class=\"c\">${elements[0]}</span><span class=\"p\">     </span><span class=\"c\"># list of all available locators\nLog Many</span><span class=\"p\">      </span><span class=\"c\">${elements[1]}</span><span class=\"p\">     </span><span class=\"c\"># list of matching elements\n&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Get Window Elements</span><span class=\"p\">  </span><span class=\"c\">screenshot=True</span><span class=\"p\">  </span><span class=\"c\">element_json=True</span><span class=\"p\">  </span><span class=\"c\">outline=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get element information about all window dialog controls and their descendants.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Window List",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get list of open windows</p>\n<p>Window dictionaries contain:</p>\n<ul class=\"simple\">\n<li>title</li>\n<li>pid</li>\n<li>handle</li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of window dictionaries</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{windows}</span><span class=\"p\">    </span><span class=\"c\">Get Window List</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${window}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{windows}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">  </span><span class=\"c\">${window}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get list of open windows",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Enabled",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Is element enabled.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if enabled, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${res}=</span><span class=\"p\">   </span><span class=\"c\">Is Element Enabled</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Is element enabled.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Matching",
                "args": [
                    "itemdict: dict",
                    "locator: str",
                    "criteria: str",
                    "wildcard: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Is element matching. Check if locator is found in <cite>any</cite> field\nor <cite>criteria</cite> field in the window items.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param itemDict:</th><td class=\"field-body\">dictionary of element items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param criteria:</th><td class=\"field-body\">criteria on which to match element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">whether to do reg exp match or not, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if element is matching locator and criteria, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Is element matching. Check if locator is found in <cite>any</cite> field or <cite>criteria</cite> field in the window items.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Element Visible",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Is element visible.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if visible, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${res}=</span><span class=\"p\">   </span><span class=\"c\">Is Element Visible</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Is element visible.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Kill Process",
                "args": [
                    "process_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Kill process by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if succeeds False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.name()}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Kill process by name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Kill Process By Pid",
                "args": [
                    "pid: int"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Kill process by pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.pid}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Kill process by pid",
                "tags": [],
                "matched": true
            },
            {
                "name": "Lock Screen",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Put windows into lock mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Lock Screen</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Put windows into lock mode",
                "tags": [],
                "matched": true
            },
            {
                "name": "Log In",
                "args": [
                    "username: str",
                    "password: str",
                    "domain: str = ."
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Log into Windows <cite>domain</cite> with <cite>username</cite> and <cite>password</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">password of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param domain:</th><td class=\"field-body\">windows domain for the user, defaults to &quot;.&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">handle</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Log In</span><span class=\"p\">  </span><span class=\"c\">username=myname</span><span class=\"p\">  </span><span class=\"c\">password=mypassword</span><span class=\"p\">  </span><span class=\"c\">domain=company</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Log into Windows <cite>domain</cite> with <cite>username</cite> and <cite>password</cite>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Menu Select",
                "args": [
                    "menuitem: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Select item from menu</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param menuitem:</th><td class=\"field-body\">name of the menu item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">   </span><span class=\"c\">notepad</span><span class=\"p\">     </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Menu Select</span><span class=\"p\">             </span><span class=\"c\">File-&gt;Print</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Select item from menu",
                "tags": [],
                "matched": true
            },
            {
                "name": "Minimize Dialog",
                "args": [
                    "windowtitle: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Minimize window by its title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, default <cite>None</cite> means that\nactive window is going to be minimized</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">     </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Minimize Dialog</span><span class=\"p\">    </span><span class=\"c\"># Current window (Notepad)\nMinimize Dialog</span><span class=\"p\">    </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Minimize window by its title",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Click",
                "args": [
                    "locator: str = None",
                    "x: int = 0",
                    "y: int = 0",
                    "off_x: int = 0",
                    "off_y: int = 0",
                    "image: str = None",
                    "method: str = locator",
                    "ctype: str = click",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mouse click <cite>locator</cite>, <cite>coordinates</cite>, or <cite>image</cite></p>\n<p>When using method <cite>locator</cite>,<span class=\"name\">image</span> or <cite>ocr</cite> mouse is clicked by default at\ncenter coordinates.</p>\n<p>Click types are:</p>\n<ul class=\"simple\">\n<li><cite>click</cite> normal left button mouse click</li>\n<li><cite>double</cite></li>\n<li><cite>right</cite></li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator on active window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">coordinate x on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">coordinate y on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_x:</th><td class=\"field-body\">offset x (used for locator and image clicks)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_y:</th><td class=\"field-body\">offset y (used for locator and image clicks)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to click on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">one of the available methods to mouse click, default &quot;locator&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">type of mouse click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">these keyword arguments can be used to pass arguments\nto underlying <cite>Images</cite> library to finetune image template matching,\nfor example. <cite>tolerance=0.5</cite> would adjust image tolerance for the image\nmatching</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=coordinates</span><span class=\"p\">  </span><span class=\"c\">100</span><span class=\"p\">   </span><span class=\"c\">100</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=image</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">off_x=10</span><span class=\"p\">  </span><span class=\"c\">off_y=10</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=image</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">tolerance=0.8</span><span class=\"p\">\n</span><span class=\"c\">${elements}</span><span class=\"p\">  </span><span class=\"c\">${other}=</span><span class=\"p\">     </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">class:Button</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{elements}</span><span class=\"p\">\n    </span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${element}[visible]</span><span class=\"p\">   </span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">${element}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mouse click <cite>locator</cite>, <cite>coordinates</cite>, or <cite>image</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Click Coords",
                "args": [
                    "x: int",
                    "y: int",
                    "ctype: str = click",
                    "delay_time: float = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Click at coordinates on desktop</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">horizontal coordinate on the windows to click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">vertical coordinate on the windows to click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">click type &quot;click&quot;, &quot;right&quot; or &quot;double&quot;, defaults to &quot;click&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param delay:</th><td class=\"field-body\">delay in seconds after, default is no delay</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=300</span><span class=\"p\">  </span><span class=\"c\">y=300</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">delay=5.0</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Click at coordinates on desktop",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mouse Click Image",
                "args": [
                    "template: str",
                    "off_x: int = 0",
                    "off_y: int = 0",
                    "ctype: str = click",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Click at template image on desktop</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to click on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_x:</th><td class=\"field-body\">horizontal offset from top left corner to click on</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_y:</th><td class=\"field-body\">vertical offset from top left corner to click on</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">type of mouse click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">these keyword arguments can be used to pass arguments\nto underlying <cite>Images</cite> library to finetune image template matching,\nfor example. <cite>tolerance=0.5</cite> would adjust image tolerance for the image\nmatching</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">off_x=10</span><span class=\"p\">  </span><span class=\"c\">off_y=10</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">tolerance=0.8</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Click at template image on desktop",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Application",
                "args": [
                    "application: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open application by dispatch method</p>\n<p>This keyword is used to launch Microsoft applications like\nExcel, Word, Outlook and Powerpoint.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param application:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the application as <cite>str</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open application by dispatch method",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Dialog",
                "args": [
                    "windowtitle: str = None",
                    "highlight: bool = False",
                    "timeout: int = 10",
                    "existing_app: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open window by its title.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, defaults to active window if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param highlight:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">draw outline for window if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Dialog</span><span class=\"p\">       </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Open Dialog</span><span class=\"p\">       </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">   </span><span class=\"c\">highlight=True</span><span class=\"p\">   </span><span class=\"c\">timeout=5</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open window by its title.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Executable",
                "args": [
                    "executable: str",
                    "windowtitle: str",
                    "backend: str = None",
                    "work_dir: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open Windows executable. Window title name is required\nto get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param backend:</th><td class=\"field-body\">set Windows backend, default None means using\nlibrary default value</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param work_dir:</th><td class=\"field-body\">path to working directory, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open Windows executable. Window title name is required to get handle on the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open File",
                "args": [
                    "filename: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open associated application when opening file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if application is opened, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open File</span><span class=\"p\">   </span><span class=\"c\">/path/to/myfile.txt</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open associated application when opening file",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open From Search",
                "args": [
                    "executable: str",
                    "windowtitle: str",
                    "timeout: int = 10"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open application using Windows search dialog.\nWindow title name is required to get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open From Search</span><span class=\"p\">  </span><span class=\"c\">calculator</span><span class=\"p\">  </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open application using Windows search dialog. Window title name is required to get handle on the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Using Run Dialog",
                "args": [
                    "executable: str",
                    "windowtitle: str",
                    "timeout: int = 10"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open application using Windows run dialog.\nWindow title name is required to get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Open application using Windows run dialog. Window title name is required to get handle on the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Process Exists",
                "args": [
                    "process_name: str",
                    "strict: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Check if process exists by its name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search for this process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">defines how match is made, default <cite>True</cite>\nwhich means that process name needs to be exact match\nand <cite>False</cite> does inclusive matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">\n</span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Check if process exists by its name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Put System To Sleep",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Put Windows into sleep mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Put System To Sleep</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Put Windows into sleep mode",
                "tags": [],
                "matched": true
            },
            {
                "name": "Quit Application",
                "args": [
                    "app_id: str = None",
                    "send_keys: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Quit an application by application id or\nactive application if <cite>app_id</cite> is None.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">application_id, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">   </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Quit Application</span><span class=\"p\">  </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Quit an application by application id or active application if <cite>app_id</cite> is None.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Restore Dialog",
                "args": [
                    "windowtitle: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Restore window by its title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, default <cite>None</cite> means that\nactive window is going to be restored</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Minimize Dialog</span><span class=\"p\">\n</span><span class=\"c\">Sleep</span><span class=\"p\">             </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">Restore Dialog</span><span class=\"p\">\n</span><span class=\"c\">Sleep</span><span class=\"p\">             </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">Restore Dialog</span><span class=\"p\">    </span><span class=\"c\">Untitled - Notepad</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Restore window by its title",
                "tags": [],
                "matched": true
            },
            {
                "name": "Screenshot",
                "args": [
                    "filename: str",
                    "element: dict = None",
                    "ctrl: typing.Any = None",
                    "desktop: bool = False",
                    "overwrite: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save screenshot into filename.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param element:</th><td class=\"field-body\">take element screenshot, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctrl:</th><td class=\"field-body\">take control screenshot, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param desktop:</th><td class=\"field-body\">take desktop screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file is overwritten if True, defaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{element}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">element.png</span><span class=\"p\">   </span><span class=\"c\">${elements[0][0]}</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">desktop.png</span><span class=\"p\">   </span><span class=\"c\">desktop=True</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">desktop.png</span><span class=\"p\">   </span><span class=\"c\">desktop=True</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Save screenshot into filename.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Keys",
                "args": [
                    "keys: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send keys into active windows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to send</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Send Keys</span><span class=\"p\">        </span><span class=\"c\">2{+}3=</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Send keys into active windows.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Keys To Input",
                "args": [
                    "keys_to_type: str",
                    "with_enter: bool = True",
                    "send_delay: float = 0.5",
                    "enter_delay: float = 1.5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send keys to windows and add ENTER if <cite>with_enter</cite> is True</p>\n<p>At the end of send_keys there is by default 0.5 second delay.\nAt the end of ENTER there is by default 1.5 second delay.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param keys_to_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keys to type into Windows</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_enter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">send ENTER if <cite>with_enter</cite> is True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param send_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delay after send_keys</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param enter_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delay after ENTER</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">Get Spaced String</span><span class=\"p\">   </span><span class=\"c\">My name is Bond, James Bond</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">with_enter=False</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">{ENTER}THE</span><span class=\"p\">   </span><span class=\"c\">send_delay=5.0</span><span class=\"p\">  </span><span class=\"c\">with_enter=False</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">{VK_SPACE}-{VK_SPACE}END</span><span class=\"p\">   </span><span class=\"c\">enter_delay=5.0</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Send keys to windows and add ENTER if <cite>with_enter</cite> is True",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Windows Backend",
                "args": [
                    "backend: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set Windows backend which is used to interact with Windows\napplications</p>\n<p>Allowed values defined by <cite>SUPPORTED_BACKENDS</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param backend:</th><td class=\"field-body\">name of the backend to use</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Windows Backend</span><span class=\"p\">   </span><span class=\"c\">uia</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Set Windows Backend</span><span class=\"p\">   </span><span class=\"c\">win32</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set Windows backend which is used to interact with Windows applications",
                "tags": [],
                "matched": true
            },
            {
                "name": "Switch To Application",
                "args": [
                    "app_id: int"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Switch to application by id.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">application's id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if application is not found by given id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Switch To Application</span><span class=\"p\">   </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Switch to application by id.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Type Into",
                "args": [
                    "locator: str",
                    "keys: str",
                    "empty_field: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Type keys into element matched by given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to type</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">        </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">11</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">        </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">22</span><span class=\"p\">  </span><span class=\"c\">empty_field=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Type keys into element matched by given locator.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Type Keys",
                "args": [
                    "keys: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Type keys into active window element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to type</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">notepad.exe</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Type Keys</span><span class=\"p\">   </span><span class=\"c\">My text</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Type keys into active window element.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Element",
                "args": [
                    "locator: str",
                    "search_criteria: str = None",
                    "timeout: float = 30.0",
                    "interval: float = 2.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Wait for element to appear into the window.</p>\n<p>Can return 1 or more elements matching locator, or raises\n<cite>ElementNotFoundError</cite> if element is not found within timeout.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_criteria:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">criteria by which element is matched</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">defines how long to wait for element to appear,\ndefaults to 30.0 seconds</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">how often to poll for element,\ndefaults to 2.0 seconds (minimum is 0.5 seconds)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">  </span><span class=\"c\">Wait For Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">&#64;{elements}</span><span class=\"p\">  </span><span class=\"c\">Wait For Element</span><span class=\"p\">  </span><span class=\"c\">Results</span><span class=\"p\">   </span><span class=\"c\">timeout=10</span><span class=\"p\">  </span><span class=\"c\">interval=1.5</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Wait for element to appear into the window.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Dialogs": {
        "name": "RPA.Dialogs",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>The <cite>Dialogs</cite> library provides a way to ask for user input during executions\nthrough HTML forms. Form elements can be built with library keywords or they can\nbe defined in a static JSON file.</p>\n<p><strong>How the library works</strong></p>\n<p>The main keyword of the library is <tt class=\"docutils literal\">Request Response</tt> which works as follows:</p>\n<ol class=\"arabic simple\">\n<li>It starts an HTTP server in the background</li>\n<li>The HTML form is generated either according to a JSON file or the\nkeywords called during the task</li>\n<li>It opens a browser and shows the created form (The browser is opened with\nthe <tt class=\"docutils literal\">Open Available Browser</tt> keyword from the <tt class=\"docutils literal\">RPA.Browser</tt> library)</li>\n<li>Once the form is filled and submitted by the user, the server will process\nthe response and extract the field values, which in turn are returned by the keyword</li>\n<li>In the end, the browser is closed and the HTTP server is stopped</li>\n</ol>\n<p><tt class=\"docutils literal\">Request Response</tt> can be invoked in two ways:</p>\n<ol class=\"arabic simple\">\n<li>Without any parameters. This means that form shown is the one created\nby other library keywords. If no form elements have been added with\nkeywords then the form will contain just one submit button. Form building\nmust be started with the keyword <tt class=\"docutils literal\">Create Form</tt>.</li>\n<li>Giving a path to a JSON file (using the parameter <strong>formspec</strong>) which\nspecifies the elements that form should include.</li>\n</ol>\n<p>The keyword has optional parameters to specify form window <strong>width</strong> and <strong>height</strong>.\nThe default size is 600px wide and 1000px high.</p>\n<p><strong>Setting library arguments</strong></p>\n<p>Library has arguments <tt class=\"docutils literal\">server_port</tt> and <tt class=\"docutils literal\">stylesheet</tt>. The <tt class=\"docutils literal\">server_port</tt> argument\ntakes integer value, which defines port where HTTP server will be run. By default port is 8105.\nThe <tt class=\"docutils literal\">stylesheet</tt> can be used to point CSS file, which will be used to modify style of form,\nwhich is shown to the user. Defaults to built-in Robocorp stylesheet.</p>\n<p><strong>Supported element types</strong></p>\n<p>As a bare minimum, the form is displayed with a submit button when the\n<tt class=\"docutils literal\">Request Response</tt> keyword is called.</p>\n<p>The supported input elements and their corresponding HTML tags are:</p>\n<ul class=\"simple\">\n<li>form (<tt class=\"docutils literal\">&lt;form&gt;</tt>)</li>\n<li>title (<tt class=\"docutils literal\">&lt;h3&gt;</tt>)</li>\n<li>text (<tt class=\"docutils literal\">&lt;p&gt;</tt>)</li>\n<li>radiobutton  (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='radio'&gt;</span></tt>)</li>\n<li>checkbox (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='checkbox'&gt;</span></tt>)</li>\n<li>dropdown (<tt class=\"docutils literal\">&lt;select&gt;</tt>)</li>\n<li>textarea (<tt class=\"docutils literal\">&lt;textarea&gt;</tt>)</li>\n<li>textinput (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='text'&gt;</span></tt>)</li>\n<li>fileinput (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='file'&gt;</span></tt>)</li>\n<li>hiddeninput (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='hidden'&gt;</span></tt>)</li>\n<li>submit (<tt class=\"docutils literal\">&lt;input <span class=\"pre\">type='submit'&gt;</span></tt>)</li>\n</ul>\n<p><strong>About file types</strong></p>\n<p>The <tt class=\"docutils literal\">Add File Input</tt> keyword has parameter <tt class=\"docutils literal\">filetypes</tt>. Parameter sets filter\nfor file types that can be uploaded via element. Parameter can be set to <tt class=\"docutils literal\"><span class=\"pre\">filetypes=${EMPTY}</span></tt>\nto accept all files. Multiple types are separated with comma <tt class=\"docutils literal\">filetypes=image/jpeg,image/png</tt>.</p>\n<p>Some common filetypes:</p>\n<ul class=\"simple\">\n<li>image/* (all image types)</li>\n<li>audio/* (all audio types)</li>\n<li>video/* (all video types)</li>\n<li>application/pdf (PDFs)</li>\n<li>application/vnd.ms-excel (.xls, .xlsx)</li>\n</ul>\n<p>The list of all possible <a class=\"reference external\" href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">MIME-types</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>Examples of creating forms through keywords and a JSON file:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Dialogs</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Ask Question From User By Form Built With Keywords</span><span class=\"p\">\n    </span><span class=\"nf\">Create Form</span><span class=\"p\">     </span><span class=\"s\">questions</span><span class=\"p\">\n    </span><span class=\"nf\">Add Text Input</span><span class=\"p\">  </span><span class=\"s\">label=What is your name?</span><span class=\"p\">  </span><span class=\"s\">name=username</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">response</span><span class=\"p\">}=    </span><span class=\"nf\">Request Response</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">             </span><span class=\"s\">Username is &quot;</span><span class=\"p\">${</span><span class=\"nv\">response</span><span class=\"p\">}</span><span class=\"s\">[username]&quot;</span><span class=\"p\">\n\n</span><span class=\"gu\">Ask Question From User By Form Specified With JSON</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">response</span><span class=\"p\">}=    </span><span class=\"nf\">Request Response</span><span class=\"p\">  </span><span class=\"s\">/path/to/myform.json</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">             </span><span class=\"s\">Username is &quot;</span><span class=\"p\">${</span><span class=\"nv\">response</span><span class=\"p\">}</span><span class=\"s\">[username]&quot;</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used inside Python:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Dialogs</span> <span class=\"kn\">import</span> <span class=\"n\">Dialogs</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">ask_question_from_user</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">attribute</span><span class=\"p\">):</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dialogs</span><span class=\"p\">()</span>\n    <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">create_form</span><span class=\"p\">(</span><span class=\"s1\">'questions'</span><span class=\"p\">)</span>\n    <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">add_text_input</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">attribute</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">request_response</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ask_question_from_user</span><span class=\"p\">(</span><span class=\"s1\">'What is your name ?'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Username is '</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">'&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "server_port: int = 8105",
                    "stylesheet: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>The dialogs library can be initialized to a custom\nport and with a custom stylesheet for dialogs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param server_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">HTTP server port, defaults to 8105</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param stylesheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">defaults to built-in Robocorp stylesheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "The dialogs library can be initialized to a custom port and with a custom stylesheet for dialogs.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Add Checkbox",
                "args": [
                    "label: str",
                    "element_id: str",
                    "options: str",
                    "default: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add checkbox element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">check box element label</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">check box element identifier</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">values for the check box</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">check box selected value, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Checkbox</span><span class=\"p\">    </span><span class=\"c\">label=Select your colors</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">element_id=colors</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">options=green,red,blue,yellow</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">default=blue</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add checkbox element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Dropdown",
                "args": [
                    "label: str",
                    "element_id: str",
                    "options: typing.Any",
                    "default: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add dropdown element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">dropdown element label</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dropdown element id attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">values for the dropdown</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">dropdown selected value, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Dropdown</span><span class=\"p\">  </span><span class=\"c\">label=Select task type</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">element_id=tasktype</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">options=buy,sell,rent</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">default=buy</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add dropdown element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add File Input",
                "args": [
                    "label: str",
                    "element_id: str",
                    "name: str",
                    "filetypes: str",
                    "target_directory: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add text input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">input element label</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">hidden element id attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">input element name attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param filetypes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">accepted filetypes for the file upload</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">where to save uploaded files to</td>\n</tr>\n</tbody>\n</table>\n<p>Read more of the filetypes in the library documentation.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add File Input</span><span class=\"p\">  </span><span class=\"c\">label=Attachment</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">element_id=attachment</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">name=attachment</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">filetypes=${EMPTY}</span><span class=\"p\">         </span><span class=\"c\"># Accept all files\n...</span><span class=\"p\">             </span><span class=\"c\">target_directory=${CURDIR}${/}output</span><span class=\"p\">\n\n</span><span class=\"c\">Add File Input</span><span class=\"p\">  </span><span class=\"c\">label=Contract</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">element_id=contract</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">name=contract</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">             </span><span class=\"c\">filetypes=application/pdf</span><span class=\"p\">  </span><span class=\"c\"># Accept only PDFs\n...</span><span class=\"p\">             </span><span class=\"c\">target_directory=${CURDIR}${/}output</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add text input element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Hidden Input",
                "args": [
                    "name: str",
                    "value: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add hidden input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">input element name attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">input element value attribute</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">${uuid}</span><span class=\"p\">   </span><span class=\"c\">Evaluate</span><span class=\"p\">  </span><span class=\"c\">str(uuid.uuid4())</span><span class=\"p\">\n</span><span class=\"c\">Add Hidden Input</span><span class=\"p\">    </span><span class=\"c\">form-id</span><span class=\"p\">   </span><span class=\"c\">${uuid}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add hidden input element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Radio Buttons",
                "args": [
                    "element_id: str",
                    "options: str",
                    "default: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add radio button element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">radio button element identifier</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">values for the radio button</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">radio button selected value, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Radio Button</span><span class=\"p\">   </span><span class=\"c\">element_id=drone</span><span class=\"p\">  </span><span class=\"c\">buttons=Jim,Robert</span><span class=\"p\">  </span><span class=\"c\">default=Robert</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add radio button element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Submit",
                "args": [
                    "name: str",
                    "buttons: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add submit element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">element name attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param buttons:</th><td class=\"field-body\">list of buttons</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Submit</span><span class=\"p\">    </span><span class=\"c\">name=direction-to-go</span><span class=\"p\">  </span><span class=\"c\">buttons=left,right</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add submit element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Text",
                "args": [
                    "value: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add text paragraph element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">text for the element</td>\n</tr>\n</tbody>\n</table>\n<p>Example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Text</span><span class=\"p\">       </span><span class=\"c\">${form_guidance_text}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add text paragraph element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Text Input",
                "args": [
                    "label: str",
                    "name: str",
                    "value: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add text input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">input element label</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">input element name attribute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">input element value attribute</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Text Input</span><span class=\"p\">   </span><span class=\"c\">what is your firstname ?</span><span class=\"p\">  </span><span class=\"c\">fname</span><span class=\"p\">   </span><span class=\"c\">value=Mika</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add text input element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Textarea",
                "args": [
                    "name: str",
                    "rows: int = 5",
                    "cols: int = 40",
                    "default: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add textarea element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">textarea element name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param rows:</th><td class=\"field-body\">number of rows for the area, defaults to 5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param cols:</th><td class=\"field-body\">numnber of columns for the area, defaults to 40</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">prefilled text for the area, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">\n</span><span class=\"c\">Add Textarea</span><span class=\"p\">       </span><span class=\"c\">name=feedback</span><span class=\"p\">  </span><span class=\"c\">default=enter feedback here</span><span class=\"p\">\n</span><span class=\"c\">Add Textarea</span><span class=\"p\">       </span><span class=\"c\">name=texts</span><span class=\"p\">  </span><span class=\"c\">rows=40</span><span class=\"p\">   </span><span class=\"c\">cols=80</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add textarea element",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Title",
                "args": [
                    "title: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add h3 element into form</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">text for the element</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">     </span><span class=\"c\"># default form title will be &quot;Requesting response&quot;\nAdd Title</span><span class=\"p\">       </span><span class=\"c\">User Confirmation Form</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add h3 element into form",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Form",
                "args": [
                    "title: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create new form</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">form title, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">     </span><span class=\"c\"># form title will be &quot;Requesting response&quot;\nCreate Form</span><span class=\"p\">     </span><span class=\"c\">title=User Confirmation Form</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Create new form",
                "tags": [],
                "matched": true
            },
            {
                "name": "Request Response",
                "args": [
                    "formspec: str = None",
                    "window_width: int = 600",
                    "window_height: int = 1000"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Start server and show form. Waits for user response.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param formspec:</th><td class=\"field-body\">form json specification file, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param window_width:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">window width in pixels, defaults to 600</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param window_height:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">window height in pixels, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">form response</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Form</span><span class=\"p\">    </span><span class=\"c\">${CURDIR}/${/}myform.json</span><span class=\"p\">\n</span><span class=\"c\">&amp;{response}</span><span class=\"p\">    </span><span class=\"c\">Request Response</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Start server and show form. Waits for user response.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Email.Exchange": {
        "name": "RPA.Email.Exchange",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Exchange</cite> is a library for sending, reading, and deleting emails.\n<cite>Exchange</cite> is interfacing with Exchange Web Services (EWS).</p>\n<p>For more information about server settings, see\n<a class=\"reference external\" href=\"https://support.microsoft.com/en-us/office/server-settings-you-ll-need-from-your-email-provider-c82de912-adcc-4787-8283-45a1161f3cc3\">this Microsoft support article</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Email.Exchange</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize</span><span class=\"p\">  </span><span class=\"s\">username=</span><span class=\"p\">${</span><span class=\"nv\">ACCOUNT</span><span class=\"p\">}  </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">PASSWORD</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">ACCOUNT</span><span class=\"p\">}              </span><span class=\"s\">ACCOUNT_NAME</span><span class=\"p\">\n${</span><span class=\"nv\">PASSWORD</span><span class=\"p\">}             </span><span class=\"s\">ACCOUNT_PASSWORD</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}    </span><span class=\"s\">RECIPIENT</span><span class=\"p\">\n${</span><span class=\"nv\">IMAGES</span><span class=\"p\">}               </span><span class=\"s\">myimage.png</span><span class=\"p\">\n${</span><span class=\"nv\">ATTACHMENTS</span><span class=\"p\">}          </span><span class=\"s\">C:</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">mydocument.pdf</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Sending email</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">  </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...           </span><span class=\"s\">subject=Exchange Message from RPA Robot</span><span class=\"p\">\n    ...           </span><span class=\"s\">body=&lt;p&gt;Exchange RPA Robot message body&lt;br&gt;&lt;img src='myimage.png'/&gt;&lt;/p&gt;</span><span class=\"p\">\n    ...           </span><span class=\"s\">save=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...           </span><span class=\"s\">html=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...           </span><span class=\"s\">images=</span><span class=\"p\">${</span><span class=\"nv\">IMAGES</span><span class=\"p\">}\n    ...           </span><span class=\"s\">cc=EMAIL_ADDRESS</span><span class=\"p\">\n    ...           </span><span class=\"s\">bcc=EMAIL_ADDRESS</span><span class=\"p\">\n    ...           </span><span class=\"s\">attachments=</span><span class=\"p\">${</span><span class=\"nv\">ATTACHMENTS</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Email.Exchange</span> <span class=\"kn\">import</span> <span class=\"n\">Exchange</span>\n\n<span class=\"n\">ex_account</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_NAME&quot;</span>\n<span class=\"n\">ex_password</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_PASSWORD&quot;</span>\n\n<span class=\"n\">mail</span> <span class=\"o\">=</span> <span class=\"n\">Exchange</span><span class=\"p\">()</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">ex_account</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">ex_password</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n    <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s2\">&quot;RECIPIENT&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">&quot;Message from RPA Python&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">&quot;RPA Python message body&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [],
        "keywords": [
            {
                "name": "Authorize",
                "args": [
                    "username: str",
                    "password: str",
                    "autodiscover: bool = True",
                    "access_type: str = DELEGATE",
                    "server: str = None",
                    "primary_smtp_address: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to Exchange account</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">account username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">account password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autodiscover:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use autodiscover or set it off</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param accesstype:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">default &quot;DELEGATE&quot;, other option &quot;IMPERSONATION&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param server:</th><td class=\"field-body\">required for configuration options</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param primary_smtp_address:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">by default set to username, but can be\nset to be different than username</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Connect to Exchange account",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Folder",
                "args": [
                    "folder_name: str = None",
                    "parent_folder: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the new folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Folder",
                "args": [
                    "folder_name: str = None",
                    "parent_folder: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Empty Folder",
                "args": [
                    "folder_name: str = None",
                    "parent_folder: str = None",
                    "delete_sub_folders: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Empty email folder of all items</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delete_sub_folders:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delete sub folders or not, by default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Empty email folder of all items",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Messages",
                "args": [
                    "folder_name: str = None",
                    "count: int = 100"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List messages in the account inbox. Order by descending\nreceived time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of messages to list</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List messages in the account inbox. Order by descending received time.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Move Messages",
                "args": [
                    "criterion: str = ",
                    "source: str = None",
                    "target: str = None",
                    "contains: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Move message(s) from source folder to target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">move messages matching this criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">target folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean result of operation, True if 1+ items were moved else False</td>\n</tr>\n</tbody>\n</table>\n<p>Criterion examples:</p>\n<ul class=\"simple\">\n<li>subject:my message subject</li>\n<li>body:something in body</li>\n<li>sender:sender&#64;domain.com</li>\n</ul>\n</div>\n</div>",
                "shortdoc": "Move message(s) from source folder to target folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rename Folder",
                "args": [
                    "oldname: str = None",
                    "newname: str = None",
                    "parent_folder: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Rename email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param oldname:</th><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newname:</th><td class=\"field-body\">new name for the folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Rename email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Message",
                "args": [
                    "recipients: str",
                    "subject: str = ",
                    "body: str = ",
                    "attachments: str = None",
                    "html: bool = False",
                    "images: str = None",
                    "cc: str = None",
                    "bcc: str = None",
                    "save: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Keyword for sending message through connected Exchange account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">message subject, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">message body, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to attach, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param html:</th><td class=\"field-body\">if message content is in HTML, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param images:</th><td class=\"field-body\">list of filepaths for inline use, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param cc:</th><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param bcc:</th><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save:</th><td class=\"field-body\">is sent message saved to Sent messages folder or not,\ndefaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Email addresses can be prefixed with <tt class=\"docutils literal\">ex:</tt> to indicate an Exchange\naccount address.</p>\n<p>Recipients is a <cite>required</cite> parameter.</p>\n</div>\n</div>",
                "shortdoc": "Keyword for sending message through connected Exchange account.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Message",
                "args": [
                    "criterion: str = ",
                    "timeout: float = 5.0",
                    "interval: float = 1.0",
                    "contains: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into INBOX.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">wait for message matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Wait for email matching <cite>criterion</cite> to arrive into INBOX.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Email.ImapSmtp": {
        "name": "RPA.Email.ImapSmtp",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>ImapSmtp</cite> is a library for sending, reading, and deleting emails.\n<cite>ImapSmtp</cite> is interfacing with SMTP and IMAP protocols.</p>\n<p><strong>Troubleshooting</strong></p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt>Authentication error with Gmail - &quot;Application-specific password required&quot;</dt>\n<dd>see. <a class=\"reference external\" href=\"https://support.google.com/mail/answer/185833?hl=en\">https://support.google.com/mail/answer/185833?hl=en</a></dd>\n</dl>\n</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>It is highly recommended to secure your passwords and take care\nthat they are not stored in the version control by mistake.\nSee <tt class=\"docutils literal\">RPA.Robocloud.Secrets</tt> how to store RPA Secrets into Robocloud.</p>\n<p>When sending HTML content with IMG tags, the <tt class=\"docutils literal\">src</tt> filenames must match\nthe base image name given with the <tt class=\"docutils literal\">images</tt> parameter.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Email.ImapSmtp</span><span class=\"p\">   </span><span class=\"s\">smtp_server=smtp.gmail.com</span><span class=\"p\">  </span><span class=\"s\">port=587</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize</span><span class=\"p\">  </span><span class=\"s\">account=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}  </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_PASSWORD</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}        </span><span class=\"s\">ACCOUNT_NAME</span><span class=\"p\">\n${</span><span class=\"nv\">GMAIL_PASSWORD</span><span class=\"p\">}       </span><span class=\"s\">ACCOUNT_PASSWORD</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}    </span><span class=\"s\">RECIPIENT</span><span class=\"p\">\n${</span><span class=\"nv\">BODY_IMG1</span><span class=\"p\">}            ${</span><span class=\"nv\">IMAGEDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png</span><span class=\"p\">\n${</span><span class=\"nv\">BODY_IMG2</span><span class=\"p\">}            ${</span><span class=\"nv\">IMAGEDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.png</span><span class=\"p\">\n${</span><span class=\"nv\">EMAIL_BODY</span><span class=\"p\">}     </span><span class=\"s\">&lt;h1&gt;Heading&lt;/h1&gt;&lt;p&gt;Status: &lt;img src='approved.png' alt='approved image'/&gt;&lt;/p&gt;</span><span class=\"p\">\n...               </span><span class=\"s\">&lt;p&gt;INVOICE: &lt;img src='invoice.png' alt='invoice image'/&gt;&lt;/p&gt;</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Sending email</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">  </span><span class=\"s\">sender=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}\n    ...           </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...           </span><span class=\"s\">subject=Message from RPA Robot</span><span class=\"p\">\n    ...           </span><span class=\"s\">body=RPA Robot message body</span><span class=\"p\">\n\n</span><span class=\"gu\">Sending HTML Email With Image</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]     </span><span class=\"s\">Sending email with HTML content and attachment</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">\n    ...                 </span><span class=\"s\">sender=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">subject=HTML email with body images (2) plus one attachment</span><span class=\"p\">\n    ...                 </span><span class=\"s\">body=</span><span class=\"p\">${</span><span class=\"nv\">EMAIL_BODY</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">html=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">images=</span><span class=\"p\">${</span><span class=\"nv\">BODY_IMG1</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">BODY_IMG2</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">attachments=example.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Email.ImapSmtp</span> <span class=\"kn\">import</span> <span class=\"n\">ImapSmtp</span>\n\n<span class=\"n\">gmail_account</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_NAME&quot;</span>\n<span class=\"n\">gmail_password</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_PASSWORD&quot;</span>\n<span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">gmail_account</span>\n\n<span class=\"n\">mail</span> <span class=\"o\">=</span> <span class=\"n\">ImapSmtp</span><span class=\"p\">(</span><span class=\"n\">smtp_server</span><span class=\"o\">=</span><span class=\"s2\">&quot;smtp.gmail.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">587</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">gmail_account</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">gmail_password</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n    <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">gmail_account</span><span class=\"p\">,</span>\n    <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s2\">&quot;RECIPIENT&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">&quot;Message from RPA Python&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">&quot;RPA Python message body&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "smtp_server: str = None",
                    "smtp_port: int = 587",
                    "imap_server: str = None",
                    "imap_port: int = 993",
                    "account: str = None",
                    "password: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Authorize",
                "args": [
                    "account: str = None",
                    "password: str = None",
                    "smtp_server: str = None",
                    "imap_server: str = None",
                    "smtp_port: int = None",
                    "imap_port: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Authorize user to SMTP and IMAP servers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">user account as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">user password as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server port, defaults to None (587 for SMTP)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server port, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Will use separately set credentials or those given in keyword call.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">smtp_server=smtp.gmail.com</span><span class=\"p\">  </span><span class=\"c\">smtp_port=587</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Authorize user to SMTP and IMAP servers.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Authorize Imap",
                "args": [
                    "account: str = None",
                    "password: str = None",
                    "imap_server: str = None",
                    "imap_port: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Authorize to IMAP server.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">IMAP account name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">IMAP account password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server port, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Can be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword <tt class=\"docutils literal\">Set Credentials</tt> has been called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize IMAP</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">imap.gmail.com</span><span class=\"p\">  </span><span class=\"c\">993</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Authorize to IMAP server.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Authorize Smtp",
                "args": [
                    "account: str = None",
                    "password: str = None",
                    "smtp_server: str = None",
                    "smtp_port: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Authorize to SMTP server.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">SMTP account name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">SMTP account password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server port, defaults to None (587 for SMTP)</td>\n</tr>\n</tbody>\n</table>\n<p>Can be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword <tt class=\"docutils literal\">Set Credentials</tt> has been called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize SMTP</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">smtp.gmail.com</span><span class=\"p\">  </span><span class=\"c\">587</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Authorize to SMTP server.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Folder",
                "args": [
                    "folder_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the new folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Folder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Create email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Folder",
                "args": [
                    "folder_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Folder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Delete email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Message",
                "args": [
                    "criterion: str = "
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete single message from server based on criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>If criterion does not return exactly 1 message then delete is not done.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Message</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;Greetings RPA developer&quot;</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Delete single message from server based on criterion.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Messages",
                "args": [
                    "criterion: str = "
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete messages from server based on criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT Greetings</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Delete messages from server based on criterion.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Flag Messages",
                "args": [
                    "criterion: str = None",
                    "unflag: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mark messages as <cite>flagged</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param unflag:</th><td class=\"field-body\">to mark messages as not <cite>flagged</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${flagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">    </span><span class=\"c\">Flag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span><span class=\"p\">\n</span><span class=\"c\">${unflagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Flag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span><span class=\"p\">  </span><span class=\"c\">unflag=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mark messages as <cite>flagged</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Folder List",
                "args": [
                    "subdirectory: str = None",
                    "pattern: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get list of folders on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param subdirectory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list subdirectories for this folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">list folders matching this pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of folders</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">\n</span><span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">  </span><span class=\"c\">pattern=important</span><span class=\"p\">\n</span><span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">  </span><span class=\"c\">subdirectory=sub</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get list of folders on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Messages",
                "args": [
                    "criterion: str = "
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return list of messages matching criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list emails matching this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">List Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{EMAILS}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Subject]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[From]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Date]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Delivered-To]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Received]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Has-Attachments]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Return list of messages matching criterion.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mark As Read",
                "args": [
                    "criterion: str = None",
                    "unread: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mark messages as <cite>read</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param unread:</th><td class=\"field-body\">to mark messages as not <cite>read</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${read}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Mark As Read</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mark messages as <cite>read</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mark As Unread",
                "args": [
                    "criterion: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mark messages as not <cite>read</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${unread}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Mark As Unread</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mark messages as not <cite>read</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rename Folder",
                "args": [
                    "oldname: str = None",
                    "newname: str = None",
                    "suppress_error: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Rename email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param oldname:</th><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newname:</th><td class=\"field-body\">new name for the folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param suppress_error:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">to silence warning message, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Rename Folder</span><span class=\"p\">   </span><span class=\"c\">subfolder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Rename email folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Attachment",
                "args": [
                    "message",
                    "target_folder",
                    "overwrite"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save mail attachment into local folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">message item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local folder for saving attachments to (needs to exist),\ndefaults to user's home directory if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">overwrite existing file is True, defaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">List Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{EMAILS}</span><span class=\"p\">\n    </span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${email}[Has-Attachments] == True</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">              </span><span class=\"c\">Save Attachment</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">target_folder=${CURDIR}</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Save mail attachment into local folder",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Attachments",
                "args": [
                    "criterion: str = ",
                    "target_folder: str = None",
                    "overwrite: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save mail attachments into local folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">attachments are saved for mails matching this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local folder for saving attachments to (needs to exist),\ndefaults to user's home directory if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">overwrite existing file is True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of saved attachments or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${numsaved}</span><span class=\"p\">  </span><span class=\"c\">Save Attachments</span><span class=\"p\">   </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">          </span><span class=\"c\">target_folder=${CURDIR}${/}messages</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Save mail attachments into local folder.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Messages",
                "args": [
                    "criterion: str = ",
                    "target_folder: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save messages based on criteria and store them to target folder\nwith attachment files.</p>\n<p>Does not save message if <cite>target_folder</cite> is not given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to folder where message are saved, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Save Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT Important message</span><span class=\"p\">  </span><span class=\"c\">target_folder=${USERDIR}${/}messages</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Save messages based on criteria and store them to target folder with attachment files.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Select Folder",
                "args": [
                    "folder_name: str = INBOX"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Select folder by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the folder to select</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">message count in the selected folder</td>\n</tr>\n</tbody>\n</table>\n<p>Returns number of messages in the folder or\nexception if folder does not exist on the server.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Select Folder</span><span class=\"p\">   </span><span class=\"c\">subfolder</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Select folder by name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Message",
                "args": [
                    "sender: str",
                    "recipients: str",
                    "subject: str = ",
                    "body: str = ",
                    "attachments: str = None",
                    "html: bool = False",
                    "images: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send SMTP email</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sender:</th><td class=\"field-body\">who is sending, ie. 'from'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">who is receiving, ie. 'to'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">mail subject field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">mail body content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to attach, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param html:</th><td class=\"field-body\">if message content is in HTML, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param images:</th><td class=\"field-body\">list of filepaths for inline use, defaults to []</td>\n</tr>\n</tbody>\n</table>\n<p>Valid sender values:</p>\n<ul class=\"simple\">\n<li>First Lastname &lt;<a class=\"reference external\" href=\"mailto:address&#64;domain\">address&#64;domain</a>&gt;</li>\n<li><a class=\"reference external\" href=\"mailto:address&#64;domain\">address&#64;domain</a></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Send Message</span><span class=\"p\">  </span><span class=\"c\">sender&#64;domain.com</span><span class=\"p\">  </span><span class=\"c\">recipient&#64;domain.com</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">subject=Greetings Software Robot Developer</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">body=${email_body}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">attachments:${CURDIR}${/}report.pdf</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Send SMTP email",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Smtp Hello",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send hello message to SMTP server.</p>\n<p>Required step when creating SMTP connection.</p>\n</div>\n</div>",
                "shortdoc": "Send hello message to SMTP server.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Credentials",
                "args": [
                    "account: str = None",
                    "password: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set credentials</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">user account as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">user password as string, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Credentials</span><span class=\"p\">   </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">\n</span><span class=\"c\">Authorize</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set credentials",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unflag Messages",
                "args": [
                    "criterion: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Mark messages as not <cite>flagged</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${unflagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Unflag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Mark messages as not <cite>flagged</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Message",
                "args": [
                    "criterion: str = ",
                    "timeout: float = 5.0",
                    "interval: float = 1.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into mailbox.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message filter to wait for, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">Wait For Message</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">  </span><span class=\"c\">timeout=300</span><span class=\"p\">  </span><span class=\"c\">interval=10</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Wait for email matching <cite>criterion</cite> to arrive into mailbox.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Excel.Application": {
        "name": "RPA.Excel.Application",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Excel.Application</cite> is a library for controlling an Excel application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">             </span><span class=\"nn\">RPA.Excel.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">          </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Teardown</span><span class=\"p\">       </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Manipulate Excel application</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">           </span><span class=\"s\">workbook.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Set Active Worksheet</span><span class=\"p\">    </span><span class=\"s\">sheetname=new stuff</span><span class=\"p\">\n    </span><span class=\"nf\">Write To Cells</span><span class=\"p\">          </span><span class=\"s\">row=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">column=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">value=my data</span><span class=\"p\">\n    </span><span class=\"nf\">Save Excel</span><span class=\"p\">\n\n</span><span class=\"gu\">Run Excel Macro</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">   </span><span class=\"s\">orders_with_macro.xlsm</span><span class=\"p\">\n    </span><span class=\"nf\">Run Macro</span><span class=\"p\">       </span><span class=\"s\">Sheet1.CommandButton1_Click</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"s1\">'workbook.xlsx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">set_active_worksheet</span><span class=\"p\">(</span><span class=\"n\">sheetname</span><span class=\"o\">=</span><span class=\"s1\">'new stuff'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_to_cells</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'new data'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">save_excel</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">quit_application</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [],
        "keywords": [
            {
                "name": "Add New Sheet",
                "args": [
                    "sheetname: str",
                    "tabname: str = None",
                    "create_workbook: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add new worksheet to workbook. Workbook is created by default if\nit does not exist.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param tabname:</th><td class=\"field-body\">name for tab, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param create_workbook:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">create workbook if True, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">error is raised if workbook does not exist and\n<cite>create_workbook</cite> is False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Add new worksheet to workbook. Workbook is created by default if it does not exist.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add New Workbook",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Adds new workbook for Excel application</p>\n</div>\n</div>",
                "shortdoc": "Adds new workbook for Excel application",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Document",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n</div>",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find First Available Cell",
                "args": [
                    "worksheet: typing.Any = None",
                    "row: int = 1",
                    "column: int = 1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find first available free cell</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple (row, column) or (None, None) if not found</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Find first available free cell",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find First Available Row",
                "args": [
                    "worksheet: typing.Any = None",
                    "row: int = 1",
                    "column: int = 1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find first available free row</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">row or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Find first available free row",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Application",
                "args": [
                    "visible: bool = False",
                    "display_alerts: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open the Excel application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open the Excel application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Workbook",
                "args": [
                    "filename: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open Excel by filename</p>\n<p>By default sets active worksheet to sheet number 1</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to filename</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open Excel by filename",
                "tags": [],
                "matched": true
            },
            {
                "name": "Quit Application",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Quit the application.</p>\n</div>\n</div>",
                "shortdoc": "Quit the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read From Cells",
                "args": [
                    "worksheet: typing.Any = None",
                    "row: int = None",
                    "column: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read value from cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Read value from cell.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Run Macro",
                "args": [
                    "macro_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Run Excel macro with given name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param macro_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">macro to run</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Run Excel macro with given name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Excel",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Saves Excel file</p>\n</div>\n</div>",
                "shortdoc": "Saves Excel file",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Excel As",
                "args": [
                    "filename: str",
                    "autofit: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save Excel with name if workbook is open</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">where to save file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param autofit:</th><td class=\"field-body\">autofit cell widths if True, defaults to False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Save Excel with name if workbook is open",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Active Worksheet",
                "args": [
                    "sheetname: str = None",
                    "sheetnumber: int = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set active worksheet by either its sheet number or name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of Excel sheet, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetnumber:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">index of Excel sheet, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set active worksheet by either its sheet number or name",
                "tags": [],
                "matched": true
            },
            {
                "name": "Write To Cells",
                "args": [
                    "worksheet: typing.Any = None",
                    "row: int = None",
                    "column: int = None",
                    "value: str = None",
                    "number_format: str = None",
                    "formula: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Write value, number_format and/or formula into cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">possible value to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">possible number format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param formula:</th><td class=\"field-body\">possible format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Write value, number_format and/or formula into cell.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Excel.Files": {
        "name": "RPA.Excel.Files",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>The <cite>Excel.Files</cite> library can be used to read and write Excel\nfiles without the need to start the actual Excel application.</p>\n<p>It supports both legacy .xls files and modern .xlsx files.</p>\n<p>Note: To run macros or load password protected worksheets,\nplease use the Excel application library.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>A common use-case is to load an existing Excel file as a table,\nwhich can be iterated over later in a Robot Framework keyword or task:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Read orders as table</span><span class=\"p\">\n    </span><span class=\"nf\">Open workbook</span><span class=\"p\">    ${</span><span class=\"nv\">ORDERS_FILE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}=    </span><span class=\"nf\">Read worksheet</span><span class=\"p\">   </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">orders</span><span class=\"p\">}=       </span><span class=\"nf\">Create table</span><span class=\"p\">     ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">orders</span><span class=\"p\">}\n    [</span><span class=\"kn\">Teardown</span><span class=\"p\">]       </span><span class=\"nf\">Close workbook</span>\n</pre>\n<p>Processing all worksheets in the Excel file and checking row count:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}   </span><span class=\"s\">/path/to/excel.xlsx</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Rows in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]      </span><span class=\"nf\">Open Workbook</span><span class=\"p\">    ${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}=   </span><span class=\"nf\">List Worksheets</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}\n        ${</span><span class=\"nv\">count</span><span class=\"p\">}=  </span><span class=\"nf\">Get row count in the sheet</span><span class=\"p\">   ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">Worksheet '</span><span class=\"p\">${</span><span class=\"nv\">sheet</span><span class=\"p\">}</span><span class=\"s\">' has </span><span class=\"p\">${</span><span class=\"nv\">count</span><span class=\"p\">}</span><span class=\"s\"> rows</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Get row count in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]      ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">sheet</span><span class=\"p\">}=        </span><span class=\"nf\">Read Worksheet</span><span class=\"p\">   ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">rows</span><span class=\"p\">}=         </span><span class=\"nf\">Get Length</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">rows</span><span class=\"p\">}</span>\n</pre>\n<p>Creating a new Excel file with a dictionary:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">    </span><span class=\"s\">20</span><span class=\"p\">\n        &amp;{</span><span class=\"nv\">row</span><span class=\"p\">}=       </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">\n        ...           </span><span class=\"s\">Row No</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}\n        ...           </span><span class=\"s\">Amount</span><span class=\"p\">   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">row</span><span class=\"p\">}  </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p>Creating a new Excel file with a list:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Variables ***</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">heading</span><span class=\"p\">}   </span><span class=\"s\">Row No</span><span class=\"p\">   </span><span class=\"s\">Amount</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">rows</span><span class=\"p\">}      &#64;{</span><span class=\"nv\">heading</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">   </span><span class=\"s\">1</span><span class=\"p\">  </span><span class=\"s\">20</span><span class=\"p\">\n        &#64;{</span><span class=\"nv\">row</span><span class=\"p\">}=         </span><span class=\"nf\">Create List</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append To List</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}  ${</span><span class=\"nv\">row</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be imported directly into Python.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Files</span> <span class=\"kn\">import</span> <span class=\"n\">Files</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_excel_worksheet</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">worksheet</span><span class=\"p\">):</span>\n    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span>\n    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">(</span><span class=\"n\">worksheet</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">close_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [],
        "keywords": [
            {
                "name": "Append Rows To Worksheet",
                "args": [
                    "content",
                    "name=None",
                    "header=False",
                    "start=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Append values to the end of the worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Rows of values to append</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">Set rows according to existing header row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Start of data, NOTE: Only required when headers is True</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Append values to the end of the worksheet.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Workbook",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close the active workbook.</p>\n</div>\n</div>",
                "shortdoc": "Close the active workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Workbook",
                "args": [
                    "path=None",
                    "fmt=xlsx"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create and open a new Excel workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Default save path for workbook</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format of workbook, i.e. xlsx or xls</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create and open a new Excel workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Worksheet",
                "args": [
                    "name",
                    "content=None",
                    "exist_ok=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a new worksheet in the current workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of new worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Optional content for worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exist_ok:</th><td class=\"field-body\">If <cite>False</cite>, raise an error if name is already in use</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create a new worksheet in the current workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Empty Row",
                "args": [
                    "name=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find the first empty row after existing content.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Find the first empty row after existing content.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Active Worksheet",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the name of the worksheet which is currently active.</p>\n</div>\n</div>",
                "shortdoc": "Get the name of the worksheet which is currently active.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Insert Image To Worksheet",
                "args": [
                    "row",
                    "column",
                    "path",
                    "scale=1.0",
                    "name=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Insert an image into the given cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">Path to image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scale:</th><td class=\"field-body\">Scale of image</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Insert an image into the given cell.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Worksheets",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List all names of worksheets in the given workbook.</p>\n</div>\n</div>",
                "shortdoc": "List all names of worksheets in the given workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Workbook",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open an existing Excel workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to Excel file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open an existing Excel workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read Worksheet",
                "args": [
                    "name=None",
                    "header=False",
                    "start=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read the content of a worksheet into a list of dictionaries.</p>\n<p>Each key in the dictionary will be either values from the header row,\nor Excel-style column letters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Read the content of a worksheet into a list of dictionaries.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read Worksheet As Table",
                "args": [
                    "name=None",
                    "header=False",
                    "trim=True",
                    "start=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read the content of a worksheet into a Table container. Allows\nsorting/filtering/manipulating using the <cite>RPA.Tables</cite> library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Remove all empty rows from the end of the worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Row index to start reading data from (1-indexed)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Read the content of a worksheet into a Table container. Allows sorting/filtering/manipulating using the <cite>RPA.Tables</cite> library.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Worksheet",
                "args": [
                    "name=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove a worksheet from the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to remove</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove a worksheet from the active workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rename Worksheet",
                "args": [
                    "src_name",
                    "dst_name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Rename an existing worksheet in the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param src_name:</th><td class=\"field-body\">Current name of worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dst_name:</th><td class=\"field-body\">Future name of worksheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Rename an existing worksheet in the active workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Workbook",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to save to. If not given, uses path given\nwhen opened or created.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Save the active workbook.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Active Worksheet",
                "args": [
                    "value"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set the active worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Index or name of worksheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set the active worksheet.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Worksheet Value",
                "args": [
                    "row",
                    "column",
                    "value",
                    "name=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set a cell value in the given worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set a cell value in the given worksheet.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Worksheet Exists",
                "args": [
                    "name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return True if worksheet with given name is in workbook.</p>\n</div>\n</div>",
                "shortdoc": "Return True if worksheet with given name is in workbook.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.FTP": {
        "name": "RPA.FTP",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>FTP</cite> library can be used to access an FTP server,\nand interact with files.</p>\n<p>The library is based on Python's built-in <a class=\"reference external\" href=\"https://docs.python.org/3/library/ftplib.html\">ftplib</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.FTP</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">HOST</span><span class=\"p\">}       </span><span class=\"s\">127.0.0.1</span><span class=\"p\">\n${</span><span class=\"nv\">PORT</span><span class=\"p\">}       </span><span class=\"s\">27345</span><span class=\"p\">\n${</span><span class=\"nv\">USER</span><span class=\"p\">}       </span><span class=\"s\">user</span><span class=\"p\">\n${</span><span class=\"nv\">PASS</span><span class=\"p\">}       </span><span class=\"s\">12345</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">List files on the server directory</span><span class=\"p\">\n    </span><span class=\"nf\">Connect</span><span class=\"p\">   ${</span><span class=\"nv\">HOST</span><span class=\"p\">}  ${</span><span class=\"nv\">PORT</span><span class=\"p\">}  ${</span><span class=\"nv\">USER</span><span class=\"p\">}  ${</span><span class=\"nv\">PASS</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}  </span><span class=\"nf\">List Files</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.FTP</span> <span class=\"kn\">import</span> <span class=\"n\">FTP</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">FTP</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"mi\">27345</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'12345'</span><span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [],
        "keywords": [
            {
                "name": "Abort",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Abort a file transfer in progress</p>\n</div>\n</div>",
                "shortdoc": "Abort a file transfer in progress",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close connection to the server unilaterally</p>\n</div>\n</div>",
                "shortdoc": "Close connection to the server unilaterally",
                "tags": [],
                "matched": true
            },
            {
                "name": "Connect",
                "args": [
                    "host: str",
                    "port: int = 21",
                    "user: str = None",
                    "password: str = None",
                    "tls: bool = False",
                    "transfer: str = passive"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param host:</th><td class=\"field-body\">address of the server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param port:</th><td class=\"field-body\">port of the server, defaults to 21</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">login name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">login password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param tls:</th><td class=\"field-body\">connect using TLS support, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param transfer:</th><td class=\"field-body\">mode of the transfer, defaults to &quot;passive&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises AuthenticationException:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on authentication error with the server</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Connect to FTP server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Cwd",
                "args": [
                    "dirname: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Change working directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Change working directory on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete",
                "args": [
                    "filepath: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">path to server file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete file on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Download",
                "args": [
                    "remotefile: str",
                    "localfile: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Download file from FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param remotefile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to remote file on the server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param localfile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the downloaded file on the local filesystem,\nif <cite>None</cite> will have same name as remote file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Download file from FTP server",
                "tags": [],
                "matched": true
            },
            {
                "name": "File Size",
                "args": [
                    "filepath: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return byte size of the file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">path to server file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return byte size of the file on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Welcome Message",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get server welcome message</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">welcome message</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get server welcome message",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Files",
                "args": [
                    "dirname: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List files on the server directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "List files on the server directory",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mkd",
                "args": [
                    "dirname: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a new directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create a new directory on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Pwd",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get current working directory on the server</p>\n</div>\n</div>",
                "shortdoc": "Get current working directory on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Quit",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send QUIT command to the server and close connection</p>\n</div>\n</div>",
                "shortdoc": "Send QUIT command to the server and close connection",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rename",
                "args": [
                    "fromname: str",
                    "toname: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Rename file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param fromname:</th><td class=\"field-body\">current name of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param toname:</th><td class=\"field-body\">new name for the file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Rename file on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rmd",
                "args": [
                    "dirname: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove directory on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Command",
                "args": [
                    "command: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Execute command on the server</p>\n<p>List of FTP commands:\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/List_of_FTP_commands\">https://en.wikipedia.org/wiki/List_of_FTP_commands</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param command:</th><td class=\"field-body\">name of the command to send</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Execute command on the server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Ascii Mode",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set transfer mode to ASCII</p>\n</div>\n</div>",
                "shortdoc": "Set transfer mode to ASCII",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Binary Mode",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set transfer mode to BINARY</p>\n</div>\n</div>",
                "shortdoc": "Set transfer mode to BINARY",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Debug Level",
                "args": [
                    "level: int = 0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set debug level for the library</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param level:</th><td class=\"field-body\">integer value of debug level, defaults to 0</td>\n</tr>\n</tbody>\n</table>\n<p>0 - no debugging output\n1 - moderate amount of debugging\n2+ - higher amount of debugging</p>\n</div>\n</div>",
                "shortdoc": "Set debug level for the library",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upload",
                "args": [
                    "localfile: str",
                    "remotefile: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upload file to FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param localfile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to file to upload</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param remotefile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of uploaded file in the server</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Upload file to FTP server",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.FileSystem": {
        "name": "RPA.FileSystem",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>The <cite>FileSystem</cite> library can be used to interact with files and directories\non the local computer. It can inspect and list files, remove and create them,\nread contents from files, and write data out.</p>\n<p>It shadows the built-in <cite>OperatingSystem</cite> library but contains keywords\nwhich are more RPA-oriented.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The library allows, for instance, iterating over files and inspecting them.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.FileSystem</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Delete large files</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    </span><span class=\"s\">archive/orders/</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">FILES</span><span class=\"p\">}\n        </span><span class=\"nf\">Run keyword if</span><span class=\"p\">    ${</span><span class=\"nv\">file.size</span><span class=\"p\">}</span><span class=\"s\"> &gt; 10**8</span><span class=\"p\">    </span><span class=\"s\">Remove file</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Read process output</span><span class=\"p\">\n    </span><span class=\"nf\">Start external program</span><span class=\"p\">\n    </span><span class=\"nf\">Wait until modified</span><span class=\"p\">    </span><span class=\"s\">process.log</span><span class=\"p\">\n    ${</span><span class=\"nv\">output</span><span class=\"p\">}=  </span><span class=\"nf\">Read file</span><span class=\"p\">  </span><span class=\"s\">process.log</span><span class=\"p\">\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]    ${</span><span class=\"nv\">output</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used inside Python.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.FileSystem</span> <span class=\"kn\">import</span> <span class=\"n\">FileSystem</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">move_to_archive</span><span class=\"p\">():</span>\n    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">FileSystem</span><span class=\"p\">()</span>\n\n    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">find_files</span><span class=\"p\">(</span><span class=\"s2\">&quot;**/*.xlsx&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;archive&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">move_files</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"s2\">&quot;archive&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [],
        "keywords": [
            {
                "name": "Absolute Path",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the absolute path to a file, and resolves symlinks.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path that will be resolved</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">absolute path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns the absolute path to a file, and resolves symlinks.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Append To Binary File",
                "args": [
                    "path",
                    "content"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Appends binary content to the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to append</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Appends binary content to the given file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Append To File",
                "args": [
                    "path",
                    "content",
                    "encoding=utf-8"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Appends text to the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to append</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of appended content</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Appends text to the given file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Change File Extension",
                "args": [
                    "path",
                    "extension"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Replaces file extension for file at given path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to rename</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param extension:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">new extension, e.g. .xlsx</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Replaces file extension for file at given path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy Directory",
                "args": [
                    "source",
                    "destination"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Copy directory from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">path to source directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to copy destination</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Copy directory from source path to destination path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy File",
                "args": [
                    "source",
                    "destination"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Copy a file from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">path to source file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to copy destination</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Copy a file from source path to destination path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy Files",
                "args": [
                    "sources",
                    "destination"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Copy multiple files to destination folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sources:</th><td class=\"field-body\">list of source files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to destination folder</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Copy multiple files to destination folder.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Binary File",
                "args": [
                    "path",
                    "content=None",
                    "overwrite=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Creates a new binary file, and writes content if any is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to write to file (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Creates a new binary file, and writes content if any is given.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Directory",
                "args": [
                    "path",
                    "parents=False",
                    "exist_ok=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Creates a directory and (optionally) non-existing parent directories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to new directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param parents:</th><td class=\"field-body\">create missing parent directories</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exist_ok:</th><td class=\"field-body\">continue without errors if directory already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Creates a directory and (optionally) non-existing parent directories.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create File",
                "args": [
                    "path",
                    "content=None",
                    "encoding=utf-8",
                    "overwrite=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Creates a new text file, and writes content if any is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to write to file (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of written content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Creates a new text file, and writes content if any is given.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Directory Exist",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given directory exists, False if not.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given directory exists, False if not.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does Directory Not Exist",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the directory does not exist, False if it does.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the directory does not exist, False if it does.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does File Exist",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given file exists, False if not.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given file exists, False if not.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Does File Not Exist",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the file does not exist, False if it does.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the file does not exist, False if it does.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Empty Directory",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes all the files in the given directory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">directory to remove files from</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Removes all the files in the given directory.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Files",
                "args": [
                    "pattern",
                    "include_dirs=True",
                    "include_files=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find files recursively according to a pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">search path in glob format pattern,\ne.g. <em>.xls or *</em>/orders.txt</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_dirs:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include directories in results</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_files:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include files in results</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of paths that match the pattern</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Find files recursively according to a pattern.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get File Creation Date",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the creation time in seconds.\nNote: Linux sets this whenever file metadata changes</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns the creation time in seconds. Note: Linux sets this whenever file metadata changes",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get File Extension",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the suffix for the file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns the suffix for the file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get File Modified Date",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the modified time in seconds.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns the modified time in seconds.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get File Name",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns only the filename portion of a path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns only the filename portion of a path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get File Size",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns the file size in bytes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns the file size in bytes.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Directory Empty",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given directory has no files or subdirectories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given directory has no files or subdirectories.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Directory Not Empty",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given directory has any files or subdirectories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given directory has any files or subdirectories.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is File Empty",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given file has no content, i.e. has zero size.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given file has no content, i.e. has zero size.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is File Not Empty",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Returns True if the given file has content, i.e. larger than zero size.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Returns True if the given file has content, i.e. larger than zero size.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Join Path",
                "args": [
                    "*parts"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Joins multiple parts of a path together.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param parts:</th><td class=\"field-body\">Components of the path, e.g. dir, subdir, filename.ext</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Joins multiple parts of a path together.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Directories In Directory",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Lists all the directories in the given directory, relative to it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory for search, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Lists all the directories in the given directory, relative to it.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Files In Directory",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Lists all the files in the given directory, relative to it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory for search, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Lists all the files in the given directory, relative to it.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Log Directory Tree",
                "args": [
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Logs all the files in the directory recursively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory to start from, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Logs all the files in the directory recursively.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Move Directory",
                "args": [
                    "source",
                    "destination",
                    "overwrite=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Move a directory from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source directory path for moving</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination directory if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Move a directory from source path to destination path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Move File",
                "args": [
                    "source",
                    "destination",
                    "overwrite=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Move a file from source path to destination path,\noptionally overwriting the destination.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source file path for moving</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Move a file from source path to destination path, optionally overwriting the destination.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Move Files",
                "args": [
                    "sources",
                    "destination",
                    "overwrite=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Move multiple files to the destination folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sources:</th><td class=\"field-body\">list of files to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move destination</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination files if they already exist</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Move multiple files to the destination folder.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Normalize Path",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes redundant separators or up-level references from path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path that will be normalized</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Removes redundant separators or up-level references from path.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read Binary File",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Reads a file in binary mode and returns the content.\nDoes not attempt to decode the content in any way.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to read</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Reads a file in binary mode and returns the content. Does not attempt to decode the content in any way.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read File",
                "args": [
                    "path",
                    "encoding=utf-8"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Reads a file as text, with given <cite>encoding</cite>, and returns the content.&quot;</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Reads a file as text, with given <cite>encoding</cite>, and returns the content.&quot;",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Directory",
                "args": [
                    "path",
                    "recursive=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes the given directory, and optionally everything it contains.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">remove all subdirectories and files</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Removes the given directory, and optionally everything it contains.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove File",
                "args": [
                    "path",
                    "missing_ok=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to the file to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ignore non-existent file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Removes the given file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Files",
                "args": [
                    "*paths",
                    "missing_ok=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes multiple files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param paths:</th><td class=\"field-body\">paths to files to be removed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ignore non-existent files</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Removes multiple files.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Run Keyword If File Exists",
                "args": [
                    "path",
                    "keyword",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>If file exists at <cite>path</cite>, execute given keyword with arguments.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keyword:</th><td class=\"field-body\">Robot Framework keyword to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">arguments to keyword</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Run keyword if file exists</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">Process orders</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "If file exists at <cite>path</cite>, execute given keyword with arguments.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Touch File",
                "args": [
                    "path"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Creates a file with no content, or if file already exists,\nupdates the modification and access times.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file which is touched</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Creates a file with no content, or if file already exists, updates the modification and access times.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Created",
                "args": [
                    "path",
                    "timeout=5.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Poll path until it exists, or raise exception if timeout\nis reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Poll path until it exists, or raise exception if timeout is reached.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Modified",
                "args": [
                    "path",
                    "timeout=5.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Poll path until it has been modified after the keyword was called,\nor raise exception if timeout is reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Poll path until it has been modified after the keyword was called, or raise exception if timeout is reached.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Until Removed",
                "args": [
                    "path",
                    "timeout=5.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Poll path until it doesn't exist, or raise exception if timeout\nis reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Poll path until it doesn't exist, or raise exception if timeout is reached.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.HTTP": {
        "name": "RPA.HTTP",
        "doc": "<p>RPA Framework HTTP library that extends functionality of RequestsLibrary, for more information see: <a href=\"https://github.com/MarketSquare/robotframework-requests\">https://github.com/MarketSquare/robotframework-requests</a></p>",
        "version": "0.6.6",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "*args",
                    "**kwargs"
                ],
                "doc": "<p>Initialize self.  See help(type(self)) for accurate signature.</p>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Create Client Cert Session",
                "args": [
                    "alias",
                    "url",
                    "headers={}",
                    "cookies={}",
                    "client_certs=None",
                    "timeout=None",
                    "proxies=None",
                    "verify=False",
                    "debug=0",
                    "max_retries=3",
                    "backoff_factor=0.1",
                    "disable_warnings=0",
                    "retry_status_list=[]",
                    "retry_method_list=['GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE']"
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>client_certs</code> ['client certificate', 'client key'] PEM files containing the client key and certificate</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Custom Session",
                "args": [
                    "alias",
                    "url",
                    "auth",
                    "headers={}",
                    "cookies={}",
                    "timeout=None",
                    "proxies=None",
                    "verify=False",
                    "debug=0",
                    "max_retries=3",
                    "backoff_factor=0.1",
                    "disable_warnings=0",
                    "retry_status_list=[]",
                    "retry_method_list=['GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE']"
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> A Custom Authentication object to be passed on to the requests library. <a href=\"http://docs.python-requests.org/en/master/user/advanced/#custom-authentication\">http://docs.python-requests.org/en/master/user/advanced/#custom-authentication</a></p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Digest Session",
                "args": [
                    "alias",
                    "url",
                    "auth",
                    "headers={}",
                    "cookies={}",
                    "timeout=None",
                    "proxies=None",
                    "verify=False",
                    "debug=0",
                    "max_retries=3",
                    "backoff_factor=0.1",
                    "disable_warnings=0",
                    "retry_status_list=[]",
                    "retry_method_list=['GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE']"
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Ntlm Session",
                "args": [
                    "alias",
                    "url",
                    "auth",
                    "headers={}",
                    "cookies={}",
                    "timeout=None",
                    "proxies=None",
                    "verify=False",
                    "debug=0",
                    "max_retries=3",
                    "backoff_factor=0.1",
                    "disable_warnings=0",
                    "retry_status_list=[]",
                    "retry_method_list=['GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE']"
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Session",
                "args": [
                    "alias",
                    "url",
                    "headers={}",
                    "cookies={}",
                    "auth=None",
                    "timeout=None",
                    "proxies=None",
                    "verify=False",
                    "debug=0",
                    "max_retries=3",
                    "backoff_factor=0.1",
                    "disable_warnings=0",
                    "retry_status_list=[]",
                    "retry_method_list=['GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE']"
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> List of username &amp; password for HTTP Basic Auth</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary that contains proxy urls for HTTP and HTTPS communication</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete All Sessions",
                "args": [],
                "doc": "<p>Removes all the session objects</p>",
                "shortdoc": "Removes all the session objects",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Request",
                "args": [
                    "alias",
                    "uri",
                    "data=None",
                    "json=None",
                    "params=None",
                    "headers=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a DELETE request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the DELETE request to</p>\n<p><code>json</code> a value that will be json encoded and sent as request data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a DELETE request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Download",
                "args": [
                    "url: str",
                    "target_file: str = None",
                    "binary: bool = True",
                    "verify: bool = True",
                    "force_new_session: bool = False",
                    "overwrite: bool = False"
                ],
                "doc": "<p>An alias for the <code>HTTP Get</code> keyword.</p>\n<p>The difference in use is that the URL is always downloaded based on the URL path (even without <code>target_file</code>). If there is a filename in the path, then that is used as <code>target_file</code> to save to. By default, the filename will be \"downloaded.html\".</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>binary</code> if file is saved as binary, default <code>True</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code></p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>",
                "shortdoc": "An alias for the <code>HTTP Get</code> keyword.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Current Session Alias",
                "args": [],
                "doc": "<p>Get request session alias that was used with the <code>HTTP Get</code> keyword.</p>\n<p>Return name of session alias.</p>",
                "shortdoc": "Get request session alias that was used with the <code>HTTP Get</code> keyword.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Request",
                "args": [
                    "alias",
                    "uri",
                    "headers=None",
                    "data=None",
                    "json=None",
                    "params=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a GET request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the GET request to</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as GET data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as GET data if data is not specified</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a GET request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Head Request",
                "args": [
                    "alias",
                    "uri",
                    "headers=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a HEAD request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the HEAD request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a HEAD request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Http Get",
                "args": [
                    "url: str",
                    "target_file: str = None",
                    "binary: bool = True",
                    "verify: bool = True",
                    "force_new_session: bool = False",
                    "overwrite: bool = False"
                ],
                "doc": "<p>A helper method for <code>Get Request</code> that will create a session, perform GET request, and store the target file, if set by the <code>target_file</code> parameter.</p>\n<p>The old session will be used if the URL scheme and the host are the same as previously, e.g., '<a href=\"https://www.google.fi\">https://www.google.fi</a>' part of the URL.</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>binary</code> if file is saved as binary, default <code>True</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code></p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>\n<p>Returns request response.</p>",
                "shortdoc": "A helper method for <code>Get Request</code> that will create a session, perform GET request, and store the target file, if set by the <code>target_file</code> parameter.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Options Request",
                "args": [
                    "alias",
                    "uri",
                    "headers=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the OPTIONS request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Patch Request",
                "args": [
                    "alias",
                    "uri",
                    "data=None",
                    "json=None",
                    "params=None",
                    "headers=None",
                    "files=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a PATCH request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PATCH request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PATCH data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as PATCH data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to PATCH to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a PATCH request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Post Request",
                "args": [
                    "alias",
                    "uri",
                    "data=None",
                    "json=None",
                    "params=None",
                    "headers=None",
                    "files=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a POST request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the POST request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as POST data or binary data that is sent as the raw body content or passed as such for multipart form data if <code>files</code> is also defined</p>\n<p><code>json</code> a value that will be json encoded and sent as POST data if files or data is not specified</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to POST to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a POST request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Put Request",
                "args": [
                    "alias",
                    "uri",
                    "data=None",
                    "json=None",
                    "params=None",
                    "files=None",
                    "headers=None",
                    "allow_redirects=None",
                    "timeout=None"
                ],
                "doc": "<p>Send a PUT request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PUT request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PUT data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as PUT data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "Send a PUT request on the session object found using the given <span class=\"name\">alias</span>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Request Should Be Successful",
                "args": [
                    "response"
                ],
                "doc": "<p>Fails if response status code is a client or server error (4xx, 5xx).</p>\n<p>The <code>response</code> is the output of other requests keywords like <code>Get Request</code>.</p>\n<p>In case of failure an HTTPError will be automatically raised.</p>",
                "shortdoc": "Fails if response status code is a client or server error (4xx, 5xx).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Session Exists",
                "args": [
                    "alias"
                ],
                "doc": "<p>Return True if the session has been already created</p>\n<p><code>alias</code> that has been used to identify the Session object in the cache</p>",
                "shortdoc": "Return True if the session has been already created",
                "tags": [],
                "matched": true
            },
            {
                "name": "Status Should Be",
                "args": [
                    "expected_status",
                    "response",
                    "msg=None"
                ],
                "doc": "<p>Fails if response status code is different than the expected.</p>\n<p><code>expected_status</code> could be the code number as an integer or as string. But it could also be a named status code like 'ok', 'created', 'accepted' or 'bad request', 'not found' etc.</p>\n<p>The <code>response</code> is the output of other requests keywords like <code>Get Request</code>.</p>\n<p>A custom message <code>msg</code> can be added to work like built in keywords.</p>",
                "shortdoc": "Fails if response status code is different than the expected.",
                "tags": [],
                "matched": true
            },
            {
                "name": "To Json",
                "args": [
                    "content",
                    "pretty_print=False"
                ],
                "doc": "<p>Convert a string to a JSON object</p>\n<p><code>content</code> String content to convert into JSON</p>\n<p><code>pretty_print</code> If defined, will output JSON is pretty print format</p>",
                "shortdoc": "Convert a string to a JSON object",
                "tags": [],
                "matched": true
            },
            {
                "name": "Update Session",
                "args": [
                    "alias",
                    "headers=None",
                    "cookies=None"
                ],
                "doc": "<p>Update Session Headers: update a HTTP Session Headers</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of headers merge into session</p>",
                "shortdoc": "Update Session Headers: update a HTTP Session Headers",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Images": {
        "name": "RPA.Images",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED</em> For image-based automation use <cite>RPA.Desktop</cite> instead.</p>\n<p><cite>Images</cite> is a library for taking screenshots, matching templates, and\ngenerally manipulating images. It can also be used for GUI-based automation\nwhen traditional UI locators are not available.</p>\n<p><strong>Coordinates</strong></p>\n<p>The coordinates used in the library are pairs of x and y values that\nrepresent pixels. The upper left corner of the image or screen\nis (0, 0). The x-coordinate increases towards the right, and the y-coordinate\nincreases towards the bottom.</p>\n<p>Regions are represented as tuples of (left, top, right, bottom). For example,\na 400 by 200-pixel region in the upper left corner would be (0, 0, 400, 200).</p>\n<p><strong>Template matching</strong></p>\n<p>Template matching refers to an operation where the (potential) location of\na smaller image is searched from a larger image. It can be used for verifying\ncertain conditions or locating UI elements for desktop or web automation.</p>\n<p><strong>Requirements</strong></p>\n<p>The default installation depends on <a class=\"reference external\" href=\"https://python-pillow.org/\">Pillow</a>\nlibrary, which is used for general image manipulation operations.</p>\n<p>For more robust and faster template matching, the library can use a combination\nof <a class=\"reference external\" href=\"https://numpy.org/\">NumPy</a> and <a class=\"reference external\" href=\"https://opencv.org/\">OpenCV</a>.\nThey can be installed by opting in to the <cite>cv</cite> dependency:</p>\n<p><tt class=\"docutils literal\">pip install rpaframework[cv]</tt></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Images</cite> library can be imported and used directly in Robot Framework,\nfor instance, for capturing screenshots or verifying something on the screen.</p>\n<p>Desktop automation based on images should be done using the corresponding\ndesktop library, i.e. <tt class=\"docutils literal\">RPA.Desktop</tt>.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Images</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Should show success</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]    </span><span class=\"s\">Raises ImageNotFoundError if success image is not on screen</span><span class=\"p\">\n    </span><span class=\"nf\">Find template on screen</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">success.png</span><span class=\"p\">\n\n</span><span class=\"gu\">Save screenshot to results</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]    </span><span class=\"s\">Saves screenshot of desktop with unique name</span><span class=\"p\">\n    ${</span><span class=\"nv\">timestamp</span><span class=\"p\">}=      </span><span class=\"nf\">Get current date</span><span class=\"p\">    </span><span class=\"s\">result_format=%H%M%S</span><span class=\"p\">\n    </span><span class=\"nf\">Take screenshot</span><span class=\"p\">    </span><span class=\"s\">filename=</span><span class=\"p\">${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">desktop_</span><span class=\"p\">${</span><span class=\"nv\">timestamp</span><span class=\"p\">}</span><span class=\"s\">.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Images</span> <span class=\"kn\">import</span> <span class=\"n\">Images</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">draw_matches_on_desktop</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">):</span>\n    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Images</span><span class=\"p\">()</span>\n    <span class=\"n\">screenshot</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">take_screenshot</span><span class=\"p\">()</span>\n\n    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">find_template_in_image</span><span class=\"p\">(</span><span class=\"n\">screenshot</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">show_region_in_image</span><span class=\"p\">(</span><span class=\"n\">screenshot</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">)</span>\n\n    <span class=\"n\">screenshot</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;matches.png&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Crop Image",
                "args": [
                    "image",
                    "region",
                    "filename=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Crop an existing image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">Image to crop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">Region to crop image to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Save cropped image to filename</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Crop an existing image.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Template In Image",
                "args": [
                    "image",
                    "template",
                    "region=None",
                    "limit=None",
                    "tolerance=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED</em> Use keyword <cite>Find</cite> from library <cite>RPA.Recognition</cite> instead\nAttempt to find the template from the given image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">Path to image or Image instance, used to search from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param template:</th><td class=\"field-body\">Path to image or Image instance, used to search with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">Limit returned results to maximum of <cite>limit</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">Area to search from. Can speed up search significantly.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param tolerance:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Tolerance for matching, value between 0.1 and 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of matching regions</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ImageNotFoundError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">No match was found</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED</em> Use keyword <cite>Find</cite> from library <cite>RPA.Recognition</cite> instead Attempt to find the template from the given image.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Template On Screen",
                "args": [
                    "template",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> use <cite>RPA.Desktop.Find Element</cite> instead\nAttempt to find the template image from the current desktop.\nFor argument descriptions, see <tt class=\"docutils literal\">find_template_in_image()</tt></p>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED!!</em> use <cite>RPA.Desktop.Find Element</cite> instead Attempt to find the template image from the current desktop. For argument descriptions, see <tt class=\"docutils literal\">find_template_in_image()</tt>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Pixel Color In Image",
                "args": [
                    "image",
                    "point"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the RGB value of a pixel in the image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to get pixel from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param point:</th><td class=\"field-body\">coordinates for pixel or Point object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get the RGB value of a pixel in the image.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Pixel Color On Screen",
                "args": [
                    "point"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the RGB value of a pixel currently on screen.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param point:</th><td class=\"field-body\">coordinates for pixel or Point object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get the RGB value of a pixel currently on screen.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Show Region In Image",
                "args": [
                    "image",
                    "region",
                    "color=red",
                    "width=5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a rectangle onto the image around the given region.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to draw onto</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">coordinates for region or Region object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param color:</th><td class=\"field-body\">color of rectangle</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">line width of rectangle</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Draw a rectangle onto the image around the given region.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Show Region On Screen",
                "args": [
                    "region",
                    "color=red",
                    "width=5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a rectangle around the given region on the current desktop.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">coordinates for region or Region object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param color:</th><td class=\"field-body\">color of rectangle</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">line width of rectangle</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Draw a rectangle around the given region on the current desktop.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Take Screenshot",
                "args": [
                    "filename=None",
                    "region=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED</em> Use keyword <cite>RPA.Desktop.Take Screenshot</cite> instead\nTake a screenshot of the current desktop.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Save screenshot to filename</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">Region to crop screenshot to</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED</em> Use keyword <cite>RPA.Desktop.Take Screenshot</cite> instead Take a screenshot of the current desktop.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait Template On Screen",
                "args": [
                    "template",
                    "timeout=5",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><em>DEPRECATED!!</em> use <cite>RPA.Desktop.Wait For Element</cite> instead\nWait for template image to appear on current desktop.\nFor further argument descriptions, see <tt class=\"docutils literal\">find_template_in_image()</tt></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Time to wait for template (in seconds)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "<em>DEPRECATED!!</em> use <cite>RPA.Desktop.Wait For Element</cite> instead Wait for template image to appear on current desktop. For further argument descriptions, see <tt class=\"docutils literal\">find_template_in_image()</tt>",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.JSON": {
        "name": "RPA.JSON",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>JSON</cite> is a library for manipulating <a class=\"reference external\" href=\"http://json.org/\">JSON</a> objects.\nLocating specific elements in the structure is done using <a class=\"reference external\" href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a>.</p>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [],
        "keywords": [
            {
                "name": "Add to JSON",
                "args": [
                    "doc: typing.Any",
                    "expr: str",
                    "value: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add items into a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">list to append into json or dictionary to update into json</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Add items into a JSON object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Convert JSON to String",
                "args": [
                    "doc: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Convert JSON object to a string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a string</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Convert JSON object to a string.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Convert String to JSON",
                "args": [
                    "doc: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Convert a string to a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Convert a string to a JSON object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete from JSON",
                "args": [
                    "doc: typing.Any",
                    "expr: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete item from a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object or a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete item from a JSON object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get value from JSON",
                "args": [
                    "doc: typing.Any",
                    "expr: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get a value from a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object or a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if expression matches more than one item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">matching item</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get a value from a JSON object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get values from JSON",
                "args": [
                    "doc: typing.Any",
                    "expr: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get values from a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object or a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of matching values</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get values from a JSON object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Load JSON from file",
                "args": [
                    "filename: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Load JSON data from a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Load JSON data from a file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save JSON to file",
                "args": [
                    "doc: typing.Any",
                    "filename: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save JSON object into a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object or a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Save JSON object into a file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Update value to JSON",
                "args": [
                    "doc: typing.Any",
                    "expr: str",
                    "value: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Update value in a JSON object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">json as a dictionary object or a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">new value for the matching item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">json as a dictionary object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Update value in a JSON object.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Netsuite": {
        "name": "RPA.Netsuite",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Netsuite</cite> is a library for accessing Netsuite using NetSuite SOAP web service SuiteTalk.\nThe library extends the <a class=\"reference external\" href=\"https://github.com/fylein/netsuite-sdk-py\">netsuitesdk library</a>.</p>\n<p>More information available at <a class=\"reference external\" href=\"http://www.netsuite.com/portal/platform/developer/suitetalk.shtml\">NetSuite SOAP webservice SuiteTalk</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Netsuite</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Netsuite</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get data from Netsuite and Store into Excel files</span><span class=\"p\">\n    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}=        </span><span class=\"nf\">Get Accounts</span><span class=\"p\">   </span><span class=\"s\">account_type=_expense</span><span class=\"p\">\n    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}=        </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows To Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">accounts</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span><span class=\"p\">       </span><span class=\"s\">netsuite_accounts.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Close Workbook</span><span class=\"p\">\n    ${</span><span class=\"nv\">bills</span><span class=\"p\">}=           </span><span class=\"nf\">Get Vendor Bills</span><span class=\"p\">\n    ${</span><span class=\"nv\">bills</span><span class=\"p\">}=           </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">bills</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows To Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">bills</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span><span class=\"p\">       </span><span class=\"s\">netsuite_bills.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Close Workbook</span><span class=\"p\">\n\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Authorize Netsuite</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=     </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">netsuite</span><span class=\"p\">\n    </span><span class=\"nf\">Connect</span><span class=\"p\">\n    ...        </span><span class=\"s\">account=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[ACCOUNT]</span><span class=\"p\">\n    ...        </span><span class=\"s\">consumer_key=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_KEY]</span><span class=\"p\">\n    ...        </span><span class=\"s\">consumer_secret=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_KEY]</span><span class=\"p\">\n    ...        </span><span class=\"s\">token_key=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_SECRET]</span><span class=\"p\">\n    ...        </span><span class=\"s\">token_secret=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[TOKEN_KEY]</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Netsuite</span> <span class=\"kn\">import</span> <span class=\"n\">Netsuite</span>\n\n<span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">Netsuite</span><span class=\"p\">()</span>\n<span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">get_accounts</span><span class=\"p\">()</span>\n<span class=\"n\">currencies</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">get_currencies</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Connect",
                "args": [
                    "account: str = None",
                    "consumer_key: str = None",
                    "consumer_secret: str = None",
                    "token_key: str = None",
                    "token_secret: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Connect to Netsuite with credentials from environment\nvariables.</p>\n<p>Parameters are not logged into Robot Framework log.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ACCOUNT</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_CONSUMER_KEY</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_CONSUMER_SECRET</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_TOKEN_KEY</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_TOKEN_SECRET</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Connect to Netsuite with credentials from environment variables.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Accounts",
                "args": [
                    "count: int = 100",
                    "account_type: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Accounts of any type or specified type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of Accounts to return, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if None returns all account types, example. &quot;_expense&quot;,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">accounts</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Accounts of any type or specified type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Classifications",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all Netsuite Classifications</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">classifications</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all Netsuite Classifications",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Currencies",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all Netsuite Currencies</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">currencies</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all Netsuite Currencies",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Currency",
                "args": [
                    "currency_id: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all a Netsuite Currency by its ID</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param currency_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the currency to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">currency</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all a Netsuite Currency by its ID",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Departments",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all Netsuite Departments</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">departments</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all Netsuite Departments",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Locations",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all Netsuite Locations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">locations</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all Netsuite Locations",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Vendor Bills",
                "args": [
                    "count: int = 10"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get list of vendor bills</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of vendor bills to return, defaults to 10</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of vendor bills</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get list of vendor bills",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Vendors",
                "args": [
                    "count: int = 10"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get list of vendors</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of vendors to return, defaults to 10</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of vendors</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get list of vendors",
                "tags": [],
                "matched": true
            },
            {
                "name": "Login",
                "args": [
                    "account: str = None",
                    "email: str = None",
                    "password: str = None",
                    "role: str = None",
                    "appid: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Login to Netsuite with credentials from environment variables</p>\n<p>Parameters are not logged into Robot Framework log.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ACCOUNT</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param email:</th><td class=\"field-body\">parameter or environment variable <cite>NS_EMAIL</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">parameter or environment variable <cite>NS_PASSWORD</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param role:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ROLE</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param appid:</th><td class=\"field-body\">parameter or environment variable <cite>NS_APPID</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Login to Netsuite with credentials from environment variables",
                "tags": [],
                "matched": true
            },
            {
                "name": "Netsuite Get",
                "args": [
                    "record_type: str = None",
                    "internal_id: str = None",
                    "external_id: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all records of given type and internalId and/or externalId.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param record_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of Netsuite record to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param internal_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">internalId of the type, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param external_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">external_id of the type, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if record_type is not given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">records as a list or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all records of given type and internalId and/or externalId.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Netsuite Get All",
                "args": [
                    "record_type: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all records of given type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param record_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of Netsuite record to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if record_type is not given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">records as a list or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all records of given type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Netsuite Search",
                "args": [
                    "type_name: str",
                    "search_value: str",
                    "operator: str = contains",
                    "page_size: int = 5"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Search Netsuite for value from a type. Default operator is\n<cite>contains</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param type_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search target type name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_value:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">what to search for within type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">name of the operation, defaults to &quot;contains&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param page_size:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">result items within one page, defaults to 5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">paginated search object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Search Netsuite for value from a type. Default operator is <cite>contains</cite>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Netsuite Search All",
                "args": [
                    "type_name: str",
                    "page_size: int = 20"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Search Netsuite for a type results.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param type_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search target type name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param page_size:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">result items within one page, defaults to 5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">paginated search object</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Search Netsuite for a type results.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Notifier": {
        "name": "RPA.Notifier",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Notifier</cite> is a library interfacting with different notification services.</p>\n<p>Supported services:</p>\n<ul class=\"simple\">\n<li>email</li>\n<li>gmail</li>\n<li>pushover</li>\n<li>slack</li>\n<li>telegram</li>\n<li>twilio</li>\n</ul>\n<p>Services not supported yet:</p>\n<ul class=\"simple\">\n<li>gitter</li>\n<li>join</li>\n<li>mailgun</li>\n<li>pagerduty</li>\n<li>popcornnotify</li>\n<li>pushbullet</li>\n<li>simplepush</li>\n<li>statuspage</li>\n<li>zulip</li>\n</ul>\n<p>Read more at <a class=\"reference external\" href=\"https://notifiers.readthedocs.io/en/latest/\">https://notifiers.readthedocs.io/en/latest/</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Notifier</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">SLACK_WEBHOOK</span><span class=\"p\">}   </span><span class=\"s\">https://hooks.slack.com/services/WEBHOOKDETAILS</span><span class=\"p\">\n${</span><span class=\"nv\">CHANNEL</span><span class=\"p\">}         </span><span class=\"s\">notification-channel</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Lets notify</span><span class=\"p\">\n   </span><span class=\"nf\">Notify Slack</span><span class=\"p\">   </span><span class=\"s\">message from robot</span><span class=\"p\">  </span><span class=\"s\">channel=</span><span class=\"p\">${</span><span class=\"nv\">CHANNEL</span><span class=\"p\">}  </span><span class=\"s\">webhook_url=</span><span class=\"p\">${</span><span class=\"nv\">SLACK_WEBHOOK</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Notifier</span> <span class=\"kn\">import</span> <span class=\"n\">Notifier</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Notifier</span><span class=\"p\">()</span>\n\n<span class=\"n\">slack_attachments</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"p\">{</span>\n      <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;attachment 1&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;fallback&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;liverpool logo&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;image_url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://upload.wikimedia.org/wikipedia/fi/thumb/c/cd/Liverpool_FC-n_logo.svg/1200px-Liverpool_FC-n_logo.svg.png&quot;</span><span class=\"p\">,</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">notify_slack</span><span class=\"p\">(</span>\n   <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'message for the Slack'</span><span class=\"p\">,</span>\n   <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s2\">&quot;notification-channel&quot;</span><span class=\"p\">,</span>\n   <span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">slack_webhook_url</span><span class=\"p\">,</span>\n   <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"n\">slack_attachments</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [],
        "keywords": [
            {
                "name": "Notify Email",
                "args": [
                    "message: str = None",
                    "to: str = None",
                    "username: str = None",
                    "password: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using email service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param to:</th><td class=\"field-body\">target of email message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">email service username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">email service password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using email service",
                "tags": [],
                "matched": true
            },
            {
                "name": "Notify Gmail",
                "args": [
                    "message: str = None",
                    "to: str = None",
                    "username: str = None",
                    "password: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using Gmail service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param to:</th><td class=\"field-body\">target of email message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">GMail service username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">GMail service password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using Gmail service",
                "tags": [],
                "matched": true
            },
            {
                "name": "Notify Pushover",
                "args": [
                    "message: str = None",
                    "user: str = None",
                    "token: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using Pushover service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">target user for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">service token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using Pushover service",
                "tags": [],
                "matched": true
            },
            {
                "name": "Notify Slack",
                "args": [
                    "message: str = None",
                    "channel: str = None",
                    "webhook_url: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using Slack service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param channel:</th><td class=\"field-body\">target channel for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param webhook_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Slack webhook url</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using Slack service",
                "tags": [],
                "matched": true
            },
            {
                "name": "Notify Telegram",
                "args": [
                    "message: str = None",
                    "chat_id: str = None",
                    "token: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using Telegram service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param chat_id:</th><td class=\"field-body\">target chat id for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">service token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using Telegram service",
                "tags": [],
                "matched": true
            },
            {
                "name": "Notify Twilio",
                "args": [
                    "message: str = None",
                    "number_from: str = None",
                    "number_to: str = None",
                    "account_sid: str = None",
                    "token: str = None",
                    "**kwargs: dict"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Notify using Twilio service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_from:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number where the message comes from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_to:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number where the messages goes to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_sid:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Twilio account SID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">Twilio account token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Notify using Twilio service",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Outlook.Application": {
        "name": "RPA.Outlook.Application",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Outlook.Application</cite> is a library for controlling the Outlook application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">                 </span><span class=\"nn\">RPA.Outlook.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">              </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">          </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT</span><span class=\"p\">}            </span><span class=\"s\">address&#64;domain.com</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Send message</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">       </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT</span><span class=\"p\">}\n    ...                </span><span class=\"s\">subject=This is the subject</span><span class=\"p\">\n    ...                </span><span class=\"s\">body=This is the message body</span><span class=\"p\">\n    </span><span class=\"nf\">..</span><span class=\"p\">                 </span><span class=\"s\">attachments=approved.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Outlook.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_message</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n        <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s1\">'EMAILADDRESS_1, EMAILADDRESS_2'</span><span class=\"p\">,</span>\n        <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'email subject'</span><span class=\"p\">,</span>\n        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'email body message'</span><span class=\"p\">,</span>\n        <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"s1\">'../orders.csv'</span>\n</pre>\n<p>For more information, see: <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12\">https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12</a>)</p>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [],
        "keywords": [
            {
                "name": "Close Document",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n</div>",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Application",
                "args": [
                    "visible: bool = False",
                    "display_alerts: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open the Outlook application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open the Outlook application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Quit Application",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Quit the application.</p>\n</div>\n</div>",
                "shortdoc": "Quit the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Send Message",
                "args": [
                    "recipients: typing.Any",
                    "subject: str",
                    "body: str",
                    "html_body: bool = False",
                    "attachments: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send message with Outlook</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of addresses</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">email subject</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">email body</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param html_body:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if body contains HTML, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to include in the email, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if there were no errors</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Send message with Outlook",
                "tags": [],
                "matched": true
            },
            {
                "name": "Wait For Message",
                "args": [
                    "criterion: str = None",
                    "timeout: float = 5.0",
                    "interval: float = 1.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into mailbox.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message filter to wait for, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages or False</td>\n</tr>\n</tbody>\n</table>\n<p>Possible wait criterias are: SUBJECT, SENDER and BODY</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Wait for message</span><span class=\"p\">     </span><span class=\"c\">SUBJECT:rpa task calling</span><span class=\"p\">    </span><span class=\"c\">timeout=300</span><span class=\"p\">    </span><span class=\"c\">interval=10</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Wait for email matching <cite>criterion</cite> to arrive into mailbox.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.PDF": {
        "name": "RPA.PDF",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>PDF</cite> is a library for managing PDF documents.</p>\n<p>It provides an easy method of generating a PDF document from an HTML formatted\ntemplate file.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}    </span><span class=\"s\">order.template</span><span class=\"p\">\n${</span><span class=\"nv\">PDF</span><span class=\"p\">}         </span><span class=\"s\">result.pdf</span><span class=\"p\">\n&amp;{</span><span class=\"nv\">VARS</span><span class=\"p\">}        </span><span class=\"s\">name=Robot Generated</span><span class=\"p\">\n...            </span><span class=\"s\">email=robot&#64;domain.com</span><span class=\"p\">\n...            </span><span class=\"s\">zip=00100</span><span class=\"p\">\n...            </span><span class=\"s\">items=Item 1, Item 2</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Create PDF from HTML template</span><span class=\"p\">\n    </span><span class=\"nf\">Template HTML to PDF</span><span class=\"p\">   ${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}  ${</span><span class=\"nv\">PDF</span><span class=\"p\">}  ${</span><span class=\"nv\">VARS</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;item 1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 3&quot;</span><span class=\"p\">]</span>\n<span class=\"nb\">vars</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Robot Process&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;robot&#64;domain.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;zip&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;00100&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;items&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&lt;br/&gt;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">template_html_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;order.template&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;order.pdf&quot;</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "outdir: str = ."
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Accept Page Break",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Accept automatic page break or not</p>\n</div>\n</div>",
                "shortdoc": "Accept automatic page break or not",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Font",
                "args": [
                    "family",
                    "style=",
                    "fname=",
                    "uni=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add a TrueType or Type1 font</p>\n</div>\n</div>",
                "shortdoc": "Add a TrueType or Type1 font",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Image To Pdf",
                "args": [
                    "imagefile",
                    "source=None",
                    "target=None",
                    "coverage=0.2"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add image to PDF which can be new or existing PDF.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imagefile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to image file to add into PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">filepath to source, if not given add image to currently\nactive PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">filepath of target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param coverage:</th><td class=\"field-body\">[description], defaults to 0.2</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description]</td>\n</tr>\n</tbody>\n</table>\n<p>Result will be always written to <cite>target_pdf</cite> so that needs\nto be given for the keyword.</p>\n</div>\n</div>",
                "shortdoc": "Add image to PDF which can be new or existing PDF.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Link",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a new internal link</p>\n</div>\n</div>",
                "shortdoc": "Create a new internal link",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Page",
                "args": [
                    "orientation="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Start a new page</p>\n</div>\n</div>",
                "shortdoc": "Start a new page",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Pages",
                "args": [
                    "pages: int = 1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Adds pages into PDF documents.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">number of pages to add, defaults to 1</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Adds pages into PDF documents.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Pages To Document",
                "args": [
                    "pages: int = 1",
                    "source_pdf: str = None",
                    "target_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add empty pages into current source document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">number of pages to add, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename to the target pdf, stored by default\nto <cite>output_directory</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Add empty pages into current source document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Alias Nb Pages",
                "args": [
                    "alias={nb}"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Define an alias for total number of pages</p>\n</div>\n</div>",
                "shortdoc": "Define an alias for total number of pages",
                "tags": [],
                "matched": true
            },
            {
                "name": "Cell",
                "args": [
                    "w",
                    "h=0",
                    "txt=",
                    "border=0",
                    "ln=0",
                    "align=",
                    "fill=0",
                    "link="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Output a cell</p>\n</div>\n</div>",
                "shortdoc": "Output a cell",
                "tags": [],
                "matched": true
            },
            {
                "name": "Check Page",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Decorator to protect drawing methods</p>\n</div>\n</div>",
                "shortdoc": "Decorator to protect drawing methods",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Terminate document</p>\n</div>\n</div>",
                "shortdoc": "Terminate document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close All Pdf Documents",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close all opened PDF file descriptors.</p>\n</div>\n</div>",
                "shortdoc": "Close all opened PDF file descriptors.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Close Pdf Document",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close PDF file descriptor for certain file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file descriptor for the file is not found</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Close PDF file descriptor for certain file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Code 39",
                "args": [
                    "txt",
                    "x",
                    "y",
                    "w=1.5",
                    "h=5.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Barcode 3of9</p>\n</div>\n</div>",
                "shortdoc": "Barcode 3of9",
                "tags": [],
                "matched": true
            },
            {
                "name": "Dashed Line",
                "args": [
                    "x1",
                    "y1",
                    "x2",
                    "y2",
                    "dash_length=1",
                    "space_length=1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a dashed line. Same interface as line() except:\n- dash_length: Length of the dash\n- space_length: Length of the space between dashes</p>\n</div>\n</div>",
                "shortdoc": "Draw a dashed line. Same interface as line() except: - dash_length: Length of the dash - space_length: Length of the space between dashes",
                "tags": [],
                "matched": true
            },
            {
                "name": "Dump Pdf As Xml",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get PDFMiner format XML dump of the PDF</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">XML content</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get PDFMiner format XML dump of the PDF",
                "tags": [],
                "matched": true
            },
            {
                "name": "Ellipse",
                "args": [
                    "x",
                    "y",
                    "w",
                    "h",
                    "style="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a ellipse</p>\n</div>\n</div>",
                "shortdoc": "Draw a ellipse",
                "tags": [],
                "matched": true
            },
            {
                "name": "Error",
                "args": [
                    "msg"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Fatal error</p>\n</div>\n</div>",
                "shortdoc": "Fatal error",
                "tags": [],
                "matched": true
            },
            {
                "name": "Extract Pages From Pdf",
                "args": [
                    "source_pdf: str = None",
                    "target_pdf: str = None",
                    "pages: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Extract pages from source PDF and save to target PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename to the target pdf, stored by default\nto <cite>output_directory</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 0)\nif None then extracts all pages</td>\n</tr>\n</tbody>\n</table>\n<p>Page numbers starting from 1.</p>\n</div>\n</div>",
                "shortdoc": "Extract pages from source PDF and save to target PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Footer",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Footer to be implemented in your own inherited class</p>\n</div>\n</div>",
                "shortdoc": "Footer to be implemented in your own inherited class",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get All Figures",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return all figures in the PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of figures divided into pages</td>\n</tr>\n</tbody>\n</table>\n<p>PDF needs to be parsed before elements can be found.</p>\n</div>\n</div>",
                "shortdoc": "Return all figures in the PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Info",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get information from PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of PDF information</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get information from PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Input Fields",
                "args": [
                    "source_pdf: str = None",
                    "replace_none_value: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get input fields in the PDF.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source filepath, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param replace_none_value:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if value is None replace it with key name,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of input key values or <cite>None</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Stores input fields internally so that they can be used without\nparsing PDF again.</p>\n<p>Parameter <cite>replace_none_value</cite> is for convience to visualize fields.</p>\n</div>\n</div>",
                "shortdoc": "Get input fields in the PDF.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Number Of Pages",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get number of pages in the document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises PdfReadError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file is encrypted or other restrictions are in place</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get number of pages in the document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Output Directory",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get output directory where target files are saved to.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">absolute filepath as string</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get output directory where target files are saved to.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get String Width",
                "args": [
                    "s"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get width of a string in the current font</p>\n</div>\n</div>",
                "shortdoc": "Get width of a string in the current font",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Text From Pdf",
                "args": [
                    "source_pdf: str = None",
                    "pages: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get text from set of pages in source PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to get text (numbers start from 0)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of pages and their texts</td>\n</tr>\n</tbody>\n</table>\n<p>PDF needs to be parsed before text can be read.</p>\n</div>\n</div>",
                "shortdoc": "Get text from set of pages in source PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Value From Anchor",
                "args": [
                    "locator: str",
                    "pagenum: int = 1",
                    "direction: str = right",
                    "strict: bool = False",
                    "regexp: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get closest text (value) to anchor element.</p>\n<p>PDF needs to be parsed before elements can be found.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element to set anchor to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pagenum:</th><td class=\"field-body\">page number where search if performed on, default 1 (first)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param direction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">in which direction to search for text,\ndirections  'top', 'bottom', 'left' or 'right', defaults to 'right'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">if element margins should be used for matching points,\nused when direction is 'top' or 'bottom', default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param regexp:</th><td class=\"field-body\">expected format of value to match, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">closest matching text or <cite>None</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get closest text (value) to anchor element.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get X",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get x position</p>\n</div>\n</div>",
                "shortdoc": "Get x position",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Y",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get y position</p>\n</div>\n</div>",
                "shortdoc": "Get y position",
                "tags": [],
                "matched": true
            },
            {
                "name": "Header",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Header to be implemented in your own inherited class</p>\n</div>\n</div>",
                "shortdoc": "Header to be implemented in your own inherited class",
                "tags": [],
                "matched": true
            },
            {
                "name": "Html To Pdf",
                "args": [
                    "content: str = None",
                    "filename: str = None",
                    "variables: dict = None",
                    "create_dirs: bool = True",
                    "exists_ok: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Use HTML content to generate PDF file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">HTML content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath where to save PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param variables:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dictionary of variables to fill into template, defaults to {}</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param create_dirs:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory structure is created if it is missing,\ndefault <cite>True</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param exists_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file is overwritten if it exists, default <cite>True</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Use HTML content to generate PDF file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Image",
                "args": [
                    "name",
                    "x=None",
                    "y=None",
                    "w=0",
                    "h=0",
                    "type=",
                    "link="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Put an image on the page</p>\n</div>\n</div>",
                "shortdoc": "Put an image on the page",
                "tags": [],
                "matched": true
            },
            {
                "name": "Interleaved 2 Of 5",
                "args": [
                    "txt",
                    "x",
                    "y",
                    "w=1.0",
                    "h=10.0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Barcode I2of5 (numeric), adds a 0 if odd lenght</p>\n</div>\n</div>",
                "shortdoc": "Barcode I2of5 (numeric), adds a 0 if odd lenght",
                "tags": [],
                "matched": true
            },
            {
                "name": "Is Pdf Encrypted",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Check if PDF is encrypted.</p>\n<p>Returns True even if PDF was decrypted.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if file is encrypted</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Check if PDF is encrypted.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Line",
                "args": [
                    "x1",
                    "y1",
                    "x2",
                    "y2"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a line</p>\n</div>\n</div>",
                "shortdoc": "Draw a line",
                "tags": [],
                "matched": true
            },
            {
                "name": "Link",
                "args": [
                    "x",
                    "y",
                    "w",
                    "h",
                    "link"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Put a link on the page</p>\n</div>\n</div>",
                "shortdoc": "Put a link on the page",
                "tags": [],
                "matched": true
            },
            {
                "name": "Ln",
                "args": [
                    "h="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Line Feed; default value is last cell height</p>\n</div>\n</div>",
                "shortdoc": "Line Feed; default value is last cell height",
                "tags": [],
                "matched": true
            },
            {
                "name": "Multi Cell",
                "args": [
                    "w",
                    "h",
                    "txt=",
                    "border=0",
                    "align=J",
                    "fill=0",
                    "split_only=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Output text with automatic or explicit line breaks</p>\n</div>\n</div>",
                "shortdoc": "Output text with automatic or explicit line breaks",
                "tags": [],
                "matched": true
            },
            {
                "name": "Normalize Text",
                "args": [
                    "txt"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Check that text input is in the correct format/encoding</p>\n</div>\n</div>",
                "shortdoc": "Check that text input is in the correct format/encoding",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Begin document</p>\n</div>\n</div>",
                "shortdoc": "Begin document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Pdf Document",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF is already open</td>\n</tr>\n</tbody>\n</table>\n<p>Also opens file for reading.</p>\n</div>\n</div>",
                "shortdoc": "Open PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Output",
                "args": [
                    "name=",
                    "dest="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Output PDF to some destination</p>\n</div>\n</div>",
                "shortdoc": "Output PDF to some destination",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page No",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get current page number</p>\n</div>\n</div>",
                "shortdoc": "Get current page number",
                "tags": [],
                "matched": true
            },
            {
                "name": "Page Rotate",
                "args": [
                    "pages: int",
                    "source_pdf: str = None",
                    "target_pdf: str = None",
                    "clockwise: bool = True",
                    "angle: int = 90"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Rotate pages in source PDF document and save to target PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename to the target pdf, stored by default\nto <cite>output_directory</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 0)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param clockwise:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directorion that page will be rotated to, default True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param angle:</th><td class=\"field-body\">number of degrees to rotate, default 90</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Rotate pages in source PDF document and save to target PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Parse Pdf",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Parse source PDF into entities which can be\nused for text searches for example.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Parse source PDF into entities which can be used for text searches for example.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Pdf Decrypt",
                "args": [
                    "source_pdf: str = None",
                    "target_pdf: str = None",
                    "password: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Decrypt PDF with password.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the decrypted pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">password as a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if decrypt was successful, else False or Exception</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on decryption errors</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Decrypt PDF with password.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Pdf Encrypt",
                "args": [
                    "source_pdf: str = None",
                    "target_pdf: str = None",
                    "user_pwd: str = ",
                    "owner_pwd: str = None",
                    "use_128bit: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Encrypt PDF document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename to the target pdf, stored by default\nto <cite>output_directory</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user_pwd:</th><td class=\"field-body\">allows opening and reading PDF with restrictions</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param owner_pwd:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">allows opening PDF without any restrictions, by\ndefault same <cite>user_pwd</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_128bit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">whether to 128bit encryption, when false 40bit\nencryption is used, default True</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Encrypt PDF document.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rect",
                "args": [
                    "x",
                    "y",
                    "w",
                    "h",
                    "style="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Draw a rectangle</p>\n</div>\n</div>",
                "shortdoc": "Draw a rectangle",
                "tags": [],
                "matched": true
            },
            {
                "name": "Replace Text",
                "args": [
                    "text: str",
                    "replace: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Replace text content with something else in the PDF.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">this text will be replaced</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param replace:</th><td class=\"field-body\">used to replace <cite>text</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Replace text content with something else in the PDF.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rotate",
                "args": [
                    "angle",
                    "x=None",
                    "y=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n</div>\n</div>",
                "shortdoc": "",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Pdf",
                "args": [
                    "source: str = None",
                    "target: str = None",
                    "use_modified_reader: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save current over itself or to <cite>target_pdf</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">filepath to source PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">filepath to target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_modified_reader:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">needs to be set to <cite>True</cite> if\nusing modified PDF reader</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Save current over itself or to <cite>target_pdf</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Anchor To Element",
                "args": [
                    "locator: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Sets anchor point in the document for further searches.</p>\n<p>PDF needs to be parsed before elements can be found.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element to search for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if element was found</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Sets anchor point in the document for further searches.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Author",
                "args": [
                    "author"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Author of document</p>\n</div>\n</div>",
                "shortdoc": "Author of document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Auto Page Break",
                "args": [
                    "auto",
                    "margin=0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set auto page break mode and triggering margin</p>\n</div>\n</div>",
                "shortdoc": "Set auto page break mode and triggering margin",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Compression",
                "args": [
                    "compress"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set page compression</p>\n</div>\n</div>",
                "shortdoc": "Set page compression",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Creator",
                "args": [
                    "creator"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Creator of document</p>\n</div>\n</div>",
                "shortdoc": "Creator of document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Display Mode",
                "args": [
                    "zoom",
                    "layout=continuous"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set display mode in viewer</p>\n<p>The &quot;zoom&quot; argument may be 'fullpage', 'fullwidth', 'real',\n'default', or a number, interpreted as a percentage.</p>\n</div>\n</div>",
                "shortdoc": "Set display mode in viewer",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Draw Color",
                "args": [
                    "r",
                    "g=-1",
                    "b=-1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set color for all stroking operations</p>\n</div>\n</div>",
                "shortdoc": "Set color for all stroking operations",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Field Value",
                "args": [
                    "field_name: str",
                    "value: typing.Any",
                    "save: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set value for field with given name.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param field_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">field to update</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">new value for the field</td>\n</tr>\n</tbody>\n</table>\n<p>Tries to match on field identifier and its label.</p>\n<p>Exception is thrown if field can't be found or more than 1 field matches\nthe given <cite>field_name</cite>.</p>\n</div>\n</div>",
                "shortdoc": "Set value for field with given name.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Fill Color",
                "args": [
                    "r",
                    "g=-1",
                    "b=-1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set color for all filling operations</p>\n</div>\n</div>",
                "shortdoc": "Set color for all filling operations",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Font",
                "args": [
                    "family",
                    "style=",
                    "size=0"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Select a font; size given in points</p>\n</div>\n</div>",
                "shortdoc": "Select a font; size given in points",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Font Size",
                "args": [
                    "size"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set font size in points</p>\n</div>\n</div>",
                "shortdoc": "Set font size in points",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Keywords",
                "args": [
                    "keywords"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Keywords of document</p>\n</div>\n</div>",
                "shortdoc": "Keywords of document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Left Margin",
                "args": [
                    "margin"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set left margin</p>\n</div>\n</div>",
                "shortdoc": "Set left margin",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Line Width",
                "args": [
                    "width"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set line width</p>\n</div>\n</div>",
                "shortdoc": "Set line width",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Link",
                "args": [
                    "link",
                    "y=0",
                    "page=-1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set destination of internal link</p>\n</div>\n</div>",
                "shortdoc": "Set destination of internal link",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Margins",
                "args": [
                    "left",
                    "top",
                    "right=-1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set left, top and right margins</p>\n</div>\n</div>",
                "shortdoc": "Set left, top and right margins",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Output Directory",
                "args": [
                    "outdir: str = ."
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set output directory where target files are saved to.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param outdir:</th><td class=\"field-body\">output directory path, default to current directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set output directory where target files are saved to.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Right Margin",
                "args": [
                    "margin"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set right margin</p>\n</div>\n</div>",
                "shortdoc": "Set right margin",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Subject",
                "args": [
                    "subject"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Subject of document</p>\n</div>\n</div>",
                "shortdoc": "Subject of document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Text Color",
                "args": [
                    "r",
                    "g=-1",
                    "b=-1"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set color for text</p>\n</div>\n</div>",
                "shortdoc": "Set color for text",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Title",
                "args": [
                    "title"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Title of document</p>\n</div>\n</div>",
                "shortdoc": "Title of document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Top Margin",
                "args": [
                    "margin"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set top margin</p>\n</div>\n</div>",
                "shortdoc": "Set top margin",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set X",
                "args": [
                    "x"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set x position</p>\n</div>\n</div>",
                "shortdoc": "Set x position",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Xy",
                "args": [
                    "x",
                    "y"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set x and y positions</p>\n</div>\n</div>",
                "shortdoc": "Set x and y positions",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Y",
                "args": [
                    "y"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set y position and reset x</p>\n</div>\n</div>",
                "shortdoc": "Set y position and reset x",
                "tags": [],
                "matched": true
            },
            {
                "name": "Switch To Pdf Document",
                "args": [
                    "source_pdf: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Switch library's current fileobject to already open file\nor open file if not opened.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF filepath is not given and there are no active\nfile to activate</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Switch library's current fileobject to already open file or open file if not opened.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Template Html To Pdf",
                "args": [
                    "template: str = None",
                    "filename: str = None",
                    "variables: dict = None",
                    "create_dirs: bool = True",
                    "exists_ok: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Use HTML template file to generate PDF file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param template:</th><td class=\"field-body\">filepath to HTML template</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath where to save PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param variables:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dictionary of variables to fill into template, defaults to {}</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param create_dirs:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory structure is created if it is missing,\ndefault <cite>True</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param exists_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file is overwritten if it exists, default <cite>True</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Use HTML template file to generate PDF file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Text",
                "args": [
                    "x",
                    "y",
                    "txt="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Output a string</p>\n</div>\n</div>",
                "shortdoc": "Output a string",
                "tags": [],
                "matched": true
            },
            {
                "name": "Update Field Values",
                "args": [
                    "source_pdf: str = None",
                    "target_pdf: str = None",
                    "newvals: dict = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Update field values in PDF if it has fields.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source PDF with fields to update</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">updated target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newvals:</th><td class=\"field-body\">dictionary with key values to update</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Update field values in PDF if it has fields.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Write",
                "args": [
                    "h",
                    "txt=",
                    "link="
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Output text in flowing mode</p>\n</div>\n</div>",
                "shortdoc": "Output text in flowing mode",
                "tags": [],
                "matched": true
            },
            {
                "name": "Write Html",
                "args": [
                    "text",
                    "image_map=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Parse HTML and convert it to PDF</p>\n</div>\n</div>",
                "shortdoc": "Parse HTML and convert it to PDF",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Robocloud.Items": {
        "name": "RPA.Robocloud.Items",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>A library for interacting with RPA work items.</p>\n<p>Work items are used for managing data that go through multiple\nactivities and tasks inside a process. Each execution of an activity receives\na work item from the previous activity, and after the activity is finished, it\nis forwarded to the next one. During the execution, it can freely\nread and update the data contained in an item.</p>\n<p>The default implementation uses Robocloud to store the data, but the library\nallows using custom adapters.</p>\n<p><strong>Default environment</strong></p>\n<p>The library automatically loads the work item defined by its runtime\nenvironment if the argument <tt class=\"docutils literal\">load_env</tt> is truthy (enabled by default).\nThis functionality is controlled by the following environment variables:</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">RC_WORKSPACE_ID</tt>: The ID for the Robocloud workspace</li>\n<li><tt class=\"docutils literal\">RC_WORKITEM_ID</tt>:  The ID for the Robocloud work item</li>\n</ul>\n<p>These values are dynamic and should be set by Robocloud, but can be\noverriden manually while developing an activity.</p>\n<p><strong>Item structure</strong></p>\n<p>A work item's data payload is JSON and allows storing anything that is\nserializable. This library creates an object with the key 'variables'\nthat contains key-value pairs of a variable name and its contents.\nThese variables can be exposed to the Robot Framework task to be used directly.</p>\n<p>In addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp's cloud. Adding and using\nfiles with work items requires no additional setup from the user.</p>\n<p><strong>Workflow</strong></p>\n<p>While a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the corresponding keyword is explicitly called.\nIt is recommended to defer all saves to the end of the task to prevent\nleaving work items in a half-modified state after failures.</p>\n<p><strong>Custom adapters</strong></p>\n<p>While Robocloud is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the <tt class=\"docutils literal\">default_adapter</tt>\nargument for the library, or the <tt class=\"docutils literal\">RPA_WORKITEMS_ADAPTER</tt> environment\nvariable. A custom implementation should inherit from the <tt class=\"docutils literal\">BaseAdapter</tt>\nclass. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example the work item is modified locally and then saved\nback to Robocloud. Also note how the work item is loaded implicitly when\nthe suite starts.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocloud.Items</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Save variables to Robocloud</span><span class=\"p\">\n    </span><span class=\"nf\">Add work item file</span><span class=\"p\">    </span><span class=\"s\">orders.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variables</span><span class=\"p\">    </span><span class=\"s\">user=Dude</span><span class=\"p\">    </span><span class=\"s\">mail=address&#64;company.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save work item</span>\n</pre>\n<p>Later in the process inside a different robot, we can use previously saved\nwork item variables and files. The library also allows injecting the variables\ndirectly into the current task execution.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocloud.Items</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Use variables from Robocloud</span><span class=\"p\">\n    </span><span class=\"nf\">Set task variables from work item</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Variables are now available: </span><span class=\"p\">${</span><span class=\"nv\">user</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">mail</span><span class=\"p\">}\n    ${</span><span class=\"nv\">path</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item file</span><span class=\"p\">    </span><span class=\"s\">orders.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Files are also stored to disk: </span><span class=\"p\">${</span><span class=\"nv\">path</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used through Python, but it does not implicitly\nload the work item for the current execution.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocloud.Items</span> <span class=\"kn\">import</span> <span class=\"n\">Items</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">list_variables</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">):</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Items</span><span class=\"p\">()</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">load_work_item_from_environment</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variables</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:07",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "load_env=True",
                    "default_adapter=<class 'RPA.Robocloud.Items.RobocorpAdapter'>"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Add Work Item File",
                "args": [
                    "path",
                    "name=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add given file to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file on disk</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Destination name for file. If not given, current name\nof local file is used.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not uploaded before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item file</span><span class=\"p\">    </span><span class=\"c\">output.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add given file to work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Work Item Files",
                "args": [
                    "pattern"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add all files that match given pattern to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Path wildcard pattern</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item files</span><span class=\"p\">    </span><span class=\"c\">%{ROBOT_ROOT}/generated/*.csv</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Add all files that match given pattern to work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Clear Work Item",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all data in the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Clear work item</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Remove all data in the current work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Work Item Variables",
                "args": [
                    "*names",
                    "force=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete variable(s) from the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">Names of variables to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param force:</th><td class=\"field-body\">Ignore variables that don't exist in work item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete work item variables</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Delete variable(s) from the current work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Work Item File",
                "args": [
                    "name",
                    "path=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get attached file from work item to disk.\nReturns the absolute path to the created file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Destination path of file. If not given, current\nworking directory is used.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Get work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Open workbook</span><span class=\"p\">    </span><span class=\"c\">${path}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get attached file from work item to disk. Returns the absolute path to the created file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Work Item Files",
                "args": [
                    "pattern",
                    "dirname=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">Destination directory, if not given robot root is used</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${paths}=</span><span class=\"p\">    </span><span class=\"c\">Get work item files</span><span class=\"p\">    </span><span class=\"c\">customer_*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${path}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{paths}</span><span class=\"p\">\n    </span><span class=\"c\">Handle customer file</span><span class=\"p\">    </span><span class=\"c\">${path}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Work Item Payload",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get the full JSON payload for a work item.</p>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${payload}=</span><span class=\"p\">    </span><span class=\"c\">Get work item payload</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Entire payload as dictionary: ${payload}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Get the full JSON payload for a work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Work Item Variable",
                "args": [
                    "name",
                    "default=<object object at 0x7f2066b157d0>"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return a single variable value from the work item,\nor default value if defined and key does not exist.\nIf key does not exist and default is not defined, raises <cite>KeyError</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Default value if key does not exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${username}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">default=guest</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Return a single variable value from the work item, or default value if defined and key does not exist. If key does not exist and default is not defined, raises <cite>KeyError</cite>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Work Item Variables",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read all variables from the current work item and\nreturn their names and values as a dictionary.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Username: ${variables}[username], Email: ${variables}[email]</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Read all variables from the current work item and return their names and values as a dictionary.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Work Item Files",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List the names of files attached to the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${names}=</span><span class=\"p\">    </span><span class=\"c\">List work item files</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Work item has files with names: ${names}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "List the names of files attached to the current work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "List Work Item Variables",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>List the variable names for the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">List work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Available variables in work item: ${variables}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "List the variable names for the current work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Load Work Item",
                "args": [
                    "workspace_id",
                    "item_id"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Load work item for reading/writing.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Workspace ID which contains item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param item_id:</th><td class=\"field-body\">Workitem ID to load</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt><strong>NOTE</strong>: Currently only one work item per execution is supported</dt>\n<dd>by Robocorp Cloud, which should be loaded automatically.</dd>\n</dl>\n</div>\n</div>",
                "shortdoc": "Load work item for reading/writing.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Load Work Item From Environment",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Load current work item defined by the runtime environment.</p>\n<p>The corresponding environment variables are:</p>\n<ul class=\"simple\">\n<li>RC_WORKSPACE_ID</li>\n<li>RC_WORKITEM_ID</li>\n</ul>\n</div>\n</div>",
                "shortdoc": "Load current work item defined by the runtime environment.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Work Item File",
                "args": [
                    "name",
                    "missing_ok=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove attached file from work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not deleted before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Remove attached file from work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Remove Work Item Files",
                "args": [
                    "pattern",
                    "missing_ok=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Removes files attached to work item that match given pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item files</span><span class=\"p\">    </span><span class=\"c\">*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Removes files attached to work item that match given pattern.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Work Item",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save the current data in the work item. If not saved,\nall changes are discarded when the library goes out of scope.</p>\n</div>\n</div>",
                "shortdoc": "Save the current data in the work item. If not saved, all changes are discarded when the library goes out of scope.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Task Variables From Work Item",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Convert all variables in the current work item to\nRobot Framework task variables.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Work item has variable INPUT_URL\nSet task variables from work item</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">The variable is now available: ${INPUT_URL}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Convert all variables in the current work item to Robot Framework task variables.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Work Item Payload",
                "args": [
                    "payload"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set the full JSON payload for a work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param payload:</th><td class=\"field-body\">Content of payload, must be JSON-serializable</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${output}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">url=example.com</span><span class=\"p\">    </span><span class=\"c\">username=Mark</span><span class=\"p\">\n</span><span class=\"c\">Set work item payload</span><span class=\"p\">    </span><span class=\"c\">${output}</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set the full JSON payload for a work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Work Item Variable",
                "args": [
                    "name",
                    "value"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set a single variable value in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value of variable</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">MarkyMark</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set a single variable value in the current work item.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Work Item Variables",
                "args": [
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set multiple variables in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Pairs of variable names and values</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variables</span><span class=\"p\">    </span><span class=\"c\">username=MarkyMark</span><span class=\"p\">    </span><span class=\"c\">email=mark&#64;example.com</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Set multiple variables in the current work item.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Robocloud.Secrets": {
        "name": "RPA.Robocloud.Secrets",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Secrets</cite> is a library for interfacing secrets set in the Robocloud Vault\n(used by default) or file-based secrets, which can be taken into use\nby setting two environment variables below.</p>\n<p>Robocloud Vault works together with Robocloud Worker or Robocode CLI.\nFollowing three environment variables need to exist (these are set by\nRobocloud Worker automatically and can be set manually with Robocode CLI).</p>\n<ul class=\"simple\">\n<li>RC_API_SECRET_HOST : URL to Robocloud Secrets API</li>\n<li>RC_API_SECRET_TOKEN : API Token for Robocloud Secrets API</li>\n<li>RC_WORKSPACE_ID : Robocloud Workspace ID</li>\n</ul>\n<p>File based secrets can be set by defining two environment variables.</p>\n<ul class=\"simple\">\n<li>RPA_SECRET_MANAGER : 'RPA.Robocloud.Secrets.FileSecrets'</li>\n<li>RPA_SECRET_FILE : Absolute path to the secrets JSON file.</li>\n</ul>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;swaglabs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;standard_user&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;password&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;secret_sauce&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocloud.Secrets</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Reading secrets</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=   </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">swaglabs</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">      ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocloud.Secrets</span> <span class=\"kn\">import</span> <span class=\"n\">Secrets</span>\n\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">Secrets</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My secrets: </span><span class=\"si\">{</span><span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s1\">'swaglabs'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "*args",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>The selected adapter can be set with the environment\nvariable <tt class=\"docutils literal\">RPA_SECRET_MANAGER</tt>, or the keyword argument <tt class=\"docutils literal\">default_adapter</tt>.\nDefaults to Robocloud Vault if not defined.</p>\n<p>All other library arguments are passed to the adapter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param default_adapter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Override default secret adapter</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "The selected adapter can be set with the environment variable ``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``. Defaults to Robocloud Vault if not defined.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Get Secret",
                "args": [
                    "secret_name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read a secret from the configured source, e.g. Robocloud Vault,\nand return it as a <tt class=\"docutils literal\">Secret</tt> object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param secret_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Name of secret</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Read a secret from the configured source, e.g. Robocloud Vault, and return it as a <tt class=\"docutils literal\">Secret</tt> object.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.RobotLogListener": {
        "name": "RPA.RobotLogListener",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>RobotLogListener</cite> is a library for controlling logging during\na Robot Framework execution using the listener API.</p>\n<p><strong>About keyword parameters</strong></p>\n<p>Parameters <cite>names</cite> and <cite>keywords</cite> for keywords <cite>Mute Run On Failure</cite> and <cite>Register Protected Keywords</cite>\ndo not need to be full names of keywords, ie. all keywords matching even partially will be affected.\n<cite>Run Keyword</cite> would match all <cite>BuiltIn</cite> library keywords (17 keywords in RF 3.2.1) and of course all\n<cite>Run Keyword</cite> named keywords in any resource and/or library file which are imported would be matched also.</p>\n<p><strong>Mute Run On Failure</strong></p>\n<p>This keyword is to be used specifically with <cite>RPA.Browser</cite> library, which extends\n<cite>SeleniumLibrary</cite>.  Normally most of the <cite>SeleniumLibrary</cite> keywords execute <cite>run_on_failure</cite>\nbehaviour, which can be set at library initialization. By default this behaviour is running\n<cite>Capture Page Screenshot</cite> keyword on failure.</p>\n<p>In the example task <cite>Check the official website</cite> below the keyword <cite>Run Keyword</cite> is muted and when\nit runs the keyword <cite>Element Should Be Visible</cite> then those failures do not create page screenshots\ninto log file.</p>\n<p>It is also possible to change default failure behaviour by giving parameter\n<cite>optional_keyword_to_run</cite> for <cite>Mute Run On Failure</cite>, see task <cite>Check the official website with error log</cite>.\nThis optional keyword would be then executed on failure. Due to the underlying <cite>SeleniumLibrary</cite>\nimplementation this keyword can't have arguments.</p>\n<p>Example of using <cite>Mute Run On Failure</cite> without and with optional keyword to run.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.Browser</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.RobotLogListener</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">      </span><span class=\"nf\">Set Task Variable</span><span class=\"p\">   ${</span><span class=\"nv\">TRIES</span><span class=\"p\">}   </span><span class=\"s\">1</span><span class=\"p\">\n</span><span class=\"kn\">Task Teardown</span><span class=\"p\">   </span><span class=\"nf\">Close All Browsers</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check the official website</span><span class=\"p\">\n   </span><span class=\"nf\">Mute Run On Failure</span><span class=\"p\">   </span><span class=\"s\">Run Keyword</span><span class=\"p\">\n   </span><span class=\"nf\">Open Available Browser</span><span class=\"p\">   </span><span class=\"s\">https://www.robocorp.com</span><span class=\"p\">\n   </span><span class=\"nf\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">Capture Page Screenshot</span><span class=\"p\">\n\n</span><span class=\"gu\">Check the official website with error log</span><span class=\"p\">\n   </span><span class=\"nf\">Mute Run On Failure</span><span class=\"p\">   </span><span class=\"s\">Run Keyword</span><span class=\"p\">  </span><span class=\"s\">optional_keyword_to_run=Log tries</span><span class=\"p\">\n   </span><span class=\"nf\">Open Available Browser</span><span class=\"p\">   </span><span class=\"s\">https://www.robocorp.com</span><span class=\"p\">\n   </span><span class=\"nf\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">Capture Page Screenshot</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">idx</span><span class=\"p\">}  </span><span class=\"s\">IN RANGE</span><span class=\"p\">  </span><span class=\"s\">1</span><span class=\"p\">   </span><span class=\"s\">20</span><span class=\"p\">\n      </span><span class=\"nf\">Set Task Variable</span><span class=\"p\">   ${</span><span class=\"nv\">TRIES</span><span class=\"p\">}   ${</span><span class=\"nv\">idx</span><span class=\"p\">}\n      ${</span><span class=\"nv\">status</span><span class=\"p\">}   </span><span class=\"nf\">Run Keyword And Return Status</span><span class=\"p\">   </span><span class=\"s\">Element Should Be Visible</span><span class=\"p\">  </span><span class=\"s\">id:xyz</span><span class=\"p\">\n      </span><span class=\"nf\">Exit For Loop If</span><span class=\"p\">   </span><span class=\"s\">'</span><span class=\"p\">${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"s\">' == 'PASS'</span><span class=\"p\">\n      </span><span class=\"nf\">Sleep</span><span class=\"p\">  </span><span class=\"s\">2s</span><span class=\"p\">\n   </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Log tries</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">  </span><span class=\"s\">Checked element visibility </span><span class=\"p\">${</span><span class=\"nv\">TRIES</span><span class=\"p\">}</span><span class=\"s\"> times</span>\n</pre>\n<p><strong>Register Protected Keywords</strong></p>\n<p>This keyword is used to totally disable logging for named keywords. In the example below\nthe keyword <cite>This will not output</cite> is protected and it will not be logging into Robot Framework\nlog files.</p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.RobotLogListener</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Protecting keywords</span><span class=\"p\">\n   </span><span class=\"nf\">This will not output</span><span class=\"p\">        </span><span class=\"c\"># will output because called before register\n</span><span class=\"p\">   </span><span class=\"nf\">Register Protected Keywords</span><span class=\"p\">    </span><span class=\"s\">This will not output</span><span class=\"p\">\n   </span><span class=\"nf\">This will not output</span><span class=\"p\">        </span><span class=\"c\"># is now registered\n</span><span class=\"p\">   </span><span class=\"nf\">This will output</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">This will not output</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">1</span><span class=\"p\">\n\n</span><span class=\"gu\">This will output</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">2</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">robot.libraries.BuiltIn</span> <span class=\"kn\">import</span> <span class=\"n\">BuiltIn</span><span class=\"p\">,</span> <span class=\"n\">RobotNotRunningError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.RobotLogListener</span> <span class=\"kn\">import</span> <span class=\"n\">RobotLogListener</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"n\">BuiltIn</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">import_library</span><span class=\"p\">(</span><span class=\"s2\">&quot;RPA.RobotLogListener&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RobotNotRunningError</span><span class=\"p\">:</span>\n   <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomLibrary</span><span class=\"p\">:</span>\n\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">RobotLogListener</span><span class=\"p\">()</span>\n      <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">register_protected_keywords</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;CustomLibrary.special_keyword&quot;</span><span class=\"p\">]</span>\n      <span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">special_keyword</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will not be written to log'</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"s1\">'not shown in the log'</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [],
        "keywords": [
            {
                "name": "End Keyword",
                "args": [
                    "name",
                    "attributes"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Listener method for keyword end.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">keyword name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keyword attributes</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>name</cite> exists in the protected keywords list then log level is\nrestored back to level it was before settings to NONE.</p>\n</div>\n</div>",
                "shortdoc": "Listener method for keyword end.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Mute Run On Failure",
                "args": [
                    "keywords: typing.Any = None",
                    "optional_keyword_to_run: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set keywords which should not execute <cite>SeleniumLibrary</cite>\ndefault behaviour of running keyword on failure.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keywords:</th><td class=\"field-body\">list of keywords to mute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param optional_keyword_to_run:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the keyword to execute\nif keyword defined by <cite>keywords</cite> fail</td>\n</tr>\n</tbody>\n</table>\n<p>Keyword names do not need to be full names of keywords, ie. all keywords\nmatching even partially will be affected. <cite>Run Keyword</cite> would match all\n<cite>BuiltIn</cite> library keywords (17 keywords in RF 3.2.1) and of course all\n<cite>Run Keyword</cite> named keywords in any resource and/or library file which\nare imported would be matched also.</p>\n<p>By default <cite>SeleniumLibrary</cite> executes <cite>Capture Page Screenshot</cite>\non failure.</p>\n<p>If <cite>optional_keyword_to_run</cite> is not given then nothing is done\non failure, but this can be set to override <cite>SeleniumLibrary</cite>\ndefault behaviour for a set of keywords.</p>\n</div>\n</div>",
                "shortdoc": "Set keywords which should not execute <cite>SeleniumLibrary</cite> default behaviour of running keyword on failure.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Only Info Level",
                "args": [
                    "names: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Register keywords that are allowed only INFO level logging</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">list of keywords to protect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Register keywords that are allowed only INFO level logging",
                "tags": [],
                "matched": true
            },
            {
                "name": "Register Protected Keywords",
                "args": [
                    "names: typing.Any = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Register keywords that are not going to be logged into Robot Framework logs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">list of keywords to protect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Register keywords that are not going to be logged into Robot Framework logs.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Start Keyword",
                "args": [
                    "name",
                    "attributes"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Listener method for keyword start.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">keyword name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keyword attributes</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>name</cite> exists in the protected keywords list then log level is\ntemporarily set to NONE.</p>\n</div>\n</div>",
                "shortdoc": "Listener method for keyword start.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.SAP": {
        "name": "RPA.SAP",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>RPA Framework library which is wrapping <cite>SapGuiLibrary</cite> functionality.</p>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "*args",
                    "**kwargs"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Salesforce": {
        "name": "RPA.Salesforce",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Salesforce</cite> is a library for accessing Salesforce using REST API.\nThe library extends <a class=\"reference external\" href=\"https://github.com/simple-salesforce/simple-salesforce\">simple-salesforce library</a>.</p>\n<p>More information available at <a class=\"reference external\" href=\"https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htm\">Salesforce REST API Developer Guide</a>.</p>\n<p><strong>Dataloader</strong></p>\n<p>The keyword <cite>execute_dataloader_import</cite> can be used to mimic\n<a class=\"reference external\" href=\"https://developer.salesforce.com/docs/atlas.en-us.dataLoader.meta/dataLoader/data_loader.htm\">Salesforce Dataloader</a> import behaviour.</p>\n<p><cite>input_object</cite> can be given in different formats. Below is an example where\ninput is in <cite>RPA.Table</cite> format in <strong>method a</strong> and list format in <strong>method b</strong>.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Salesforce</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Salesforce</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"c\"># Method a\n</span><span class=\"p\">${</span><span class=\"nv\">orders</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Database Query Result As Table</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               </span><span class=\"nf\">SELECT * FROM incoming_orders</span><span class=\"p\">\n${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Execute Dataloader Insert</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               ${</span><span class=\"nv\">orders</span><span class=\"p\">}  ${</span><span class=\"nv\">mapping_dict</span><span class=\"p\">}  </span><span class=\"nf\">Tilaus__c</span><span class=\"p\">\n</span><span class=\"c\"># Method b\n</span><span class=\"p\">${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Execute Dataloader Insert</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               ${</span><span class=\"nv\">WORKDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"nf\">orders.json</span><span class=\"p\">  ${</span><span class=\"nv\">mapping_dict</span><span class=\"p\">}  </span><span class=\"s\">Tilaus__c</span>\n</pre>\n<p>Example file <strong>orders.json</strong></p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0015I000002jBLIQA2&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0015I000002jBLDQA2&quot;</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<p><cite>mapping_object</cite> describes how the input data fields are mapped into Salesforce\nobject attributes. In the example, the mapping defines that <cite>asiakas</cite> attribute in the\ninput object is mapped into <cite>Tilaaja__c</cite> attribute of <cite>Tilaus__c</cite> custom Salesforce object.</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;Tilaus__c&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tilaaja__c&quot;</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Object type could be, for example, <cite>Tilaus__c</cite>.</p>\n<p><strong>Salesforce object operations</strong></p>\n<p>Following operations can be used to manage Salesforce objects:</p>\n<ul class=\"simple\">\n<li>Get Salesforce Object By Id</li>\n<li>Create Salesforce Object</li>\n<li>Update Salesforce Object</li>\n<li>Upsert Salesforce Object</li>\n<li>Delete Salesforce Object</li>\n<li>Get Salesforce Object Metadata</li>\n<li>Describe Salesforce Object</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Salesforce</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Salesforce</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}    </span><span class=\"s\">0015I000002jBLDQA2</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Change account details in Salesforce</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">account</span><span class=\"p\">}=      </span><span class=\"nf\">Get Salesforce Object By Id</span><span class=\"p\">   </span><span class=\"s\">Account</span><span class=\"p\">  ${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}\n    &amp;{</span><span class=\"nv\">update_obj</span><span class=\"p\">}=   </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">   </span><span class=\"s\">Name=Nokia Ltd</span><span class=\"p\">  </span><span class=\"s\">BillingStreet=Nokia bulevard 1</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=       </span><span class=\"nf\">Update Salesforce Object</span><span class=\"p\">  </span><span class=\"s\">Account</span><span class=\"p\">  ${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}  ${</span><span class=\"nv\">update_obj</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Authorize Salesforce</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=     </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">salesforce</span><span class=\"p\">\n    </span><span class=\"nf\">Auth With Token</span><span class=\"p\">\n    ...        </span><span class=\"s\">username=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[USERNAME]</span><span class=\"p\">\n    ...        </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[PASSWORD]</span><span class=\"p\">\n    ...        </span><span class=\"s\">api_token=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[API_TOKEN]</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Salesforce</span> <span class=\"kn\">import</span> <span class=\"n\">Salesforce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocloud.Secrets</span> <span class=\"kn\">import</span> <span class=\"n\">FileSecrets</span>\n\n<span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">filesecrets</span> <span class=\"o\">=</span> <span class=\"n\">FileSecrets</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets.json&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">filesecrets</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;salesforce&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">sf</span> <span class=\"o\">=</span> <span class=\"n\">Salesforce</span><span class=\"p\">()</span>\n<span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">auth_with_token</span><span class=\"p\">(</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;USERNAME&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">api_token</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;API_TOKEN&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">nokia_account_id</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0015I000002jBLDQA2&quot;</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">get_salesforce_object_by_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;Account&quot;</span><span class=\"p\">,</span> <span class=\"n\">nokia_account_id</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"p\">)</span>\n<span class=\"n\">billing_information</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;BillingStreet&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Nokia Bulevard 1&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingCity&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Espoo&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingPostalCode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;01210&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingCountry&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Finland&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">update_salesforce_object</span><span class=\"p\">(</span><span class=\"s2\">&quot;Account&quot;</span><span class=\"p\">,</span> <span class=\"n\">nokia_account_id</span><span class=\"p\">,</span> <span class=\"n\">billing_information</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Update result: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:04",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "sandbox: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n</div>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Add Product Into Opportunity",
                "args": [
                    "product_name: str",
                    "quantity: int",
                    "opportunity_id: str = None",
                    "pricebook_name: str = None",
                    "custom_total_price: float = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Add Salesforce Product into Opportunity.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param product_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of the product in the Pricelist</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param quantity:</th><td class=\"field-body\">number of products to add</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">identifier of Opportunity, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the pricelist, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param custom_total_price:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">price that overrides quantity and product price,\ndefault None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is operation is successful or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Add Salesforce Product into Opportunity.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Auth With Token",
                "args": [
                    "username: str",
                    "password: str",
                    "api_token: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Authorize to Salesforce with security token, username\nand password creating instance.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">Salesforce API username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">Salesforce API password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param api_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce API security token</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Authorize to Salesforce with security token, username and password creating instance.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create New Opportunity",
                "args": [
                    "close_date: str",
                    "opportunity_name: str",
                    "stage_name: str = Closed Won",
                    "account_name: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create Salesforce Opportunity object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param close_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">closing date for the Opportunity, format 'YYYY-MM-DD'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param stage_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">needs to be one of the defined stages,\ndefaults to &quot;Closed Won&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">by default uses previously set account, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created opportunity or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create Salesforce Opportunity object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Salesforce Object",
                "args": [
                    "object_type: str",
                    "object_data: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create Salesforce object by type and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">resulting object as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create Salesforce object by type and data.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Delete Salesforce Object",
                "args": [
                    "object_type: str",
                    "object_id: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Delete Salesfoce object by type and id.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Delete Salesfoce object by type and id.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Describe Salesforce Object",
                "args": [
                    "object_type: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Salesfoce object description by type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object description as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Salesfoce object description by type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Execute Dataloader Insert",
                "args": [
                    "input_object: typing.Any",
                    "mapping_object: typing.Any",
                    "object_type: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Keyword mimics Salesforce Dataloader 'insert' behaviour by taking\nin a <cite>input_object`representing dictionary of data to input into Salesforce,\na `mapping_object</cite> representing dictionary mapping the input keys into\nSalesforce keys, an <cite>object_type</cite> representing Salesforce object which\nDatahandler will handle with <cite>operation</cite> type.</p>\n<p>Stores operation successes into <cite>Salesforce.dataloader_success</cite> array.\nStores operation errors into <cite>Salesforce.dataloader_errors</cite>.</p>\n<p>These can be retrieved with keywords <cite>get_dataloader_success_table</cite> and\n<cite>get_dataloader_error_table</cite> which return corresponding data as\n<cite>RPA.Table</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param input_object:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath or list of dictionaries</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param mapping_object:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath or dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation is successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Keyword mimics Salesforce Dataloader 'insert' behaviour by taking in a <cite>input_object<span class=\"name\">representing dictionary of data to input into Salesforce, a </span>mapping_object</cite> representing dictionary mapping the input keys into Salesforce keys, an <cite>object_type</cite> representing Salesforce object which Datahandler will handle with <cite>operation</cite> type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Dataloader Error Table",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return Dataloader error entries as <cite>RPA.Table</cite></p>\n</div>\n</div>",
                "shortdoc": "Return Dataloader error entries as <cite>RPA.Table</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Dataloader Success Table",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return Dataloader success entries as <cite>RPA.Table</cite></p>\n</div>\n</div>",
                "shortdoc": "Return Dataloader success entries as <cite>RPA.Table</cite>",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Opportunity Id",
                "args": [
                    "opportunity_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get ID of an Opportunity linked to set account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">opportunity to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Id of the opportunity or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get ID of an Opportunity linked to set account.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Pricebook Entries",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all pricebook entries.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">query result</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all pricebook entries.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Pricebook Id",
                "args": [
                    "pricebook_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get ID of a pricelist.</p>\n<p>Returns False if unique Id is not found.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Id of the pricelist or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get ID of a pricelist.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Products In Pricelist",
                "args": [
                    "pricebook_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all products in a pricelist.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">products in dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all products in a pricelist.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Salesforce Object By Id",
                "args": [
                    "object_type: str",
                    "object_id: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Salesforce object by id and type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of object attributes</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Salesforce object by id and type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Salesforce Object Metadata",
                "args": [
                    "object_type: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Salesfoce object metadata by type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object metadata as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Salesfoce object metadata by type.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read Dictionary From File",
                "args": [
                    "mapping_file: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read dictionary from file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param mapping_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">file content as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Read dictionary from file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Salesforce Query",
                "args": [
                    "sql_string: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Perform SQL query.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sql_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL clause to perform</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the SQL query</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Perform SQL query.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Salesforce Query Result As Table",
                "args": [
                    "sql_string: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Perform SQL query and return result as <cite>RPA.Table</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sql_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL clause to perform</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the SQL query as Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Perform SQL query and return result as <cite>RPA.Table</cite>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Account",
                "args": [
                    "account_name: str = ",
                    "account_id: str = "
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set account name and id by giving either parameter.</p>\n<dl class=\"docutils\">\n<dt>Can be used together with keywords:</dt>\n<dd><ul class=\"first last simple\">\n<li>get_opportunity_id</li>\n<li>create_new_opportunity</li>\n</ul>\n</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if account was found from Salesforce, else False</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set account name and id by giving either parameter.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Pricebook",
                "args": [
                    "pricebook_name: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Sets Pricebook to be used in Salesforce operations.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to use</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Sets Pricebook to be used in Salesforce operations.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Update Salesforce Object",
                "args": [
                    "object_type: str",
                    "object_id: str",
                    "object_data: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Update Salesfoce object by type, id and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Update Salesfoce object by type, id and data.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Upsert Salesforce Object",
                "args": [
                    "object_type: str",
                    "object_id: str",
                    "object_data: typing.Any"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Upsert Salesfoce object by type, id and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Upsert Salesfoce object by type, id and data.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Slack": {
        "name": "RPA.Slack",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>RPA Framework library for Slack operations.</p>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [],
        "keywords": [
            {
                "name": "Slack Message Using Webhook",
                "args": [
                    "webhook_url: str",
                    "channel: str",
                    "sender: str",
                    "text: str",
                    "icon_emoji: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Send message to Slack channel using webhook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param webhook_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">needs to be configured for the Slack server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param channel:</th><td class=\"field-body\">channel needs to exist in the Slack server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sender:</th><td class=\"field-body\">shown in the message post as sender</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text for the message post</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param icon_emoji:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">icon for the message post, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Send message to Slack channel using webhook.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Tables": {
        "name": "RPA.Tables",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Tables</cite> is a library for manipulating tabular data inside Robot Framework.</p>\n<p>It can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.</p>\n<p><strong>Import types</strong></p>\n<p>The data from which a table can be created can be of two main types:</p>\n<ol class=\"arabic simple\">\n<li>An iterable of individual rows, like a list of lists, or list of dictionaries</li>\n<li>A dictionary of columns, where each dictionary value is a list of values</li>\n</ol>\n<p>For instance, these two input values:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">],</span>\n    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">58</span><span class=\"p\">,</span>     <span class=\"mi\">22</span><span class=\"p\">,</span>     <span class=\"mi\">67</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Would both result in the following table:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"39%\" />\n<col width=\"33%\" />\n<col width=\"28%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Index</th>\n<th class=\"head\">Name</th>\n<th class=\"head\">Age</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>1</td>\n<td>Mark</td>\n<td>58</td>\n</tr>\n<tr><td>2</td>\n<td>John</td>\n<td>22</td>\n</tr>\n<tr><td>3</td>\n<td>Adam</td>\n<td>67</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Tables</cite> library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Files to Table</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}\n    </span><span class=\"nf\">Filter table by column</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">size</span><span class=\"p\">  </span><span class=\"s\">&gt;=</span><span class=\"p\">  ${</span><span class=\"nv\">1024</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}</span><span class=\"s\">[name]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Write table to CSV</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files.csv</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">read_table_from_csv</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;orders.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;product&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">group_table_by_column</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">customer</span> <span class=\"ow\">in</span> <span class=\"n\">customers</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">customer</span><span class=\"p\">:</span>\n        <span class=\"n\">add_cart</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n    <span class=\"n\">make_order</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:06",
        "inits": [],
        "keywords": [
            {
                "name": "Add Table Column",
                "args": [
                    "table",
                    "name=None",
                    "values=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Append a column to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">name of new column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">row values (or single scalar value for all rows)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Append a column to a table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Add Table Row",
                "args": [
                    "table",
                    "row",
                    "index=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Append rows to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">value for new row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">index name for new row</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Append rows to a table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Clear Table",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Clear table in-place, but keep columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to clear</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Clear table in-place, but keep columns.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Copy Table",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Copy table object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to copy</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Copy table object.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create Table",
                "args": [
                    "data=None",
                    "trim=False",
                    "columns=None",
                    "index=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create Table object from data.</p>\n<p>Data can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">source data for table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">remove all empty rows from the end of the worksheet,\ndefault <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">names of columns (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">names of rows (optional)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Create Table object from data.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Export Table",
                "args": [
                    "table",
                    "with_index=False",
                    "as_list=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Convert table object to standard Python containers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to convert to dict</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_index:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include index in values</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">export data as list instead of dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Convert table object to standard Python containers.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Filter Empty Rows",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all rows from the table which have only None values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove all rows from the table which have only None values.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Filter Table By Column",
                "args": [
                    "table",
                    "column",
                    "operator",
                    "value"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return all rows where the column values match the given condition.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to filter with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">filtering operator, e.g. &gt;, &lt;, ==, contains</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to compare column to (using operator)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return all rows where the column values match the given condition.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Find Table Rows",
                "args": [
                    "table",
                    "column",
                    "value",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Find a row in the table by a given column value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to find from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">name of column to search</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to match for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Find a row in the table by a given column value.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Cell",
                "args": [
                    "table",
                    "row",
                    "column"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get a cell value from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column of cell</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get a cell value from table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Column",
                "args": [
                    "table",
                    "column",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all column values from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all column values from table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Dimensions",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return table dimensions, as (rows, columns).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return table dimensions, as (rows, columns).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Row",
                "args": [
                    "table",
                    "index",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get a single row from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get a single row from table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Table Slice",
                "args": [
                    "table",
                    "start=None",
                    "end=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return a new Table from a subset of given Table rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">start index (inclusive)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">end index (inclusive)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return a new Table from a subset of given Table rows.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Group Table By Column",
                "args": [
                    "table",
                    "column"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Group table by <cite>column</cite> and return a list of grouped Tables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to use for grouping</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column which is used as grouping criteria</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Group table by <cite>column</cite> and return a list of grouped Tables.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Merge Tables",
                "args": [
                    "*tables",
                    "index=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create a union of two tables and their contents.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tables:</th><td class=\"field-body\">Tables to merge</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">Column name to use as index for merge</td>\n</tr>\n</tbody>\n</table>\n<p>By default rows from all tables are appended one after the other.\nOptionally a column name can be given with <tt class=\"docutils literal\">index</tt>, which is\nused to merge rows together.</p>\n<p>Example:</p>\n<p>For instance, a <tt class=\"docutils literal\">name</tt> column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Price</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>10.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>15.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>20.0</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Stock</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>12.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>99.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>0.0</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${products}=</span><span class=\"p\">    </span><span class=\"c\">Merge tables</span><span class=\"p\">    </span><span class=\"c\">${prices}</span><span class=\"p\">    </span><span class=\"c\">${stock}</span><span class=\"p\">    </span><span class=\"c\">index=Name</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${product}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{products}</span><span class=\"p\">\n    </span><span class=\"c\">Log many</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Product: ${product}[Name]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Price: ${product}[Price]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Stock: ${product}[Stock]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n</div>",
                "shortdoc": "Create a union of two tables and their contents.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Pop Table Column",
                "args": [
                    "table",
                    "column=None",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove column from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove column from table and return it.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Pop Table Row",
                "args": [
                    "table",
                    "index=None",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove row from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">row index, pops first row if none given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove row from table and return it.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Read Table From Csv",
                "args": [
                    "path",
                    "header=None",
                    "columns=None",
                    "dialect=None",
                    "delimiters=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Read a CSV file as a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">CSV file includes header</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">names of columns in resulting table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">format of CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delimiters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string of possible delimiters</td>\n</tr>\n</tbody>\n</table>\n<p>By default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it's unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.</p>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>,\nand <tt class=\"docutils literal\">header</tt> is boolean argument (<tt class=\"docutils literal\">True</tt>/<tt class=\"docutils literal\">False</tt>). Optionally a\nset of valid <tt class=\"docutils literal\">delimiters</tt> can be given as a string.</p>\n<p>The <tt class=\"docutils literal\">columns</tt> argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.</p>\n</div>\n</div>",
                "shortdoc": "Read a CSV file as a table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Rename Table Columns",
                "args": [
                    "table",
                    "columns",
                    "strict=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Renames columns in the Table with given values. Columns with\nname as <cite>None</cite> will be use previous value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">list of new column names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">if True, raises ValueError if column lengths\ndo not match</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Renames columns in the Table with given values. Columns with name as <cite>None</cite> will be use previous value.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Column As Index",
                "args": [
                    "table",
                    "column=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set existing column as index for rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to convert to index</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set existing column as index for rows.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Row As Column Names",
                "args": [
                    "table",
                    "index"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set existing row as names for columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">row to use as column names</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set existing row as names for columns.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Table Cell",
                "args": [
                    "table",
                    "row",
                    "column",
                    "value"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set a cell value in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set a cell value in the table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Table Column",
                "args": [
                    "table",
                    "column",
                    "values"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Assign values to entire column in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">value(s) to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Assign values to entire column in the table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Table Row",
                "args": [
                    "table",
                    "row",
                    "values"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Assign values to a row in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">row to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">value(s) to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Assign values to a row in the table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Sort Table By Column",
                "args": [
                    "table",
                    "column",
                    "ascending=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Sort table in-place according to <cite>column</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to sort</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">column to sort with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ascending:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">table sort order</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Sort table in-place according to <cite>column</cite>.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Head",
                "args": [
                    "table",
                    "count=5",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return first <cite>count</cite> rows from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return first <cite>count</cite> rows from table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Table Tail",
                "args": [
                    "table",
                    "count=5",
                    "as_list=False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Return last <cite>count</cite> rows from table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Return last <cite>count</cite> rows from table.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Trim Column Names",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all extraneous whitespace from column names.</p>\n</div>\n</div>",
                "shortdoc": "Remove all extraneous whitespace from column names.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Trim Empty Rows",
                "args": [
                    "table"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Remove all rows from the end of the table\nwhich have only None values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to filter</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Remove all rows from the end of the table which have only None values.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Write Table To Csv",
                "args": [
                    "table",
                    "path",
                    "header=True",
                    "dialect=excel"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Write a table as a CSV file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to write to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">table to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">write columns as header to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">the format of output CSV</td>\n</tr>\n</tbody>\n</table>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>.</p>\n</div>\n</div>",
                "shortdoc": "Write a table as a CSV file.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Tasks": {
        "name": "RPA.Tasks",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Tasks</cite> is a library for controlling task execution during a Robot Framework run.</p>\n<p>It allows conditional branching between tasks, loops and jumps, and optionally\nvalidating the execution through a schema file. It can also be used to\nvisualize the tasks as a graph.</p>\n<p id=\"model\"><strong>Execution model</strong></p>\n<p>In a typical Robot Framework run, tasks are ordered linearly in a file and\nthey're executed in definition order. Events that happen during\nthe execution can not affect the order and only have the option to fail the task\nor continue as defined.</p>\n<p>Using the <cite>Tasks</cite> library, it's possible to change this model according\nto different states or inputs. The execution will start by running a single\nstart task from the suite, and then according to user-defined keywords or\nschema rules select the next task. Any task which is defined in the same file\ncan be used, and the same task can also be used multiple times during a single\nexecution.</p>\n<p id=\"execution-example\">Example:</p>\n<p>As an example, the following Robot Framework file describes a process where\na task would have to be executed multiple times before a condition is reached.\nIn a real-world scenario, these tasks would be more complicated, instead of just\nincrementing numbers.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    </span><span class=\"nf\">Set next task if</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}</span><span class=\"s\"> &gt;= </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    ...    </span><span class=\"s\">Target reached</span><span class=\"p\">\n    ...    </span><span class=\"s\">Increment current number</span><span class=\"p\">\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n    </span><span class=\"nf\">Jump to task</span><span class=\"p\">    </span><span class=\"s\">Check loop condition</span><span class=\"p\">\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p>The execution for this example would go as follows:</p>\n<ol class=\"arabic simple\">\n<li>It starts from <tt class=\"docutils literal\">Check loop condition</tt>, as it's the first task in the file.</li>\n<li>During the first task, the keyword <tt class=\"docutils literal\">Set next task if</tt> is called, which queues\nup the next task according to a condition.</li>\n<li>In the initial state, we have not reached the target number, and will next run\nthe task <tt class=\"docutils literal\">Increment current number</tt>.</li>\n<li>The second task executes normally and in the end jumps back to the first\ntask using the keyword <tt class=\"docutils literal\">Jump to task</tt>.</li>\n<li>The above sequence is repeated until the condition is met, and we move to\nthe final task of the file. This final task does not schedule further tasks\nand the execution ends.</li>\n</ol>\n<p>You can also note the task <tt class=\"docutils literal\">This will not run</tt>, which as the name implies\nis never executed, as no other task schedules or jumps to it.</p>\n<p>The console log from the above execution shows how the same task is executed\nmultiple times:</p>\n<pre class=\"code console literal-block\">\n<span class=\"go\">==============================================================================\nIncrementing Process\n==============================================================================\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">1</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">2</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">3</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">4</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">5</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">6</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">7</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">8</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">9</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"m\"></span><span class=\"gp\">#</span><span class=\"m\">10</span>  Target reached                                                   <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">------------------------------------------------------------------------------\nIncrementing Process:: [/graph_incrementing_process.svg]              | PASS |\n10 critical tasks, 10 passed, 0 failed\n10 tasks total, 10 passed, 0 failed\n==============================================================================</span>\n</pre>\n<p id=\"graph\"><strong>Graph</strong></p>\n<p>A common way to document a process is through a directed graph. These graphs\nare usually drawn manually and describe the expected higher level steps.\nThe actual implementation itself follows a different path through a graph,\ndepending on inputs or implementation details. This library visualizes this\nexecution graph using the <a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a> tool.</p>\n<p>After the execution is finished, it will create a\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/DOT_(graph_description_language)\">DOT</a> file\nand render it as an image. This image will automatically be appended\nto the suite's documentation field.</p>\n<p><strong>Requirements</strong></p>\n<p>Drawing the graph requires a working installation of\n<a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a>. This can be installed through their\nwebsite or by using <a class=\"reference external\" href=\"https://docs.conda.io/\">Conda</a>.</p>\n<p>This requirement is optional for the functioning of this library, and will\ndisplay a warning if the tool is not available. The visualization\ncan be entirely disabled with the <tt class=\"docutils literal\">graph</tt> argument during library\ninitialization.</p>\n<p id=\"schema\"><strong>Schema</strong></p>\n<p>There is an option to define a schema file for the suite, which is written in JSON.\nThis file will be used to validate the actual execution and fail it if an unexpected\ntransition between tasks happens. It can also define rules for selecting the next\ntask, which allows separating the task and process definitions.</p>\n<p>Example:</p>\n<p>The execution-example shown previously used keywords to control\nthe execution. This can also be done using the following schema:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;tasks&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;Check loop condition&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;check&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;start&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;target&quot;</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$CURRENT &gt;= $TARGET&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;target&quot;</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$CURRENT &lt; $TARGET&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;increment&quot;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;Increment current number&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;check&quot;</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;check&quot;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;Target reached&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;target&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This has the added benefit of protecting against implementation errors,\nas the library will validate the start and end tasks, and transitions between\ndifferent tasks.</p>\n<p>After this schema has been taken into use, the aforementioned example\nwill reduce to the following:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">    </span><span class=\"s\">schema=counter-schema.json</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p><strong>Format</strong></p>\n<p>The current format is JSON with the following structure:</p>\n<pre class=\"code javascript literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"s2\">&quot;tasks&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;alias&quot;</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;start&quot;</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;end&quot;</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;next&quot;</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">[],</span>\n            <span class=\"s2\">&quot;actions&quot;</span><span class=\"o\">:</span> <span class=\"nx\">action</span><span class=\"p\">[],</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Each schema is a map of tasks with various properties. The keys must\nmatch the task names in the Robot Framework file definition. All properties\ninside the task are optional.</p>\n<p>The available properties and their uses:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>alias</em>:   Define a short name for the task, which can be used as a reference</dt>\n<dd>inside the schema.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>start</em>:   Start task for execution. There can be only one task with this</dt>\n<dd>enabled. If not defined, will default to first task in the file.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>end</em>:     Valid end task for execution. There can be multiple tasks with this</dt>\n<dd>enabled. Fails the execution if this is defined for any task and the\nexecution stops in a non-end task.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>next</em>:    List of valid tasks to transition to from this task. Supports</dt>\n<dd>alias definitions.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>actions</em>: List of actions that are executed at the end of the task.</dt>\n<dd>See section below for details.</dd>\n</dl>\n</li>\n</ul>\n<p>The types of actions:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>exception</em>: Set the next task if a matching exception occurs.</dt>\n<dd>Matches the exception message as regex.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>condition</em>: Set the next task if a conditional expression is true.</dt>\n<dd>Allows using Robot Framework variables.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>status</em>:    Set the next task if the current task's result matches,</dt>\n<dd>e.g. PASS or FAIL.</dd>\n</dl>\n</li>\n</ul>\n<p>Examples of actions:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;exception&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;.*ValueError.*&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Invalid input values&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$ATTEMPTS &gt; 10&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Too many attempts&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Success state&quot;</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:05",
        "inits": [
            {
                "name": "Init",
                "args": [
                    "execution_limit=1024",
                    "schema=None",
                    "graph=True",
                    "graph_inline=True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>There are a few arguments for controlling the Tasks library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param execution_limit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum number of tasks to run in suite,\nused to prevent infinite loops</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param schema:</th><td class=\"field-body\">Path to optional schema file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param graph:</th><td class=\"field-body\">Render execution result as graph using graphviz</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param graph_inline:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Inline graph into log, instead of saving as file</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "There are a few arguments for controlling the Tasks library.",
                "tags": [],
                "matched": true
            }
        ],
        "keywords": [
            {
                "name": "Jump To Task",
                "args": [
                    "name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Jump directly to given task, skipping the rest of the task\nexecution. If run inside a teardown, also skips the rest of the\nteardown sequence.</p>\n</div>\n</div>",
                "shortdoc": "Jump directly to given task, skipping the rest of the task execution. If run inside a teardown, also skips the rest of the teardown sequence.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Jump To Task If",
                "args": [
                    "condition",
                    "name",
                    "default=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Jump directly to given task according to the condition.</p>\n</div>\n</div>",
                "shortdoc": "Jump directly to given task according to the condition.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Jump To Task If Keyword Fails",
                "args": [
                    "task",
                    "keyword",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Executes given keyword and jumps to given task if it fails.</p>\n</div>\n</div>",
                "shortdoc": "Executes given keyword and jumps to given task if it fails.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Jump To Task If Keyword Succeeds",
                "args": [
                    "task",
                    "keyword",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Executes given keyword and jumps to given task if it succeeds.</p>\n</div>\n</div>",
                "shortdoc": "Executes given keyword and jumps to given task if it succeeds.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Next Task",
                "args": [
                    "name"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set the next task to be executed.\nShould be a task in the same suite.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set the next task to be executed. Should be a task in the same suite.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Next Task If",
                "args": [
                    "condition",
                    "name",
                    "default=None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set the next task according to the condition.\nIf no default is given, does not modify execution order.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param condition:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Condition expression to evaluate</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task, if successful</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Name of next task, if unsuccessful</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set the next task according to the condition. If no default is given, does not modify execution order.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Next Task If Keyword Fails",
                "args": [
                    "task",
                    "keyword",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Executes given keyword and sets the next task if it fails.</p>\n</div>\n</div>",
                "shortdoc": "Executes given keyword and sets the next task if it fails.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Next Task If Keyword Succeeds",
                "args": [
                    "task",
                    "keyword",
                    "*args"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Executes given keyword and sets the next task if it succeeds.</p>\n</div>\n</div>",
                "shortdoc": "Executes given keyword and sets the next task if it succeeds.",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Twitter": {
        "name": "RPA.Twitter",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Twitter</cite> is a library for accessing Twitter using developer API.\nThe library extends <a class=\"reference external\" href=\"http://docs.tweepy.org/en/latest/index.html\">tweepy</a> library.</p>\n<p>Authorization credentials can be given as parameters for <tt class=\"docutils literal\">authorize</tt> keyword\nor keyword can read them in as environment variables:</p>\n<ul class=\"simple\">\n<li><cite>TWITTER_CONSUMER_KEY</cite></li>\n<li><cite>TWITTER_CONSUMER_SECRET</cite></li>\n<li><cite>TWITTER_ACCESS_TOKEN</cite></li>\n<li><cite>TWITTER_ACCESS_TOKEN_SECRET</cite></li>\n</ul>\n<p>Library usage requires Twitter developer credentials.\nThose can be requested from <a class=\"reference external\" href=\"https://developer.twitter.com/\">Twitter developer site</a></p>\n<p><strong>Examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Twitter</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get user tweets and like them</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Authorize</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">tweets</span><span class=\"p\">}=   </span><span class=\"nf\">Get User Tweets</span><span class=\"p\">   </span><span class=\"s\">username=niinisto</span><span class=\"p\">   </span><span class=\"s\">count=5</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">tweet</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">tweets</span><span class=\"p\">}\n        </span><span class=\"nf\">Like</span><span class=\"p\">   ${</span><span class=\"nv\">tweet</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Twitter</span> <span class=\"kn\">import</span> <span class=\"n\">Twitter</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Twitter</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">()</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_user_tweets</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;niinisto&quot;</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">tw</span> <span class=\"ow\">in</span> <span class=\"n\">tweets</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">like</span><span class=\"p\">(</span><span class=\"n\">tw</span><span class=\"p\">)</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">text_search_tweets</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">&quot;corona trump&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">tw</span> <span class=\"ow\">in</span> <span class=\"n\">tweets</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tw</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_user_profile</span><span class=\"p\">(</span><span class=\"s2\">&quot;niinisto&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">tweet</span><span class=\"p\">(</span><span class=\"s2\">&quot;first tweet&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_me</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [],
        "keywords": [
            {
                "name": "Authorize",
                "args": [
                    "consumer_key: str = None",
                    "consumer_secret: str = None",
                    "access_token: str = None",
                    "access_token_secret: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Authorize to Twitter API</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">app consumer key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">app consumer secret</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">user access token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">user access token secret</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Authorize to Twitter API",
                "tags": [],
                "matched": true
            },
            {
                "name": "Follow",
                "args": [
                    "user: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Follow Twitter user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">screen name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if user was followed, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Follow Twitter user",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get Me",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get Twitter profile of authenticated user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">user profile as dictionary or <cite>None</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get Twitter profile of authenticated user",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get User Profile",
                "args": [
                    "username: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get user's Twitter profile</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">whose profile to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">profile as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get user's Twitter profile",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get User Tweets",
                "args": [
                    "username: str = None",
                    "count: int = 100"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get user tweets</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">whose tweets to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">maximum number of tweets, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of user tweets</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get user tweets",
                "tags": [],
                "matched": true
            },
            {
                "name": "Like",
                "args": [
                    "tweet: Tweet = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Like a tweet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tweet:</th><td class=\"field-body\">as a class <cite>Tweet</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if Tweet was liked, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Like a tweet",
                "tags": [],
                "matched": true
            },
            {
                "name": "Text Search Tweets",
                "args": [
                    "query: str = None",
                    "count: int = 100",
                    "geocode: str = None",
                    "lang: str = None",
                    "locale: str = None",
                    "result_type: str = mixed",
                    "until: str = None",
                    "since_id: str = None",
                    "max_id: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Search tweets defined by search query</p>\n<p>Results types:</p>\n<ul class=\"simple\">\n<li>mixed : include both popular and real time results in the response</li>\n<li>recent : return only the most recent results in the response</li>\n<li>popular : return only the most popular results in the response</li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">search query string of 500 characters maximum,\nincluding operators</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">maximum number of tweets, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param geocode:</th><td class=\"field-body\">tweets by users located within a given\nradius of the given latitude/longitude</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of tweets</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">language of the query you are sending</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param result_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of search results you would prefer to receive,\ndefault &quot;mixed&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param until:</th><td class=\"field-body\">tweets created before the given date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param since_id:</th><td class=\"field-body\">Returns only statuses with an ID greater than</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param max_id:</th><td class=\"field-body\">only statuses with an ID less than</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of matching tweets</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Search tweets defined by search query",
                "tags": [],
                "matched": true
            },
            {
                "name": "Tweet",
                "args": [
                    "content: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Make a tweet with content</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">text for the status update</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Make a tweet with content",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unfollow",
                "args": [
                    "user: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Unfollow Twitter user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">screen name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if user was followed, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Unfollow Twitter user",
                "tags": [],
                "matched": true
            },
            {
                "name": "Unlike",
                "args": [
                    "tweet: Tweet = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Unlike a tweet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tweet:</th><td class=\"field-body\">as a class <cite>Tweet</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if Tweet was unliked, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Unlike a tweet",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    },
    "RPA.Word.Application": {
        "name": "RPA.Word.Application",
        "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p><cite>Word.Application</cite> is a library for controlling a Word application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">                 </span><span class=\"nn\">RPA.Word.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">              </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">          </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Open existing file</span><span class=\"p\">\n    </span><span class=\"nf\">Open File</span><span class=\"p\">           </span><span class=\"s\">old.docx</span><span class=\"p\">\n    </span><span class=\"nf\">Write Text</span><span class=\"p\">          </span><span class=\"s\">Extra Line Text</span><span class=\"p\">\n    </span><span class=\"nf\">Write Text</span><span class=\"p\">          </span><span class=\"s\">Another Extra Line of Text</span><span class=\"p\">\n    </span><span class=\"nf\">Save Document AS</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">new.docx</span><span class=\"p\">\n    ${</span><span class=\"nv\">texts</span><span class=\"p\">}=           </span><span class=\"nf\">Get all Texts</span><span class=\"p\">\n    </span><span class=\"nf\">Close Document</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Word.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"s1\">'old.docx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"s1\">'Extra Line Text'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">save_document_as</span><span class=\"p\">(</span><span class=\"s1\">'new.docx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">quit_application</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>",
        "version": "",
        "named_args": true,
        "scope": "GLOBAL",
        "generated": "2020-11-19 13:45:08",
        "inits": [],
        "keywords": [
            {
                "name": "Close Document",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n</div>",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "matched": true
            },
            {
                "name": "Create New Document",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Create new document for Word application</p>\n</div>\n</div>",
                "shortdoc": "Create new document for Word application",
                "tags": [],
                "matched": true
            },
            {
                "name": "Export To Pdf",
                "args": [
                    "filename: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Export active document into PDF file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">PDF to export WORD into</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Export active document into PDF file.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Get All Texts",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Get all texts from active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">texts</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Get all texts from active document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open Application",
                "args": [
                    "visible: bool = False",
                    "display_alerts: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open the Word application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open the Word application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Open File",
                "args": [
                    "filename: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Open Word document with filename.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Word document filepath, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Open Word document with filename.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Quit Application",
                "args": [
                    "save_changes: bool = False"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Quit the application.</p>\n</div>\n</div>",
                "shortdoc": "Quit the application.",
                "tags": [],
                "matched": true
            },
            {
                "name": "Replace Text",
                "args": [
                    "find: str",
                    "replace: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Replace text in active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param find:</th><td class=\"field-body\">text to replace</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param replace:</th><td class=\"field-body\">new text</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Replace text in active document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Document",
                "args": [],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save active document</p>\n</div>\n</div>",
                "shortdoc": "Save active document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Save Document As",
                "args": [
                    "filename: str",
                    "fileformat: str = None"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Save document with filename and optionally with given fileformat</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">where to save document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param fileformat:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">see &#64;FILEFORMATS dictionary for possible format,\ndefaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Save document with filename and optionally with given fileformat",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Footer",
                "args": [
                    "text: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set footer for the active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">footer text to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set footer for the active document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Set Header",
                "args": [
                    "text: str"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Set header for the active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">header text to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Set header for the active document",
                "tags": [],
                "matched": true
            },
            {
                "name": "Write Text",
                "args": [
                    "text: str",
                    "newline: bool = True"
                ],
                "doc": "<div style=\"margin: 0\"><div class=\"document\">\n<p>Writes given text at the end of the document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">string to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newline:</th><td class=\"field-body\">write text to newline if True, default to True</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>",
                "shortdoc": "Writes given text at the end of the document",
                "tags": [],
                "matched": true
            }
        ],
        "all_tags": [],
        "contains_tags": false
    }
}