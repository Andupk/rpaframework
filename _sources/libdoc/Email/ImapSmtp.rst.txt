###################
Robot Framework API
###################

***********
Description
***********

:Library scope: 

RPA Framework library providing SMTP and IMAP operations for
specified mail server.

Proper initialization needs `smtp_server` and `imap_server` defined.

********
Keywords
********

:Authorize:
  :Arguments: account: str = None, password: str = None, smtp_server: str = None, imap_server: str = None

  Authorize user to SMTP and IMAP servers.

  Will use separately set credentials or those given in keyword call.


:Authorize Imap:
  :Arguments: account: str = None, password: str = None, imap_server: str = None, imap_port: int = None

  Authorize to IMAP server.

  Can be called without giving any parameters if library
  has been initialized with necessary information and/or
  keyword ``set_credentials`` has been used.


:Authorize Smtp:
  :Arguments: account: str = None, password: str = None, smtp_server: str = None, smtp_port: int = None

  Authorize to SMTP server.

  Can be called without giving any parameters if library
  has been initialized with necessary information and/or
  keyword ``set_credentials`` has been used.


:Create Folder:
  :Arguments: folder_name: str = None

  Create email folder


:Delete Folder:
  :Arguments: folder_name: str = None

  Delete email folder


:Delete Message:
  :Arguments: criterion: str = 

  Delete single message from server based on criterion.

  If criterion does not return exactly 1 message then delete is not done.


:Delete Messages:
  :Arguments: criterion: str = 

  Delete messages from server based on criterion.


:Flag Messages:
  :Arguments: criterion: str = None, unflag: bool = False

  Mark messages as `flagged`


:Get Folder List:
  :Arguments: subdirectory: str = None, pattern: str = None

  Get list of folders on the server


:List Messages:
  :Arguments: criterion: str = 

  Return list of messages matching criterion.


:Mark As Read:
  :Arguments: criterion: str = None, unread: bool = False

  Mark messages as `read`


:Mark As Unread:
  :Arguments: criterion: str = None

  Mark messages as not `read`


:Rename Folder:
  :Arguments: oldname: str = None, newname: str = None, suppress_error: bool = False

  Rename email folder


:Save Attachment:
  :Arguments: message, target_folder, overwrite

  [summary]


:Save Attachments:
  :Arguments: criterion: str = , target_folder: str = None, overwrite: bool = False

  Save mail attachments into local folder.


:Save Messages:
  :Arguments: criterion: str = , target_folder: str = None

  Save messages based on criteria and store them to target folder
  with attachment files.

  Does not save message if `target_folder` is not given.


:Select Folder:
  :Arguments: folder_name: str = INBOX

  Select folder by name

  Returns number of messages in the folder or
  exception if folder does not exist on the server.


:Send Message:
  :Arguments: sender: str, recipients: str, subject: str = , body: str = , attachments: str = None, html: bool = False, images: str = None

  Send SMTP email

  Valid sender values:
      - First Lastname <address@domain>
      - address@domain


:Send Smtp Hello:
  Send hello message to SMTP server.

  Required step when creating SMTP connection.

:Set Credentials:
  :Arguments: account: str = None, password: str = None

  Set credentials


:Unflag Messages:
  :Arguments: criterion: str = None

  Mark messages as not `flagged`


:Wait For Message:
  :Arguments: criterion: str = , timeout: float = 5.0, interval: float = 1.0

  Wait for email matching `criterion` to arrive into mailbox.

  Examples:
      - wait_for_message('SUBJECT "rpa task calling"', timeout=300, interval=10)

