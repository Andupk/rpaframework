###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

Windows methods extending OperatingSystem class.


********
Keywords
********

:Boot Time In Seconds From Epoch:
  Get machine boot time


:Calculate Rectangle Center:
  :Arguments: rectangle: typing.Any

  Calculate x and y center coordinates from rectangle.


:Click Type:
  :Arguments: x: int=None, y: int=None, click_type: str=click

  Mouse click on coordinates x and y.

  Default click type is `click` meaning `left`

  :raises ValueError: if coordinates are not valid

:Close All Applications:
  Close all applications

:Connect By Handle:
  :Arguments: handle: str, windowtitle: str=None

  Connect to application by its handle


:Connect By Pid:
  :Arguments: app_pid: str, windowtitle: str=None

  Connect to application by its pid


:Drag And Drop:
  :Arguments: src: typing.Any, target: typing.Any, src_locator: str, target_locator: str=None, handle_ctrl_key: bool=False, drop_delay: float=2.0

  Drag elements from source and drop them on target.

  Please note that if CTRL is not pressed down during drag and drop then
  operation is MOVE operation, on CTRL down the operation is COPY operation.

  There will be also overwrite notification if dropping over existing files.

  :raises ValueError: on validation errors

:Find Element:
  :Arguments: locator: str, search_criteria: str=None

  Find element from window by locator and criteria.


:Get App:
  :Arguments: app_id: int=None

  Get application object by id

  By default returns active_application application object.


:Get Boot Time:
  :Arguments: as_datetime=False, datetime_format=%Y-%m-%d %H:%M:%S

  Get computer boot time in seconds from Epoch or in datetime string.


:Get Dialog Rectangle:
  :Arguments: ctrl: typing.Any=None

  Get element rectangle coordinates

  If `ctrl` is None then get coordinates from `dialog`

:Get Element:
  :Arguments: locator: str, screenshot: bool=False

  Get element by locator.


:Get Element Center:
  :Arguments: element: dict

  Get element center coordinates


:Get Element Rectangle:
  :Arguments: locator: str

  Get value of element `rectangle` attribute.


:Get Element Rich Text:
  :Arguments: locator: str

  Get value of element `rich text` attribute.


:Get Machine Name:
  Get machine name


:Get Memory Stats:
  :Arguments: humanized=True

  Get computer memory stats and return those in bytes
  or in humanized memory format.


:Get Username:
  Get username of logged in user


:Get Window Elements:
  :Arguments: screenshot: bool=False, element_json: bool=False, outline: bool=False

  Get element information about all window dialog controls
  and their descendants.


:Get Window List:
  Get list of open windows

  window dictionaries contains:

      - title
      - pid
      - handle


:Is Element Enabled:
  :Arguments: locator: str

  Is element enabled.


:Is Element Matching:
  :Arguments: itemdict: dict, locator: str, criteria: str, wildcard: bool=False

  Is element matching. Check if locator is found in `any` field
  or `criteria` field in the window items.


:Is Element Visible:
  :Arguments: locator: str

  Is element visible.


:Kill Process:
  :Arguments: process_name

  Kill process by name


:Lock Screen:
  Put windows into lock mode

:Log In:
  :Arguments: username: str, password: str, domain: str=.

  Log into Windows `domain` with `username` and `password`.


:Menu Select:
  :Arguments: menuitem: str

  Select item from menu


:Minimize Dialog:
  :Arguments: windowtitle: str

  Minimize window by its title


:Mouse Click:
  :Arguments: locator: str=None, x: int=0, y: int=0, off_x: int=0, off_y: int=0, image: str=None, ocr: str=None, method: str=locator, ctype: str=click

  Mouse click `locator`, `coordinates`, `image` or `ocr`.

  When using method `locator`,`image` or `ocr` mouse is clicked by default at
  center coordinates.

  Click types are:
      - `click` normal left button mouse click
      - `double`
      - `right`


:Mouse Click Coords:
  :Arguments: x: int, y: int, ctype: str=click, delay_time: float=None

  Click at coordinates on desktop


:Mouse Click Image:
  :Arguments: template: str, off_x: int=0, off_y: int=0, ctype: str=click

  Click at template image on desktop

  :raises NotImplementedError: [description]

:Mouse Click Ocr:
  :Arguments: ocr, off_x=0, off_y=0, ctype=click

  Click at ocr text on desktop

  :raises NotImplementedError: [description]

:Open Application:
  :Arguments: application: str

  Open application by dispatch method


:Open Dialog:
  :Arguments: windowtitle: str=None, highlight: bool=False

  Open window by its title.


:Open Executable:
  :Arguments: executable: str, windowtitle: str, backend: str=uia, work_dir: str=None

  Open Windows executable. Window title name is required
  to get handle on the application.


:Open File:
  :Arguments: filename: str

  Open associated application when opening file


:Open From Search:
  :Arguments: executable: str, windowtitle: str

  Open application using Windows search dialog.
  Window title name is required to get handle on the application.


:Open Using Run Dialog:
  :Arguments: executable: str, windowtitle: str

  Open application using Windows run dialog.
  Window title name is required to get handle on the application.


:Process Exists:
  :Arguments: process_name

  Check if process exists by its name


:Put System To Sleep:
  Put Windows into sleep mode

:Quit Application:
  :Arguments: app_id: str=None, send_keys: bool=False

  Quit an application by application id or
  active application if `app_id` is None.


:Restore Dialog:
  :Arguments: windowtitle: str

  Restore window by its title


:Screenshot:
  :Arguments: filename: str, element: dict=None, ctrl: typing.Any=None, desktop: bool=False

  Save screenshot into filename.


:Send Keys:
  :Arguments: keys: str

  Send keys into active windows.


:Send Keys To Input:
  :Arguments: keys_to_type: str, with_enter: bool=True, send_delay: float=0.5, enter_delay: float=1.5

  Send keys to windows and add ENTER if `with_enter` is True

  At the end of send_keys there is by default 1.0 second delay.
  At the end of ENTER there is by default 3.5 second delay.


:Switch To Application:
  :Arguments: app_id: int

  Switch to application by id.

  :raises ValueError: if application is not found by given id

:Type Keys:
  :Arguments: keys: str

  Type keys into active window element.


:Window Exists:

