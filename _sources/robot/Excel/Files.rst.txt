###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

The `Excel.Files` library can be used to read and write Excel
files without the need to start the actual Excel application.

It supports both legacy .xls files and modern .xlsx files.

Note: To run macros or load password protected worksheets,
please use the Excel application library.

**Examples**

**Robot Framework**

A common use-case is to load an existing Excel file as a table,
which can be iterated over later in a Robot Framework keyword or task:

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Tables
    Library    RPA.Excel.Files

    *** Keywords ***
    Read orders as table
        Open workbook    ${ORDERS_FILE}
        ${worksheet}=    Read worksheet   header=${TRUE}
        ${orders}=       Create table     ${worksheet}
        [Return]         ${orders}
        [Teardown]       Close workbook

Processing all worksheets in the Excel file and checking row count:

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Excel.Files

    *** Variables ***
    ${EXCEL_FILE}   /path/to/excel.xlsx

    *** Tasks ***
    Rows in the sheet
        [Setup]      Open Workbook    ${EXCEL_FILE}
        @{sheets}=   List Worksheets
        FOR  ${sheet}  IN   @{sheets}
            ${count}=  Get row count in the sheet   ${sheet}
            Log   Worksheet '${sheet}' has ${count} rows
        END

    *** Keywords ***
    Get row count in the sheet
        [Arguments]      ${SHEET_NAME}
        ${sheet}=        Read Worksheet   ${SHEET_NAME}
        ${rows}=         Get Length  ${sheet}
        [Return]         ${rows}

Creating a new Excel file with a dictionary:

.. code-block:: robotframework

    *** Tasks ***
    Creating new Excel
        Create Workbook  my_new_excel.xlsx
        FOR    ${index}    IN RANGE    20
            &{row}=       Create Dictionary
            ...           Row No   ${index}
            ...           Amount   ${index * 25}
            Append Rows to Worksheet  ${row}  header=${TRUE}
        END
        Save Workbook

Creating a new Excel file with a list:

.. code-block:: robotframework

    *** Variables ***
    @{heading}   Row No   Amount
    @{rows}      @{heading}

    *** Tasks ***
    Creating new Excel
        Create Workbook  my_new_excel.xlsx
        FOR    ${index}    IN RANGE   1  20
            @{row}=         Create List   ${index}   ${index * 25}
            Append To List  ${rows}  ${row}
        END
        Append Rows to Worksheet  ${rows}
        Save Workbook

**Python**

The library can also be imported directly into Python.

.. code-block:: python

    from RPA.Excel.Files import Files

    def read_excel_worksheet(path, worksheet):
        lib = Files()
        lib.open_workbook(path)
        try:
            return lib.read_worksheet(worksheet)
        finally:
            lib.close_workbook()

********
Keywords
********

:Append Rows To Worksheet:
  :Arguments: content, name=None, header=False, start=None

  Append values to the end of the worksheet.


:Close Workbook:
  Close the active workbook.

:Create Workbook:
  :Arguments: path=None, fmt=xlsx

  Create and open a new Excel workbook.


:Create Worksheet:
  :Arguments: name, content=None, exist_ok=False

  Create a new worksheet in the current workbook.


:Find Empty Row:
  :Arguments: name=None

  Find the first empty row after existing content.


:Get Active Worksheet:
  Get the name of the worksheet which is currently active.

:List Worksheets:
  List all names of worksheets in the given workbook.

:Open Workbook:
  :Arguments: path

  Open an existing Excel workbook.


:Read Worksheet:
  :Arguments: name=None, header=False, start=None

  Read the content of a worksheet into a list of dictionaries.

  Each key in the dictionary will be either values from the header row,
  or Excel-style column letters.


:Read Worksheet As Table:
  :Arguments: name=None, header=False, trim=True, start=None

  Read the content of a worksheet into a Table container. Allows
  sorting/filtering/manipulating using the `RPA.Tables` library.


:Remove Worksheet:
  :Arguments: name=None

  Remove a worksheet from the active workbook.


:Rename Worksheet:
  :Arguments: src_name, dst_name

  Rename an existing worksheet in the active workbook.


:Save Workbook:
  :Arguments: path=None

  Save the active workbook.


:Set Active Worksheet:
  :Arguments: value

  Set the active worksheet.


:Set Worksheet Value:
  :Arguments: row, column, value, name=None

  Set a cell value in the given worksheet.


:Worksheet Exists:
  :Arguments: name

  Return True if worksheet with given name is in workbook.
