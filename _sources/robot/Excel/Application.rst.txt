###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Excel.Application` is a library for controlling an Excel application.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library             RPA.Excel.Application
    Task Setup          Open Application
    Task Teardown       Quit Application

    *** Tasks ***
    Manipulate Excel application
        Open Workbook           workbook.xlsx
        Set Active Worksheet    sheetname=new stuff
        Write To Cells          row=1
        ...                     column=1
        ...                     value=my data
        Save Excel

    Run Excel Macro
        Open Workbook   orders_with_macro.xlsm
        Run Macro       Sheet1.CommandButton1_Click

**Python**

.. code-block:: python

    from RPA.Excel.Application import Application

    app = Application()

    app.open_application()
    app.open_workbook('workbook.xlsx')
    app.set_active_worksheet(sheetname='new stuff')
    app.write_to_cells(row=1, column=1, value='new data')
    app.save_excel()
    app.quit_application()

********
Keywords
********

:Add New Sheet:
  :Arguments: sheetname: str, tabname: str = None, create_workbook: bool = True

  Add new worksheet to workbook. Workbook is created by default if
  it does not exist.

  :raises ValueError: error is raised if workbook does not exist and
      `create_workbook` is False

:Add New Workbook:
  Adds new workbook for Excel application

:Close Document:
  :Arguments: save_changes: bool = False

  Close the active document (if open).

:Find First Available Row:
  :Arguments: worksheet: typing.Any = None, row: int = 1, column: int = 1

  Find first available free row and cell


:Open Application:
  :Arguments: visible: bool = False, display_alerts: bool = False

  Open the Excel application.


:Open Workbook:
  :Arguments: filename: str

  Open Excel by filename


:Quit Application:
  :Arguments: save_changes: bool = False

  Quit the application.

:Read From Cells:
  :Arguments: worksheet: typing.Any = None, row: int = None, column: int = None

  Read value from cell.

  :raises ValueError: if cell is not given

:Run Macro:
  :Arguments: macro_name: str = None

  Run Excel macro with given name


:Save Excel:
  Saves Excel file

:Save Excel As:
  :Arguments: filename: str, autofit: bool = False

  Save Excel with name if workbook is open


:Set Active Worksheet:
  :Arguments: sheetname: str = None, sheetnumber: int = None

  Set active worksheet by either its sheet number or name


:Write To Cells:
  :Arguments: worksheet: typing.Any = None, row: int = None, column: int = None, value: str = None, number_format: str = None, formula: str = None

  Write value, number_format and/or formula into cell.

  :raises ValueError: if cell is not given
