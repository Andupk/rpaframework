###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Database` is a library for handling different database operations.

All database operations are supported. Keywords `Query` and `Get Rows`
return values by default in `RPA.Table` format.

Library is compatible with any Database API Specification 2.0 module.

References:

- Database API Specification 2.0 - http://www.python.org/dev/peps/pep-0249/
- Lists of DB API 2.0 - http://wiki.python.org/moin/DatabaseInterfaces
- Python Database Programming - http://wiki.python.org/moin/DatabaseProgramming/

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.Database

    *** Tasks ***
    Get Orders From Database
        Connect To Database  pymysql  tester  user  password  127.0.0.1
        @{orders}            Query    Select * FROM incoming_orders
        FOR   ${order}  IN  @{orders}
            Handle Order  ${order}
        END

**Python**

.. code-block:: python

    from RPA.Database import Database
    from RPA.Robocloud.Secrets import FileSecrets

    filesecrets = FileSecrets("secrets.json")
    secrets = filesecrets.get_secret("databasesecrets")

    db = Database()
    db.connect_to_database('pymysql',
                        secrets["DATABASE"],
                        secrets["USERNAME"],
                        secrets["PASSWORD"],
                        '127.0.0.1'
                        )
    orders = db.query("SELECT * FROM incoming_orders")
    for order in orders:
        print(order)

********
Keywords
********

:Call Stored Procedure:
  :Arguments: name, params=None, sanstran=False

  Call stored procedure with name and params.


  Example:

  .. code-block:: robotframework

      @{params}     Create List   FirstParam   SecondParam   ThirdParam
      @{results}    Call Stored Procedure   mystpr  ${params}

:Connect To Database:
  :Arguments: module_name=None, database=None, username=None, password=None, host=None, port=None, charset=None, config_file=db.cfg

  Connect to database using DB API 2.0 module.


  Example:

  .. code-block:: robotframework

      Connect To Database  pymysql  database  username  password  host  port
      Connect To Database  ${CURDIR}${/}resources${/}dbconfig.cfg

:Description:
  :Arguments: table

  Get description of the SQL table


  Example:

  .. code-block:: robotframework

      Connect To Database    pymysql  mydb  user  pass  127.0.0.1
      ${db_description}      Description  mytable

:Disconnect From Database:
  Close connection to SQL database

  Example:

  .. code-block:: robotframework

      Connect To Database    pymysql  mydb  user  pass  127.0.0.1
      ${result}              Query   Select firstname, lastname FROM table
      Disconnect From Database

:Execute Sql Script:
  :Arguments: filename, sanstran=False

  Execute content of SQL script as SQL commands.


  Example:

  .. code-block:: robotframework

      Execute SQL Script   script.sql

:Get Number Of Rows:
  :Arguments: table, conditions=None

  Get number of rows in a table. Conditions can be given
  as arguments for WHERE clause.


  Example:

  .. code-block:: robotframework

      ${count}   Get Number Of Rows  tablename
      ${count}   Get Number Of Rows  tablename  column1=5 and column2='x'

:Get Rows:
  :Arguments: table, columns=None, conditions=None, as_table=True

  Get rows from table. Columns and conditions can be
  set to filter result.


  Example:

  .. code-block:: robotframework

      @{res}   Get Rows  tablename  arvo
      @{res}   Get Rows  tablename  arvo  columns=id,name
      @{res}   Get Rows  tablename  columns=id  conditions=column1='newvalue'
      @{res}   Get Rows  tablename  conditions=column2='updatedvalue'

:Query:
  :Arguments: statement, assertion=None, sanstran=False, as_table=True

  Make a SQL query.


  Example:

  .. code-block:: robotframework

      @{res}   Query   Select firstname, lastname FROM table
      FOR  ${row}  IN  @{RES}
          Log   ${row}
      END
      @{res}   Query  Select * FROM table  row_count > ${EXPECTED}
      @{res}   Query  Select * FROM table  'arvo' in columns
      @{res}   Query  Select * FROM table  columns == ['id', 'arvo']

:Set Auto Commit:
  :Arguments: autocommit=True

  Set database auto commit mode.


  Example:

  .. code-block:: robotframework

      Set Auto Commit             # auto commit is set on
      Set Auto Commit   False     # auto commit is turned off
