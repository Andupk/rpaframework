###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Exchange` is a library for sending, reading, and deleting emails.
`Exchange` is interfacing with Exchange Web Services (EWS).

For more information about server settings, see
`this Microsoft support article <https://support.microsoft.com/en-us/office/server-settings-you-ll-need-from-your-email-provider-c82de912-adcc-4787-8283-45a1161f3cc3>`_.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Email.Exchange
    Task Setup  Authorize  username=${ACCOUNT}  password=${PASSWORD}

    *** Variables ***
    ${ACCOUNT}              ACCOUNT_NAME
    ${PASSWORD}             ACCOUNT_PASSWORD
    ${RECIPIENT_ADDRESS}    RECIPIENT
    ${IMAGES}               myimage.png
    ${ATTACHMENTS}          C:${/}files${/}mydocument.pdf

    *** Tasks ***
    Sending email
        Send Message  recipients=${RECIPIENT_ADDRESS}
        ...           subject=Exchange Message from RPA Robot
        ...           body=<p>Exchange RPA Robot message body<br><img src='myimage.png'/></p>
        ...           save=${TRUE}
        ...           html=${TRUE}
        ...           images=${IMAGES}
        ...           cc=EMAIL_ADDRESS
        ...           bcc=EMAIL_ADDRESS
        ...           attachments=${ATTACHMENTS}

**Python**

.. code-block:: python

    from RPA.Email.Exchange import Exchange

    ex_account = "ACCOUNT_NAME"
    ex_password = "ACCOUNT_PASSWORD"

    mail = Exchange()
    mail.authorize(username=ex_account, password=ex_password)
    mail.send_message(
        recipients="RECIPIENT",
        subject="Message from RPA Python",
        body="RPA Python message body",
    )

********
Keywords
********

:Authorize:
  :Arguments: username: str, password: str, autodiscover: bool = True, access_type: str = DELEGATE, server: str = None, primary_smtp_address: str = None

  Connect to Exchange account


:Create Folder:
  :Arguments: folder_name: str = None, parent_folder: str = None

  Create email folder


:Delete Folder:
  :Arguments: folder_name: str = None, parent_folder: str = None

  Delete email folder


:Empty Folder:
  :Arguments: folder_name: str = None, parent_folder: str = None, delete_sub_folders: bool = False

  Empty email folder of all items


:List Messages:
  :Arguments: folder_name: str = None, count: int = 100

  List messages in the account inbox. Order by descending
  received time.


:Move Messages:
  :Arguments: criterion: str = , source: str = None, target: str = None, contains: bool = False

  Move message(s) from source folder to target folder

  Criterion examples:

      - subject:my message subject
      - body:something in body
      - sender:sender@domain.com


:Rename Folder:
  :Arguments: oldname: str = None, newname: str = None, parent_folder: str = None

  Rename email folder


:Send Message:
  :Arguments: recipients: str, subject: str = , body: str = , attachments: str = None, html: bool = False, images: str = None, cc: str = None, bcc: str = None, save: bool = False

  Keyword for sending message through connected Exchange account.

  Email addresses can be prefixed with `ex:` to indicate Exchange
  account address.

  Recipients is ``required`` parameter.


:Wait For Message:
  :Arguments: criterion: str = , timeout: float = 5.0, interval: float = 1.0, contains: bool = False

  Wait for email matching `criterion` to arrive into INBOX.

