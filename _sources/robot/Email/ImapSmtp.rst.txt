###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`ImapSmtp` is a library for sending, reading, and deleting emails.
`ImapSmtp` is interfacing with SMTP and IMAP protocols.

**Troubleshooting**

- Authentication error with Gmail - "Application-specific password required"
    see. https://support.google.com/mail/answer/185833?hl=en

**Examples**

**Robot Framework**

It is highly recommended to secure your passwords and take care
that they are not stored in the version control by mistake.
See ``RPA.Robocloud.Secrets`` how to store RPA Secrets into Robocloud.

When sending HTML content with IMG tags, the ``src`` filenames must match
the base image name given with the ``images`` parameter.

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Email.ImapSmtp   smtp_server=smtp.gmail.com  port=587
    Task Setup  Authorize  account=${GMAIL_ACCOUNT}  password=${GMAIL_PASSWORD}

    *** Variables ***
    ${GMAIL_ACCOUNT}        ACCOUNT_NAME
    ${GMAIL_PASSWORD}       ACCOUNT_PASSWORD
    ${RECIPIENT_ADDRESS}    RECIPIENT
    ${BODY_IMG1}            ${IMAGEDIR}${/}approved.png
    ${BODY_IMG2}            ${IMAGEDIR}${/}invoice.png
    ${EMAIL_BODY}     <h1>Heading</h1><p>Status: <img src='approved.png' alt='approved image'/></p>
    ...               <p>INVOICE: <img src='invoice.png' alt='invoice image'/></p>

    *** Tasks ***
    Sending email
        Send Message  sender=${GMAIL_ACCOUNT}
        ...           recipients=${RECIPIENT_ADDRESS}
        ...           subject=Message from RPA Robot
        ...           body=RPA Robot message body

    Sending HTML Email With Image
        [Documentation]     Sending email with HTML content and attachment
        Send Message
        ...                 sender=${GMAIL_ACCOUNT}
        ...                 recipients=${RECIPIENT_ADDRESS}
        ...                 subject=HTML email with body images (2) plus one attachment
        ...                 body=${EMAIL_BODY}
        ...                 html=${TRUE}
        ...                 images=${BODY_IMG1}, ${BODY_IMG2}
        ...                 attachments=example.png

**Python**

.. code-block:: python

    from RPA.Email.ImapSmtp import ImapSmtp

    gmail_account = "ACCOUNT_NAME"
    gmail_password = "ACCOUNT_PASSWORD"
    sender = gmail_account

    mail = ImapSmtp(smtp_server="smtp.gmail.com", port=587)
    mail.authorize(account=gmail_account, password=gmail_password)
    mail.send_message(
        sender=gmail_account,
        recipients="RECIPIENT",
        subject="Message from RPA Python",
        body="RPA Python message body",
    )

********
Keywords
********

:Authorize:
  :Arguments: account: str = None, password: str = None, smtp_server: str = None, imap_server: str = None, smtp_port: int = None, imap_port: int = None

  Authorize user to SMTP and IMAP servers.

  Will use separately set credentials or those given in keyword call.


  Example:

  .. code-block:: robotframework

      Authorize    ${username}   ${password}  smtp_server=smtp.gmail.com  smtp_port=587

:Authorize Imap:
  :Arguments: account: str = None, password: str = None, imap_server: str = None, imap_port: int = None

  Authorize to IMAP server.

  Can be called without giving any parameters if library
  has been initialized with necessary information and/or
  keyword ``set_credentials`` has been used.


  Example:

  .. code-block:: robotframework

      Authorize IMAP    ${username}   ${password}  imap.gmail.com  993

:Authorize Smtp:
  :Arguments: account: str = None, password: str = None, smtp_server: str = None, smtp_port: int = None

  Authorize to SMTP server.

  Can be called without giving any parameters if library
  has been initialized with necessary information and/or
  keyword ``set_credentials`` has been used.


  Example:

  .. code-block:: robotframework

      Authorize SMTP    ${username}   ${password}  smtp.gmail.com  587

:Create Folder:
  :Arguments: folder_name: str = None

  Create email folder


  Example:

  .. code-block:: robotframework

      Create Folder   filtered

:Delete Folder:
  :Arguments: folder_name: str = None

  Delete email folder


  Example:

  .. code-block:: robotframework

      Delete Folder   filtered

:Delete Message:
  :Arguments: criterion: str = 

  Delete single message from server based on criterion.

  If criterion does not return exactly 1 message then delete is not done.


  Example:

  .. code-block:: robotframework

      Delete Message  SUBJECT "Greetings RPA developer"

:Delete Messages:
  :Arguments: criterion: str = 

  Delete messages from server based on criterion.


  Example:

  .. code-block:: robotframework

      Delete Messages  SUBJECT Greetings

:Flag Messages:
  :Arguments: criterion: str = None, unflag: bool = False

  Mark messages as `flagged`


  Example:

  .. code-block:: robotframework

      ${flagged}  ${oftotal}    Flag Messages   SUBJECT rpa
      ${unflagged}  ${oftotal}  Flag Messages   SUBJECT rpa  unflag=True

:Get Folder List:
  :Arguments: subdirectory: str = None, pattern: str = None

  Get list of folders on the server


  Example:

  .. code-block:: robotframework

      @{folders}  Get Folder List
      @{folders}  Get Folder List  pattern=important
      @{folders}  Get Folder List  subdirectory=sub

:List Messages:
  :Arguments: criterion: str = 

  Return list of messages matching criterion.


  Example:

  .. code-block:: robotframework

      @{emails}  List Messages  SUBJECT "rpa task"
      FOR  ${email}  IN  @{EMAILS}
          Log  ${email}[Subject]
          Log  ${email}[From]
          Log  ${email}[Date]
          Log  ${email}[Delivered-To]
          Log  ${email}[Received]
          Log  ${email}[Has-Attachments]
      END

:Mark As Read:
  :Arguments: criterion: str = None, unread: bool = False

  Mark messages as `read`


  Example:

  .. code-block:: robotframework

      ${read}  ${oftotal}  Mark As Read   SUBJECT rpa

:Mark As Unread:
  :Arguments: criterion: str = None

  Mark messages as not `read`


  Example:

  .. code-block:: robotframework

      ${unread}  ${oftotal}  Mark As Unread   SUBJECT rpa

:Rename Folder:
  :Arguments: oldname: str = None, newname: str = None, suppress_error: bool = False

  Rename email folder


  Example:

  .. code-block:: robotframework

      Rename Folder   subfolder   filtered

:Save Attachment:
  :Arguments: message, target_folder, overwrite

  Save mail attachment into local folder


  Example:

  .. code-block:: robotframework

      @{emails}  List Messages  SUBJECT "rpa task"
      FOR  ${email}  IN  @{EMAILS}
          Run Keyword If   ${email}[Has-Attachments] == True
          ...              Save Attachment  ${email}  target_folder=${CURDIR}  overwrite=True
      END

:Save Attachments:
  :Arguments: criterion: str = , target_folder: str = None, overwrite: bool = False

  Save mail attachments into local folder.


  Example:

  .. code-block:: robotframework

      ${numsaved}  Save Attachments   SUBJECT "rpa task"
      ...          target_folder=${CURDIR}${/}messages  overwrite=True

:Save Messages:
  :Arguments: criterion: str = , target_folder: str = None

  Save messages based on criteria and store them to target folder
  with attachment files.

  Does not save message if `target_folder` is not given.


  Example:

  .. code-block:: robotframework

      Save Messages  SUBJECT Important message  target_folder=${USERDIR}${/}messages

:Select Folder:
  :Arguments: folder_name: str = INBOX

  Select folder by name

  Returns number of messages in the folder or
  exception if folder does not exist on the server.


  Example:

  .. code-block:: robotframework

      Select Folder   subfolder

:Send Message:
  :Arguments: sender: str, recipients: str, subject: str = , body: str = , attachments: str = None, html: bool = False, images: str = None

  Send SMTP email

  Valid sender values:
      - First Lastname <address@domain>
      - address@domain


  Example:

  .. code-block:: robotframework

      Send Message  sender@domain.com  recipient@domain.com
      ...           subject=Greetings Software Robot Developer
      ...           body=${email_body}
      ...           attachments:${CURDIR}${/}report.pdf

:Send Smtp Hello:
  Send hello message to SMTP server.

  Required step when creating SMTP connection.

  .. code-block:: robotframework

      Send SMTP Hello

:Set Credentials:
  :Arguments: account: str = None, password: str = None

  Set credentials


  Example:

  .. code-block:: robotframework

      Set Credentials   ${username}   ${password}
      Authorize

:Unflag Messages:
  :Arguments: criterion: str = None

  Mark messages as not `flagged`


  Example:

  .. code-block:: robotframework

      ${unflagged}  ${oftotal}  Unflag Messages   SUBJECT rpa

:Wait For Message:
  :Arguments: criterion: str = , timeout: float = 5.0, interval: float = 1.0

  Wait for email matching `criterion` to arrive into mailbox.


  Example:

  .. code-block:: robotframework

      @{emails}  Wait For Message  SUBJECT "rpa task"  timeout=300  interval=10
