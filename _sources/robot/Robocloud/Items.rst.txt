###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

A library for interacting with RPA work items.

Work items are used for managing data that go through multiple
activities and tasks inside a process. Each execution of an activity receives
a work item from the previous activity, and after the activity is finished, it
is forwarded to the next one. During the execution, it can freely
read and update the data contained in an item.

The default implementation uses Robocloud to store the data, but the library
allows using custom adapters.

**Default environment**

The library automatically loads the work item defined by its runtime
environment if the argument ``load_env`` is truthy (enabled by default).
This functionality is controlled by the following environment variables:

* ``RC_WORKSPACE_ID``: The ID for the Robocloud workspace
* ``RC_WORKITEM_ID``:  The ID for the Robocloud work item

These values are dynamic and should be set by Robocloud, but can be
overriden manually while developing an activity.

**Item structure**

A work item's data payload is JSON and allows storing anything that is
serializable. This library creates an object with the key 'variables'
that contains key-value pairs of a variable name and its contents.
These variables can be exposed to the Robot Framework task to be used directly.

In addition to the data section, a work item can also contain files,
which are stored by default in Robocorp's cloud. Adding and using
files with work items requires no additional setup from the user.

**Workflow**

While a work item is loaded automatically when a suite starts, changes are
not automatically reflected back to the source. The work item will be modified
locally and then saved when the corresponding keyword is explicitly called.
It is recommended to defer all saves to the end of the task to prevent
leaving work items in a half-modified state after failures.

**Custom adapters**

While Robocloud is the default implementation, it can also be replaced
with a custom adapter. The selection is based on either the ``default_adapter``
argument for the library, or the ``RPA_WORKITEMS_ADAPTER`` environment
variable. A custom implementation should inherit from the ``BaseAdapter``
class. The library has a built-in alternative adapter called FileAdapter for
storing work items to disk.

**Examples**

**Robot Framework**

In the following example the work item is modified locally and then saved
back to Robocloud. Also note how the work item is loaded implicitly when
the suite starts.

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Robocloud.Items

    *** Tasks ***
    Save variables to Robocloud
        Add work item file    orders.xlsx
        Set work item variables    user=Dude    mail=address@company.com
        Save work item

Later in the process inside a different robot, we can use previously saved
work item variables and files. The library also allows injecting the variables
directly into the current task execution.

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Robocloud.Items

    *** Tasks ***
    Use variables from Robocloud
        Set task variables from work item
        Log    Variables are now available: ${user}, ${mail}
        ${path}=    Get work item file    orders.xlsx
        Log    Files are also stored to disk: ${path}

**Python**

The library can also be used through Python, but it does not implicitly
load the work item for the current execution.

.. code-block:: python

    import logging
    from RPA.Robocloud.Items import Items

    def list_variables(item_id):
        library = Items()
        library.load_work_item_from_environment()

        for variable, value in library.get_work_item_variables().items():
            logging.info("%s = %s", variable, value)

********
Keywords
********

:Add Work Item File:
  :Arguments: path, name=None

  Add given file to work item.

  NOTE: Files are not uploaded before work item is saved

  Example:

  .. code-block:: robotframework

      Add work item file    output.xls
      Save work item


:Add Work Item Files:
  :Arguments: pattern

  Add all files that match given pattern to work item.

  Example:

  .. code-block:: robotframework

      Add work item files    %{ROBOT_ROOT}/generated/*.csv
      Save work item


:Clear Work Item:
  Remove all data in the current work item.

  Example:

  .. code-block:: robotframework

      Clear work item
      Save work item

:Delete Work Item Variables:
  :Arguments: \*names, force=True

  Delete variable(s) from the current work item.

  Example:

  .. code-block:: robotframework

      Delete work item variables    username    email
      Save work item


:Get Work Item File:
  :Arguments: name, path=None

  Get attached file from work item to disk.
  Returns the absolute path to the created file.

  Example:

  .. code-block:: robotframework

      ${path}=    Get work item file    input.xls
      Open workbook    ${path}


:Get Work Item Files:
  :Arguments: pattern, dirname=None

  Get files attached to work item that match given pattern.
  Returns a list of absolute paths to the downloaded files.

  Example:

  .. code-block:: robotframework

      ${paths}=    Get work item files    customer_*.xlsx
      FOR  ${path}  IN  @{paths}
          Handle customer file    ${path}
      END


:Get Work Item Payload:
  Get the full JSON payload for a work item.

  **NOTE**: Most use cases should prefer higher-level keywords.

  Example:

  .. code-block:: robotframework

      ${payload}=    Get work item payload
      Log    Entire payload as dictionary: ${payload}

:Get Work Item Variable:
  :Arguments: name, default=<object object at 0x7fd6b2220dd0>

  Return a single variable value from the work item,
  or default value if defined and key does not exist.
  If key does not exist and default is not defined, raises `KeyError`.

  Example:

  .. code-block:: robotframework

      ${username}=    Get work item variable    username    default=guest


:Get Work Item Variables:
  Read all variables from the current work item and
  return their names and values as a dictionary.

  Example:

  .. code-block:: robotframework

      ${variables}=    Get work item variables
      Log    Username: ${variables}[username], Email: ${variables}[email]

:List Work Item Files:
  List the names of files attached to the current work item.

  Example:

  .. code-block:: robotframework

      ${names}=    List work item files
      Log    Work item has files with names: ${names}

:List Work Item Variables:
  List the variable names for the current work item.

  Example:

  .. code-block:: robotframework

      ${variables}=    List work item variables
      Log    Available variables in work item: ${variables}

:Load Work Item:
  :Arguments: workspace_id, item_id

  Load work item for reading/writing.

  **NOTE**: Currently only one work item per execution is supported
            by Robocorp Cloud, which should be loaded automatically.


:Load Work Item From Environment:
  Load current work item defined by the runtime environment.

  The corresponding environment variables are:

  * RC_WORKSPACE_ID
  * RC_WORKITEM_ID

:Remove Work Item File:
  :Arguments: name, missing_ok=True

  Remove attached file from work item.

  NOTE: Files are not deleted before work item is saved

  Example:

  .. code-block:: robotframework

      Remove work item file    input.xls
      Save work item


:Remove Work Item Files:
  :Arguments: pattern, missing_ok=True

  Removes files attached to work item that match given pattern.

  Example:

  .. code-block:: robotframework

      Remove work item files    *.xlsx
      Save work item


:Save Work Item:
  Save the current data in the work item. If not saved,
  all changes are discarded when the library goes out of scope.

:Set Task Variables From Work Item:
  Convert all variables in the current work item to
  Robot Framework task variables.

  Example:

  .. code-block:: robotframework

      # Work item has variable INPUT_URL
      Set task variables from work item
      Log    The variable is now available: ${INPUT_URL}

:Set Work Item Payload:
  :Arguments: payload

  Set the full JSON payload for a work item.

  **NOTE**: Most use cases should prefer higher-level keywords.

  Example:

  .. code-block:: robotframework

      ${output}=    Create dictionary    url=example.com    username=Mark
      Set work item payload    ${output}


:Set Work Item Variable:
  :Arguments: name, value

  Set a single variable value in the current work item.

  Example:

  .. code-block:: robotframework

      Set work item variable    username    MarkyMark
      Save work item


:Set Work Item Variables:
  :Arguments: \*\*kwargs

  Set multiple variables in the current work item.

  Example:

  .. code-block:: robotframework

      Set work item variables    username=MarkyMark    email=mark@example.com
      Save work item

