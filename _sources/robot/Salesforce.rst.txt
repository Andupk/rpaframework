###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Salesforce` is a library for accessing Salesforce using REST API.
The library extends `simple-salesforce library`_.

More information available at `Salesforce REST API Developer Guide`_.

.. _Salesforce REST API Developer Guide:
    https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htm

.. _simple-salesforce library:
    https://github.com/simple-salesforce/simple-salesforce

**Dataloader**

The keyword `execute_dataloader_import` can be used to mimic
`Salesforce Dataloader`_ import behaviour.

`input_object` can be given in different formats. Below is an example where
input is in `RPA.Table` format in **method a** and list format in **method b**.

.. _Salesforce Dataloader:
    https://developer.salesforce.com/docs/atlas.en-us.dataLoader.meta/dataLoader/data_loader.htm

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Salesforce
    Library     RPA.Database
    Task Setup  Authorize Salesforce

    *** Tasks ***
    # Method a
    ${orders}=        Database Query Result As Table
    ...               SELECT * FROM incoming_orders
    ${status}=        Execute Dataloader Insert
    ...               ${orders}  ${mapping_dict}  Tilaus__c
    # Method b
    ${status}=        Execute Dataloader Insert
    ...               ${WORKDIR}${/}orders.json  ${mapping_dict}  Tilaus__c


Example file **orders.json**

.. code-block:: json

    [
        {
            "asiakas": "0015I000002jBLIQA2"
        },
        {
            "asiakas": "0015I000002jBLDQA2"
        },
    ]

`mapping_object` describes how the input data fields are mapped into Salesforce
object attributes. In the example, the mapping defines that `asiakas` attribute in the
input object is mapped into `Tilaaja__c` attribute of `Tilaus__c` custom Salesforce object.

.. code-block:: json

    {
        "Tilaus__c": {
            "asiakas": "Tilaaja__c"
        },
    }

Object type could be, for example, `Tilaus__c`.

**Salesforce object operations**

Following operations can be used to manage Salesforce objects:

* Get Salesforce Object By Id
* Create Salesforce Object
* Update Salesforce Object
* Upsert Salesforce Object
* Delete Salesforce Object
* Get Salesforce Object Metadata
* Describe Salesforce Object

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Salesforce
    Task Setup  Authorize Salesforce

    *** Variables ***
    ${ACCOUNT_NOKIA}    0015I000002jBLDQA2

    *** Tasks ***
    Change account details in Salesforce
        &{account}=      Get Salesforce Object By Id   Account  ${ACCOUNT_NOKIA}
        &{update_obj}=   Create Dictionary   Name=Nokia Ltd  BillingStreet=Nokia bulevard 1
        ${result}=       Update Salesforce Object  Account  ${ACCOUNT_NOKIA}  ${update_obj}

    *** Keywords ***
    Authorize Salesforce
        ${secrets}=     Get Secret   salesforce
        Auth With Token
        ...        username=${secrets}[USERNAME]
        ...        password=${secrets}[PASSWORD]
        ...        api_token=${secrets}[API_TOKEN]

**Python**

.. code-block:: python

    import pprint
    from RPA.Salesforce import Salesforce
    from RPA.Robocloud.Secrets import FileSecrets

    pp = pprint.PrettyPrinter(indent=4)
    filesecrets = FileSecrets("secrets.json")
    secrets = filesecrets.get_secret("salesforce")

    sf = Salesforce()
    sf.auth_with_token(
        username=secrets["USERNAME"],
        password=secrets["PASSWORD"],
        api_token=secrets["API_TOKEN"],
    )
    nokia_account_id = "0015I000002jBLDQA2"
    account = sf.get_salesforce_object_by_id("Account", nokia_account_id)
    pp.pprint(account)
    billing_information = {
        "BillingStreet": "Nokia Bulevard 1",
        "BillingCity": "Espoo",
        "BillingPostalCode": "01210",
        "BillingCountry": "Finland",
    }
    result = sf.update_salesforce_object("Account", nokia_account_id, billing_information)
    print(f"Update result: {result}")

********
Keywords
********

:Add Product Into Opportunity:
  :Arguments: product_name: str, quantity: int, opportunity_id: str = None, pricebook_name: str = None, custom_total_price: float = None

  Add Salesforce Product into Opportunity.


:Auth With Token:
  :Arguments: username: str, password: str, api_token: str

  Authorize to Salesforce with security token, username
  and password creating instance.


:Create New Opportunity:
  :Arguments: close_date: str, opportunity_name: str, stage_name: str = Closed Won, account_name: str = None

  Create Salesforce Opportunity object.


:Create Salesforce Object:
  :Arguments: object_type: str, object_data: typing.Any

  Create Salesforce object by type and data.

  :raises SalesforceDataNotAnDictionary: when `object_data` is not dictionary

:Delete Salesforce Object:
  :Arguments: object_type: str, object_id: str

  Delete Salesfoce object by type and id.


:Describe Salesforce Object:
  :Arguments: object_type: str

  Get Salesfoce object description by type.


:Execute Dataloader Insert:
  :Arguments: input_object: typing.Any, mapping_object: typing.Any, object_type: str

  Keyword mimics Salesforce Dataloader 'insert' behaviour by taking
  in a `input_object`representing dictionary of data to input into Salesforce,
  a `mapping_object` representing dictionary mapping the input keys into
  Salesforce keys, an `object_type` representing Salesforce object which
  Datahandler will handle with `operation` type.

  Stores operation successes into `Salesforce.dataloader_success` array.
  Stores operation errors into `Salesforce.dataloader_errors`.

  These can be retrieved with keywords `get_dataloader_success_table` and
  `get_dataloader_error_table` which return corresponding data as
  `RPA.Table`.


:Get Dataloader Error Table:
  Return Dataloader error entries as `RPA.Table`

:Get Dataloader Success Table:
  Return Dataloader success entries as `RPA.Table`

:Get Opportunity Id:
  :Arguments: opportunity_name: str

  Get ID of an Opportunity linked to set account.


:Get Pricebook Entries:
  Get all pricebook entries.


:Get Pricebook Id:
  :Arguments: pricebook_name: str

  Get ID of a pricelist.

  Returns False if unique Id is not found.


:Get Products In Pricelist:
  :Arguments: pricebook_name: str

  Get all products in a pricelist.


:Get Salesforce Object By Id:
  :Arguments: object_type: str, object_id: str

  Get Salesforce object by id and type.


:Get Salesforce Object Metadata:
  :Arguments: object_type: str

  Get Salesfoce object metadata by type.


:Read Dictionary From File:
  :Arguments: mapping_file: str

  Read dictionary from file.


:Salesforce Query:
  :Arguments: sql_string: str

  Perform SQL query.


:Salesforce Query Result As Table:
  :Arguments: sql_string: str

  Perform SQL query and return result as `RPA.Table`.


:Set Account:
  :Arguments: account_name: str = , account_id: str = 

  Set account name and id by giving either parameter.

  Can be used together with keywords:
      - get_opportunity_id
      - create_new_opportunity


:Set Pricebook:
  :Arguments: pricebook_name: str

  Sets Pricebook to be used in Salesforce operations.


:Update Salesforce Object:
  :Arguments: object_type: str, object_id: str, object_data: typing.Any

  Update Salesfoce object by type, id and data.

  :raises SalesforceDataNotAnDictionary: when `object_data` is not dictionary

:Upsert Salesforce Object:
  :Arguments: object_type: str, object_id: str, object_data: typing.Any

  Upsert Salesfoce object by type, id and data.

  :raises SalesforceDataNotAnDictionary: when `object_data` is not dictionary
