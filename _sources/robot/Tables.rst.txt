###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Tables` is a library for manipulating tabular data inside Robot Framework.

It can import data from various sources and apply different operations to it.
Common use-cases are reading and writing CSV files, inspecting files in
directories, or running tasks using existing Excel data.

**Import types**

The data from which a table can be created can be of two main types:

1. An iterable of individual rows, like a list of lists, or list of dictionaries
2. A dictionary of columns, where each dictionary value is a list of values

For instance, these two input values:

.. code-block:: python

    data1 = [
        {"name": "Mark", "age": 58},
        {"name": "John", "age": 22},
        {"name": "Adam", "age": 67},
    ]

    data2 = {
        "name": ["Mark", "John", "Adam"],
        "age":  [    58,     22,     67],
    }

Would both result in the following table:

+-------+------+-----+
| Index | Name | Age |
+=======+======+=====+
| 1     | Mark | 58  |
+-------+------+-----+
| 2     | John | 22  |
+-------+------+-----+
| 3     | Adam | 67  |
+-------+------+-----+

**Examples**

**Robot Framework**

The `Tables` library can load tabular data from various other libraries
and manipulate it inside Robot Framework.

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Tables

    *** Keywords ***
    Files to Table
        ${files}=    List files in directory    ${CURDIR}
        ${files}=    Create table    ${files}
        Filter table by column    ${files}    size  >=  ${1024}
        FOR    ${file}    IN    @{files}
            Log    ${file}[name]
        END
        Write table to CSV    ${files}    ${OUTPUT_DIR}${/}files.csv

**Python**

The library is also available directly through Python, where it
is easier to handle multiple different tables or do more bespoke
manipulation operations.

.. code-block:: python

    from RPA.Tables import Tables

    library = Tables()
    orders = library.read_table_from_csv(
        "orders.csv", columns=["name", "mail", "product"]
    )

    customers = library.group_table_by_column(rows, "mail")
    for customer in customers:
        for order in customer:
            add_cart(order)
        make_order()

********
Keywords
********

:Add Table Column:
  :Arguments: table, name=None, values=None

  Append a column to a table.


:Add Table Row:
  :Arguments: table, row, index=None

  Append rows to a table.


:Clear Table:
  :Arguments: table

  Clear table in-place, but keep columns.


:Copy Table:
  :Arguments: table

  Copy table object.


:Create Table:
  :Arguments: data=None, trim=False

  Create Table object from data.

  Data can be a combination of various iterable containers, e.g.
  list of lists, list of dicts, dict of lists.


:Export Table:
  :Arguments: table, with_index=False, as_list=True

  Convert table object to standard Python containers.


:Filter Empty Rows:
  :Arguments: table

  Remove all rows from the table which have only None values.


:Filter Table By Column:
  :Arguments: table, column, operator, value

  Return all rows where the column values match the given condition.


:Get Table Cell:
  :Arguments: table, row, column

  Get a cell value from table.


:Get Table Column:
  :Arguments: table, column, as_list=False

  Get all column values from table.


:Get Table Dimensions:
  :Arguments: table

  Return table dimensions, as (rows, columns).


:Get Table Row:
  :Arguments: table, index, as_list=False

  Get a single row from table.


:Get Table Slice:
  :Arguments: table, start=None, end=None

  Return a new Table from a subset of given Table rows.


:Group Table By Column:
  :Arguments: table, column

  Group table by `column` and return a list of grouped Tables.


:Pop Table Column:
  :Arguments: table, column=None, as_list=False

  Remove column from table and return it.


:Pop Table Row:
  :Arguments: table, index=None, as_list=False

  Remove row from table and return it.


:Read Table From Csv:
  :Arguments: path, header=None, columns=None, dialect=None, delimiters=None

  Read a CSV file as a table.

  By default attempts to deduce the CSV format and headers
  from a sample of the input file. If it's unable to determine
  the format automatically, the dialect and header will
  have to be defined manually.

  Valid ``dialect`` values are ``excel``, ``excel-tab``, and ``unix``,
  and ``header`` is boolean argument (``True``/``False``). Optionally a
  set of valid ``delimiters`` can be given as a string.

  The ``columns`` argument can be used to override the names of columns
  in the resulting table. The amount of columns must match the input
  data.


:Rename Table Columns:
  :Arguments: table, columns, strict=False

  Renames columns in the Table with given values. Columns with
  name as `None` will be use previous value.


:Requires Table:
  :Arguments: obj



:Set Column As Index:
  :Arguments: table, column=None

  Set existing column as index for rows.


:Set Table Cell:
  :Arguments: table, row, column, value

  Set a cell value in the table.


:Set Table Column:
  :Arguments: table, column, values

  Assign values to entire column in the table.


:Set Table Row:
  :Arguments: table, row, values

  Assign values to a row in the table.


:Sort Table By Column:
  :Arguments: table, column, ascending=False

  Sort table in-place according to `column`.


:Table Head:
  :Arguments: table, count=5, as_list=False

  Return first `count` rows from table.


:Table Tail:
  :Arguments: table, count=5, as_list=False

  Return last `count` rows from table.


:Trim Column Names:
  :Arguments: table

  Remove all extraneous whitespace from column names.

:Trim Empty Rows:
  :Arguments: table

  Remove all rows from the end of the table
  which have only None values.


:Write Table To Csv:
  :Arguments: table, path, header=True, dialect=excel

  Write a table as a CSV file.

  Valid ``dialect`` values are ``excel``, ``excel-tab``, and ``unix``.

