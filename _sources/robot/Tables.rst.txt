###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

Robot Framework library for manipulating tabular data.

********
Keywords
********

:Add Table Column:
  :Arguments: table, name=None, values=None

  Append a column to a table.


:Add Table Row:
  :Arguments: table, row, index=None

  Append rows to a table.


:Clear Table:
  :Arguments: table

  Clear table in-place, but keep columns.


:Copy Table:
  :Arguments: table

  Copy table object.


:Create Table:
  :Arguments: data=None, trim=False

  Create Table object from data.

  Data can be a combination of various iterable containers, e.g.
  list of lists, list of dicts, dict of lists.


:Export Table:
  :Arguments: table, with_index=False, as_list=True

  Convert table object to standard Python containers.


:Filter Empty Rows:
  :Arguments: table

  Remove all rows from the table which have only None values.


:Filter Table By Column:
  :Arguments: table, column, operator, value

  Return all rows where the column values match the given condition.


:Get Table Cell:
  :Arguments: table, row, column

  Get a cell value from table.


:Get Table Column:
  :Arguments: table, column, as_list=False

  Get all column values from table.


:Get Table Dimensions:
  :Arguments: table

  Return table dimensions, as (rows, columns).


:Get Table Row:
  :Arguments: table, index, as_list=False

  Get a single row from table.


:Get Table Slice:
  :Arguments: table, start=None, end=None

  Return a new Table from a subset of given Table rows.


:Group Table By Column:
  :Arguments: table, column

  Group table by `column` and return a list of grouped Tables.


:Pop Table Column:
  :Arguments: table, column=None, as_list=False

  Remove column from table and return it.


:Pop Table Row:
  :Arguments: table, index=None, as_list=False

  Remove row from table and return it.


:Read Table From Csv:
  :Arguments: path, header=None, columns=None, dialect=None, delimiters=None

  Read a CSV file as a table.

  By default attempts to deduce the CSV format and headers
  from a sample of the input file. If it's unable to determine
  the format automatically, the dialect and header will
  have to be defined manually.

  Valid ``dialect`` values are ``excel``, ``excel-tab``, and ``unix``,
  and ``header`` is boolean argument (``True``/``False``). Optionally a
  set of valid ``delimiters`` can be given as a string.

  The ``columns`` argument can be used to override the names of columns
  in the resulting table. The amount of columns must match the input
  data.


:Rename Table Columns:
  :Arguments: table, columns, strict=False

  Renames columns in the Table with given values. Columns with
  name as `None` will be use previous value.


:Requires Table:
  :Arguments: obj



:Set Column As Index:
  :Arguments: table, column=None

  Set existing column as index for rows.


:Set Table Cell:
  :Arguments: table, row, column, value

  Set a cell value in the table.


:Set Table Column:
  :Arguments: table, column, values

  Assign values to entire column in the table.


:Set Table Row:
  :Arguments: table, row, values

  Assign values to a row in the table.


:Sort Table By Column:
  :Arguments: table, column, ascending=False

  Sort table in-place according to `column`.


:Table Head:
  :Arguments: table, count=5, as_list=False

  Return first `count` rows from table.


:Table Tail:
  :Arguments: table, count=5, as_list=False

  Return last `count` rows from table.


:Trim Column Names:
  :Arguments: table

  Remove all extraneous whitespace from column names.

:Trim Empty Rows:
  :Arguments: table

  Remove all rows from the end of the table
  which have only None values.


:Write Table To Csv:
  :Arguments: table, path, header=True, dialect=excel

  Write a table as a CSV file.

  Valid ``dialect`` values are ``excel``, ``excel-tab``, and ``unix``.

