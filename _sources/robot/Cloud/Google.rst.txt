###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Google` is a library for operating with Google API endpoints.

Usage requires the following steps:

- Create a GCP project
- Create a service account key file (JSON) and save it to a place the robot
  can use it
- Enable APIs
- Install rpaframework[google]

**Google authentication**

Authentication for Google is set with `service credentials JSON file` which can be given to the library
in three different ways.

- Method 1 as environment variables, ``GOOGLE_APPLICATION_CREDENTIALS`` with path to JSON file.
- Method 2 as keyword parameter to ``Init Storage Client`` for example.
- Method 3 as Robocloud vault secret. The vault name and secret key name needs to be given in library init
  or with keyword ``Set Robocloud Vault``. Secret value should contain JSON file contents.

Method 1. service credentials using environment variable

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Cloud.Google

    *** Tasks ***
    Init Google services
        # NO parameters for Vision Client, expecting to get JSON
        # with GOOGLE_APPLICATION_CREDENTIALS environment variable
        Init Vision Client

Method 2. service credentials with keyword parameter

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Cloud.Google

    *** Tasks ***
    Init Google services
        Init Speech To Text Client  /path/to/service_credentials.json

Method 3. setting Robocloud Vault in the library init

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Cloud.Google
    ...       robocloud_vault_name=googlecloud
    ...       robocloud_vault_secret_key=servicecreds

    *** Tasks ***
    Init Google services
        Init Storage Client   use_robocloud_vault=${TRUE}

Method 3. setting Robocloud Vault with keyword

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Cloud.Google

    *** Tasks ***
    Init Google services
        Set Robocloud Vault   vault_name=googlecloud  vault_secret_key=servicecreds
        Init Storage Client   use_robocloud_vault=${TRUE}

**Requirements**

Due to number of dependencies related to Google Cloud services this library has been set as
an optional package for ``rpaframework``.

This can be installed by opting in to the `google` dependency:

``pip install rpaframework[google]``

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Cloud.Google

    *** Variables ***
    ${SERVICE CREDENTIALS}    ${/}path${/}to${/}service_credentials.json
    ${BUCKET_NAME}            testbucket12213123123

    *** Tasks ***
    Upload a file into a new storage bucket
        [Setup]   Init Storage Client   ${SERVICE CREDENTIALS}
        Create Bucket    ${BUCKET_NAME}
        Upload File      ${BUCKET_NAME}   ${/}path${/}to${/}file.pdf  myfile.pdf
        @{files}         List Files   ${BUCKET_NAME}
        FOR   ${file}  IN   @{files}
            Log  ${file}
        END

**Python**

.. code-block:: python

    from RPA.Cloud.Google import Google

    library = Google
    service_credentials = '/path/to/service_credentials.json'

    library.init_vision_client(service_credentials)
    library.init_text_to_speech(service_credentials)

    response = library.detect_text('imagefile.png', 'result.json')
    library.synthesize_speech('I want this said aloud', target_file='said.mp3')

********
Keywords
********

:Analyze Sentiment:
  :Arguments: text_file: str, file_type: str = text, json_file: str = None, lang=None

  Analyze sentiment in a text file


:Annotate Image:
  :Arguments: image_uri: str, json_file: str = None

  Annotate image


:Annotate Video:
  :Arguments: video_uri: str = None, video_file: str = None, json_file: str = None, features: list = None

  Annotate video

  Possible values for features:
  - FEATURE_UNSPECIFIED, Unspecified.
  - LABEL_DETECTION, Label detection. Detect objects, such as dog or flower.
  - SHOT_CHANGE_DETECTION, Shot change detection.
  - EXPLICIT_CONTENT_DETECTION, Explicit content detection.
  - SPEECH_TRANSCRIPTION, Speech transcription.
  - TEXT_DETECTION, OCR text detection and tracking.
  - OBJECT_TRACKING, Object detection and tracking.
  - LOGO_RECOGNITION, Logo detection, tracking, and recognition.

  If `video_uri` is given then that is used even if `video_file` is None.


:Classify Text:
  :Arguments: text_file, json_file, lang=None

  Classify text


:Clear Values:
  :Arguments: sheet_id: str, sheet_range: str

  Clear cell values for range of cells within a sheet


:Create Bucket:
  :Arguments: bucket_name: str

  Create Google Cloud Storage bucket


:Create Sheet:
  :Arguments: title: str

  Create empty sheet with a title


:Delete Bucket:
  :Arguments: bucket_name: str

  Delete Google Cloud Storage bucket

  Bucket needs to be empty before it can be deleted.


:Delete Files:
  :Arguments: bucket_name: str, files: typing.Any

  Delete files in the bucket

  Files need to be object name in the bucket.


:Detect Document:
  :Arguments: image_file: str, json_file: str = None

  Detect document


:Detect Labels:
  :Arguments: image_file: str, json_file: str = None

  Detect labels in the image


:Detect Text:
  :Arguments: image_file: str, json_file: str = None

  Detect text in the image


:Download Files:
  :Arguments: bucket_name: str, files: typing.Any

  Download files from a bucket

  Example `files`:
  files = {"mytestimg": "image1.png", "mydoc": "google.pdf


:Face Detection:
  :Arguments: image_uri: str, json_file: str = None

  Detect faces


:Get Bucket:
  :Arguments: bucket_name: str

  Get Google Cloud Storage bucket


:Get Values:
  :Arguments: sheet_id: str, sheet_range: str, value_render_option: str = UNFORMATTED_VALUE, datetime_render_option: str = FORMATTED_STRING

  Get values from the range in the sheet


:Init Natural Language Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Natural Language client


:Init Sheets Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Sheets client


:Init Speech To Text Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Speech to Text client


:Init Storage Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Storage client


:Init Text To Speech Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Text to Speech client


:Init Translation Client:
  :Arguments: service_credentials_file: str = None, project_identifier: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Translation client


:Init Video Intelligence Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Video Intelligence client


:Init Vision Client:
  :Arguments: service_credentials_file: str = None, use_robocloud_vault: bool = False

  Initialize Google Cloud Vision client


:Insert Values:
  :Arguments: sheet_id: str, sheet_range: str, values: list, major_dimension: str = COLUMNS, value_input_option: str = USER_ENTERED

  Insert values into sheet cells


:List Buckets:
  List Google Cloud Storage buckets


:List Files:
  :Arguments: bucket_name: str

  List files in the bucket


:List Supported Voices:
  :Arguments: language_code: str = None

  List supported voices for the speech


:Recognize:
  :Arguments: audio_file_uri, encoding: str = FLAC, language_code: str = en_US, audio_channel_count=2

  Recognize text in the audio file


:Set Robocloud Vault:
  :Arguments: vault_name, vault_secret_key

  Set Robocloud Vault name and secret key name


:Synthesize Speech:
  :Arguments: text, language=en-US, name=en-US-Standard-B, gender=MALE, encoding=MP3, target_file=synthesized.mp3

  Synthesize speech synchronously


:Translate:
  :Arguments: text: typing.Any, source_language: str = None, target_language: str = None

  Translate text


:Upload File:
  :Arguments: bucket_name: str, filename: str, target_name: str

  Upload a file into a bucket


:Upload Files:
  :Arguments: bucket_name: str, files: dict

  Upload files into a bucket

  Example `files`:
  files = {"mytestimg": "image1.png", "mydoc": "google.pdf"}

