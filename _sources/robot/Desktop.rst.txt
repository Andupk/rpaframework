###################
Robot Framework API
###################

***********
Description
***********

:Library scope: Global

`Desktop` is a cross-platform library for navigating and interacting with
desktop environments. It can be used to automate applications through
the same interfaces that are available to human users.

The library includes the following features:

- Mouse and keyboard input emulation
- Starting and stopping applications
- Finding elements through image template matching
- Taking screenshots
- Clipboard management

**Note:** Windows element selectors are not currently supported,
    and require the use of ``RPA.Desktop.Windows``

**Locating elements**

To automate actions on the desktop, a robot needs to interact with various
graphical elements such as buttons or input fields. The positions of these
elements can be found using a feature called `locators`.

A locator describes the properties or features of an element. This information
can be later used to locate similar elements even when window positions or
states change.

The currently supported locator types are:

=========== =================== ===========
Name        Arguments           Description
=========== =================== ===========
alias       name (str)          A named locator, the default.
image       path (str)          Image of an element that is matched to current screen content
coordinates x (int), y (int)    Pixel coordinates as absolute position
offset      x (int), y (int)    Pixel coordinates relative to current mouse position
=========== =================== ===========

A locator is defined by its type and arguments, divided by a colon.
Some example usages are shown below. Note that the prefix for alias can
be omitted as its the default type.

.. code-block:: robotframework

    Click    alias:SpareBin.Login
    Click    SpareBin.Login

    Move mouse    image:%{ROBOT_ROOT}/logo.png
    Move mouse    offset:200,0
    Click

**Named locators**

The library supports storing locators in a database, which contains
all of the required fields and various bits of metadata. This enables
having one source of truth, which can be updated if a website's or applications's
UI changes. Robot Framework scripts can then only contain a reference
to a stored locator by name.

The main way to create named locators is with `Robocorp Lab`_.

.. _Robocorp Lab: https://robocorp.com/docs/product-manuals/robocorp-lab/robocorp-lab-overview

**Keyboard and mouse**

Keyboard keywords can emulate typing text, but also pressing various function keys.
The name of a key is case-insensitive and spaces will be converted to underscores,
i.e. the key ``Page Down`` and ``page_down`` are equivalent.

The following function keys are supported:

=============== ===========
Key             Description
=============== ===========
shift           A generic Shift key. This is a modifier.
shift_l         The left Shift key. This is a modifier.
shift_r         The right Shift key. This is a modifier.
ctrl            A generic Ctrl key. This is a modifier.
ctrl_l          he left Ctrl key. This is a modifier.
ctrl_r          The right Ctrl key. This is a modifier.
alt             A generic Alt key. This is a modifier.
alt_l           The left Alt key. This is a modifier.
alt_r           The right Alt key. This is a modifier.
alt_gr          The AltGr key. This is a modifier.
cmd             A generic command button (Windows / Command / Super key). This may be a modifier.
cmd_l           The left command button (Windows / Command / Super key). This may be a modifier.
cmd_r           The right command button (Windows / Command / Super key). This may be a modifier.
up              An up arrow key.
down            A down arrow key.
left            A left arrow key.
right           A right arrow key.
enter           The Enter or Return key.
space           The Space key.
tab             The Tab key.
backspace       The Backspace key.
delete          The Delete key.
esc             The Esc key.
home            The Home key.
end             The End key.
page_down       The Page Down key.
page_up         The Page Up key.
caps_lock       The Caps Lock key.
f1 to f20       The function keys.
insert          The Insert key. This may be undefined for some platforms.
menu            The Menu key. This may be undefined for some platforms.
num_lock        The Num Lock key. This may be undefined for some platforms.
pause           The Pause / Break key. This may be undefined for some platforms.
print_screen    The Print Screen key. This may be undefined for some platforms.
scroll_lock     The Scroll Lock key. This may be undefined for some platforms.
=============== ===========

When controlling the mouse, there are different types of actions that can be
done. Same formatting rules as function keys apply. They are as follows:

============ ===========
Action       Description
============ ===========
click        Click with left mouse button
left_click   Click with left mouse button
double_click Double click with left mouse button
triple_click Triple click with left mouse button
right_click  Click with right mouse button
============ ===========

The supported mouse button types are ``left``, ``right``, and ``middle``.

**Examples***

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Desktop

    *** Keywords ***
    Write entry in accounting
        [Arguments]    ${entry}
        Open application    erp_client.exe
        Click         image:%{ROBOT_ROOT}/images/create.png
        Type text     ${entry}
        Press keys    ctrl    s
        Press keys    enter
        [Teardown]    Close all applications

********
Keywords
********

Application
===========

:Close All Applications:
  Close all opened applications.

  Example:

  .. code-block:: robotframework

      Open file    order1.docx
      Open file    order2.docx
      Open file    order3.docx
      # Do something with Word
      Close all applications

:Close Application:
  :Arguments: app: Application

  Close given application. Needs to be started
  with this library.


  Example:

  .. code-block:: robotframework

      ${word}=    Open file    template.docx
      # Do something with Word
      Close application    ${word}

:Open Application:
  :Arguments: name_or_path: str, \*args

  Start a given application by name (if in PATH),
  or by path to executable.


  Example:

  .. code-block:: robotframework

      Open application    notepad.exe
      Open application    c:\path\to\program.exe    --example-argument

:Open File:
  :Arguments: path: str

  Open a file with the default application.


  Example:

  .. code-block:: robotframework

      Open file    orders.xlsx

Clipboard
=========

:Clear Clipboard:
  Clear the system clipboard.

:Copy To Clipboard:
  :Arguments: locator

  Read value to system clipboard from given input element.


  Example:

  .. code-block:: robotframework

      ${value}=    Copy to clipboard    ResultPage.Counter
      Log    Copied text: ${value}

:Get Clipboard Value:
  Read current value from system clipboard.

  Example:

  .. code-block:: robotframework

      Copy to clipboard       coordinates:401,198
      ${text}=    Get clipboard value
      Log    We just copied '${text}'

:Paste From Clipboard:
  :Arguments: locator

  Paste value from system clipboard into given element.


  Example:

  .. code-block:: robotframework

      Copy to clipboard       coordinates:401,198
      Paste from clipboard    coordinates:822,710

:Set Clipboard Value:
  :Arguments: text: str

  Write given value to system clipboard.

  Example:

  .. code-block:: robotframework

      Set clipboard value     This is some text.
      Paste from clipboard    coordinates:822,710

Finder
======

:Find Element:
  :Arguments: locator: str

  Find an element defined by locator, and return its position.


  Example:

  .. code-block:: robotframework

      ${match}=    Find element    image:logo.png
      Log    Found logo at ${match.x}, ${match.y}

:Find Elements:
  :Arguments: locator: str

  Find all elements defined by locator, and return their positions.


  Example:

  .. code-block:: robotframework

      ${matches}=    Find elements    image:icon.png
      FOR    ${match}  IN  @{matches}
          Log    Found icon at ${match.x}, ${match.y}
      END

:Set Default Confidence:
  :Arguments: confidence: float

  Set the default template matching confidence.


:Wait For Element:
  :Arguments: locator: str, timeout: float = 10.0, interval: float = 0.5

  Wait for an element defined by locator to exist or
  until timeout is reached.


  Example:

  .. code-block:: robotframework

      Wait for element    alias:CookieConsent    timeout=30
      Click    image:%{ROBOT_ROOT}/accept.png

Keyboard
========

:Press Keys:
  :Arguments: \*keys: str

  Press multiple keys down simultaneously.


  Example:

  .. code-block:: robotframework

      Press keys    ctrl  alt  delete

      Press keys    ctrl  a
      Press keys    ctrl  c
      ${all_text}=  Get clipboard value
      Log    Text box content was: ${all_text}

:Type Text:
  :Arguments: text: str, \*modifiers: str, enter: bool = False

  Type text one letter at a time.


  Example:

  .. code-block:: robotframework

      Type text    this text will be uppercase    shift

:Type Text Into:
  :Arguments: locator: str, text: str, clear: bool = False, enter: bool = False

  Type text at the position indicated by given locator.


  Example:

  .. code-block:: robotframework

      Type text into    LoginForm.Name      Marky Mark
      Type text into    LoginForm.Password  ${PASSWORD}

Mouse
=====

:Click:
  :Arguments: locator: str = None, action: Action { click | left_click | double_click | ... } = Action.click

  Click at the element indicated by locator.


  Example:

  .. code-block:: robotframework

      Click
      Click    LoginForm.Button
      Click    coordinates:500,200    triple click

:Click With Offset:
  :Arguments: locator: str = None, x: int = 0, y: int = 0, action: Action { click | left_click | double_click | ... } = Action.click

  Click at a given pixel offset from the given locator.


  Example:

  .. code-block:: robotframework

      Click with offset    Robocorp.Logo    y=400

:Drag And Drop:
  :Arguments: source: str, destination: str, start_delay: float = 2.0, end_delay: float = 0.5

  Drag mouse from source to destination while holding the left mouse button.


:Get Mouse Position:
  Get current mouse position in pixel coordinates.

  Example:

  .. code-block:: robotframework

      ${position}=    Get mouse position
      Log    Current mouse position is ${position.x}, ${position.y}

:Move Mouse:
  :Arguments: locator: str

  Move mouse to given coordinates.


  Example:

  .. code-block:: robotframework

      Move mouse    Robocorp.Logo
      Move mouse    offset:0,400

:Press Mouse Button:
  :Arguments: button: typing.Any = left

  Press down mouse button and keep it pressed.

:Release Mouse Button:
  :Arguments: button: typing.Any = left

  Release mouse button that was previously pressed.

Screen
======

:Get Display Dimensions:
  Returns the dimensions of the current virtual display,
  which is the combined size of all physical monitors.

:Highlight Elements:
  :Arguments: locator: str

  Draw an outline around all matching elements.

:Take Screenshot:
  :Arguments: path: str = None, locator: str = None

  Take a screenshot of the whole screen, or an element
  identified by the given locator.

